"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Release = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * For more information, see:
 * * [Get started with Firebase Security Rules](https://firebase.google.com/docs/rules/get-started)
 * ## Example Usage
 * ### Firestore_release
 * Creates a Firebase Rules Release to Cloud Firestore
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const firestore = new gcp.firebaserules.Ruleset("firestore", {
 *     source: {
 *         files: [{
 *             content: "service cloud.firestore {match /databases/{database}/documents { match /{document=**} { allow read, write: if false; } } }",
 *             name: "firestore.rules",
 *         }],
 *     },
 *     project: "my-project-name",
 * });
 * const primary = new gcp.firebaserules.Release("primary", {
 *     rulesetName: pulumi.interpolate`projects/my-project-name/rulesets/${firestore.name}`,
 *     project: "my-project-name",
 * });
 * ```
 * ### Storage_release
 * Creates a Firebase Rules Release for a Storage bucket
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * // Provision a non-default Cloud Storage bucket.
 * const bucketBucket = new gcp.storage.Bucket("bucketBucket", {
 *     project: "my-project-name",
 *     location: "us-west1",
 * });
 * // Make the Storage bucket accessible for Firebase SDKs, authentication, and Firebase Security Rules.
 * const bucketStorageBucket = new gcp.firebase.StorageBucket("bucketStorageBucket", {
 *     project: "my-project-name",
 *     bucketId: bucketBucket.name,
 * });
 * // Create a ruleset of Firebase Security Rules from a local file.
 * const storage = new gcp.firebaserules.Ruleset("storage", {
 *     project: "my-project-name",
 *     source: {
 *         files: [{
 *             name: "storage.rules",
 *             content: "service firebase.storage {match /b/{bucket}/o {match /{allPaths=**} {allow read, write: if request.auth != null;}}}",
 *         }],
 *     },
 * }, {
 *     dependsOn: [bucketStorageBucket],
 * });
 * const primary = new gcp.firebaserules.Release("primary", {
 *     rulesetName: pulumi.interpolate`projects/my-project-name/rulesets/${storage.name}`,
 *     project: "my-project-name",
 * });
 * ```
 *
 * ## Import
 *
 * Release can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:firebaserules/release:Release default projects/{{project}}/releases/{{name}}
 * ```
 */
class Release extends pulumi.CustomResource {
    /**
     * Get an existing Release resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Release(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Release.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Release.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["rulesetName"] = state ? state.rulesetName : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.rulesetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rulesetName'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rulesetName"] = args ? args.rulesetName : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["disabled"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Release.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Release = Release;
/** @internal */
Release.__pulumiType = 'gcp:firebaserules/release:Release';
//# sourceMappingURL=release.js.map