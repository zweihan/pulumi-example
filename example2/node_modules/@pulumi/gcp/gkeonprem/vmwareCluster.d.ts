import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * ## Example Usage
 * ### Gkeonprem Vmware Cluster Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const cluster_basic = new gcp.gkeonprem.VMwareCluster("cluster-basic", {
 *     location: "us-west1",
 *     adminClusterMembership: "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
 *     description: "test cluster",
 *     onPremVersion: "1.13.1-gke.35",
 *     annotations: {},
 *     networkConfig: {
 *         serviceAddressCidrBlocks: ["10.96.0.0/12"],
 *         podAddressCidrBlocks: ["192.168.0.0/16"],
 *         dhcpIpConfig: {
 *             enabled: true,
 *         },
 *     },
 *     controlPlaneNode: {
 *         cpus: 4,
 *         memory: 8192,
 *         replicas: 1,
 *     },
 *     loadBalancer: {
 *         vipConfig: {
 *             controlPlaneVip: "10.251.133.5",
 *             ingressVip: "10.251.135.19",
 *         },
 *         metalLbConfig: {
 *             addressPools: [
 *                 {
 *                     pool: "ingress-ip",
 *                     manualAssign: true,
 *                     addresses: ["10.251.135.19"],
 *                     avoidBuggyIps: true,
 *                 },
 *                 {
 *                     pool: "lb-test-ip",
 *                     manualAssign: true,
 *                     addresses: ["10.251.135.19"],
 *                     avoidBuggyIps: true,
 *                 },
 *             ],
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Gkeonprem Vmware Cluster F5lb
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const cluster_f5lb = new gcp.gkeonprem.VMwareCluster("cluster-f5lb", {
 *     location: "us-west1",
 *     adminClusterMembership: "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
 *     description: "test cluster",
 *     onPremVersion: "1.13.1-gke.35",
 *     annotations: {},
 *     networkConfig: {
 *         serviceAddressCidrBlocks: ["10.96.0.0/12"],
 *         podAddressCidrBlocks: ["192.168.0.0/16"],
 *         dhcpIpConfig: {
 *             enabled: true,
 *         },
 *         controlPlaneV2Config: {
 *             controlPlaneIpBlock: {
 *                 ips: [{
 *                     hostname: "test-hostname",
 *                     ip: "10.0.0.1",
 *                 }],
 *                 netmask: "10.0.0.1/32",
 *                 gateway: "test-gateway",
 *             },
 *         },
 *     },
 *     controlPlaneNode: {
 *         cpus: 4,
 *         memory: 8192,
 *         replicas: 1,
 *         autoResizeConfig: {
 *             enabled: true,
 *         },
 *     },
 *     loadBalancer: {
 *         vipConfig: {
 *             controlPlaneVip: "10.251.133.5",
 *             ingressVip: "10.251.135.19",
 *         },
 *         f5Config: {
 *             address: "10.0.0.1",
 *             partition: "test-partition",
 *             snatPool: "test-snap-pool",
 *         },
 *     },
 *     dataplaneV2: {
 *         dataplaneV2Enabled: true,
 *         windowsDataplaneV2Enabled: true,
 *         advancedNetworking: true,
 *     },
 *     vmTrackingEnabled: true,
 *     enableControlPlaneV2: true,
 *     authorization: {
 *         adminUsers: [{
 *             username: "testuser@gmail.com",
 *         }],
 *     },
 *     antiAffinityGroups: {
 *         aagConfigDisabled: true,
 *     },
 *     autoRepairConfig: {
 *         enabled: true,
 *     },
 *     storage: {
 *         vsphereCsiDisabled: true,
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Gkeonprem Vmware Cluster Manuallb
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const cluster_manuallb = new gcp.gkeonprem.VMwareCluster("cluster-manuallb", {
 *     location: "us-west1",
 *     adminClusterMembership: "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
 *     description: "test cluster",
 *     onPremVersion: "1.13.1-gke.35",
 *     annotations: {},
 *     networkConfig: {
 *         serviceAddressCidrBlocks: ["10.96.0.0/12"],
 *         podAddressCidrBlocks: ["192.168.0.0/16"],
 *         hostConfig: {
 *             dnsServers: ["10.254.41.1"],
 *             ntpServers: ["216.239.35.8"],
 *             dnsSearchDomains: ["test-domain"],
 *         },
 *         staticIpConfig: {
 *             ipBlocks: [{
 *                 netmask: "255.255.252.0",
 *                 gateway: "10.251.31.254",
 *                 ips: [
 *                     {
 *                         ip: "10.251.30.153",
 *                         hostname: "test-hostname1",
 *                     },
 *                     {
 *                         ip: "10.251.31.206",
 *                         hostname: "test-hostname2",
 *                     },
 *                     {
 *                         ip: "10.251.31.193",
 *                         hostname: "test-hostname3",
 *                     },
 *                     {
 *                         ip: "10.251.30.230",
 *                         hostname: "test-hostname4",
 *                     },
 *                 ],
 *             }],
 *         },
 *     },
 *     controlPlaneNode: {
 *         cpus: 4,
 *         memory: 8192,
 *         replicas: 1,
 *         autoResizeConfig: {
 *             enabled: true,
 *         },
 *     },
 *     loadBalancer: {
 *         vipConfig: {
 *             controlPlaneVip: "10.251.133.5",
 *             ingressVip: "10.251.135.19",
 *         },
 *         manualLbConfig: {
 *             ingressHttpNodePort: 30005,
 *             ingressHttpsNodePort: 30006,
 *             controlPlaneNodePort: 30007,
 *             konnectivityServerNodePort: 30008,
 *         },
 *     },
 *     dataplaneV2: {
 *         dataplaneV2Enabled: true,
 *         windowsDataplaneV2Enabled: true,
 *         advancedNetworking: true,
 *     },
 *     vmTrackingEnabled: true,
 *     enableControlPlaneV2: true,
 *     authorization: {
 *         adminUsers: [{
 *             username: "testuser@gmail.com",
 *         }],
 *     },
 *     antiAffinityGroups: {
 *         aagConfigDisabled: true,
 *     },
 *     autoRepairConfig: {
 *         enabled: true,
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * VmwareCluster can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:gkeonprem/vMwareCluster:VMwareCluster default projects/{{project}}/locations/{{location}}/vmwareClusters/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gkeonprem/vMwareCluster:VMwareCluster default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gkeonprem/vMwareCluster:VMwareCluster default {{location}}/{{name}}
 * ```
 */
export declare class VMwareCluster extends pulumi.CustomResource {
    /**
     * Get an existing VMwareCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VMwareClusterState, opts?: pulumi.CustomResourceOptions): VMwareCluster;
    /**
     * Returns true if the given object is an instance of VMwareCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is VMwareCluster;
    /**
     * The admin cluster this VMware User Cluster belongs to.
     * This is the full resource name of the admin cluster's hub membership.
     * In the future, references to other resource types might be allowed if
     * admin clusters are modeled as their own resources.
     */
    readonly adminClusterMembership: pulumi.Output<string>;
    /**
     * Annotations on the VMware User Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     */
    readonly annotations: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * AAGConfig specifies whether to spread VMware User Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     */
    readonly antiAffinityGroups: pulumi.Output<outputs.gkeonprem.VMwareClusterAntiAffinityGroups>;
    /**
     * RBAC policy that will be applied and managed by GKE On-Prem.
     * Structure is documented below.
     */
    readonly authorization: pulumi.Output<outputs.gkeonprem.VMwareClusterAuthorization | undefined>;
    /**
     * Configuration for auto repairing.
     * Structure is documented below.
     */
    readonly autoRepairConfig: pulumi.Output<outputs.gkeonprem.VMwareClusterAutoRepairConfig>;
    /**
     * VMware User Cluster control plane nodes must have either 1 or 3 replicas.
     * Structure is documented below.
     */
    readonly controlPlaneNode: pulumi.Output<outputs.gkeonprem.VMwareClusterControlPlaneNode>;
    /**
     * The time at which VMware User Cluster was created.
     */
    readonly createTime: pulumi.Output<string>;
    /**
     * VmwareDataplaneV2Config specifies configuration for Dataplane V2.
     * Structure is documented below.
     */
    readonly dataplaneV2: pulumi.Output<outputs.gkeonprem.VMwareClusterDataplaneV2>;
    /**
     * The time at which VMware User Cluster was deleted.
     */
    readonly deleteTime: pulumi.Output<string>;
    /**
     * A human readable description of this VMware User Cluster.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Enable control plane V2. Default to false.
     */
    readonly enableControlPlaneV2: pulumi.Output<boolean | undefined>;
    /**
     * The DNS name of VMware User Cluster's API server.
     */
    readonly endpoint: pulumi.Output<string>;
    /**
     * This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     */
    readonly etag: pulumi.Output<string>;
    /**
     * Fleet configuration for the cluster.
     * Structure is documented below.
     */
    readonly fleets: pulumi.Output<outputs.gkeonprem.VMwareClusterFleet[]>;
    /**
     * Load Balancer configuration.
     * Structure is documented below.
     */
    readonly loadBalancer: pulumi.Output<outputs.gkeonprem.VMwareClusterLoadBalancer | undefined>;
    /**
     * The object name of the VMware OnPremUserCluster custom resource on the
     * associated admin cluster. This field is used to support conflicting
     * names when enrolling existing clusters to the API. When used as a part of
     * cluster enrollment, this field will differ from the ID in the resource
     * name. For new clusters, this field will match the user provided cluster ID
     * and be visible in the last component of the resource name. It is not
     * modifiable.
     * All users should use this name to access their cluster using gkectl or
     * kubectl and should expect to see the local name when viewing admin
     * cluster controller logs.
     */
    readonly localName: pulumi.Output<string>;
    /**
     * The location of the resource.
     */
    readonly location: pulumi.Output<string>;
    /**
     * The VMware cluster name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The VMware User Cluster network configuration.
     * Structure is documented below.
     */
    readonly networkConfig: pulumi.Output<outputs.gkeonprem.VMwareClusterNetworkConfig | undefined>;
    /**
     * The Anthos clusters on the VMware version for your user cluster.
     */
    readonly onPremVersion: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * If set, there are currently changes in flight to the VMware User Cluster.
     */
    readonly reconciling: pulumi.Output<boolean>;
    /**
     * (Output)
     * The lifecycle state of the condition.
     */
    readonly state: pulumi.Output<string>;
    /**
     * (Output)
     * Specifies the detailed validation check status
     * Structure is documented below.
     */
    readonly statuses: pulumi.Output<outputs.gkeonprem.VMwareClusterStatus[]>;
    /**
     * Storage configuration.
     * Structure is documented below.
     */
    readonly storage: pulumi.Output<outputs.gkeonprem.VMwareClusterStorage>;
    /**
     * The unique identifier of the VMware User Cluster.
     */
    readonly uid: pulumi.Output<string>;
    /**
     * The time at which VMware User Cluster was last updated.
     */
    readonly updateTime: pulumi.Output<string>;
    /**
     * ValidationCheck represents the result of the preflight check job.
     * Structure is documented below.
     */
    readonly validationChecks: pulumi.Output<outputs.gkeonprem.VMwareClusterValidationCheck[]>;
    /**
     * VmwareVCenterConfig specifies vCenter config for the user cluster.
     * Inherited from the admin cluster.
     * Structure is documented below.
     */
    readonly vcenters: pulumi.Output<outputs.gkeonprem.VMwareClusterVcenter[]>;
    /**
     * Enable VM tracking.
     */
    readonly vmTrackingEnabled: pulumi.Output<boolean>;
    /**
     * Create a VMwareCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VMwareClusterArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering VMwareCluster resources.
 */
export interface VMwareClusterState {
    /**
     * The admin cluster this VMware User Cluster belongs to.
     * This is the full resource name of the admin cluster's hub membership.
     * In the future, references to other resource types might be allowed if
     * admin clusters are modeled as their own resources.
     */
    adminClusterMembership?: pulumi.Input<string>;
    /**
     * Annotations on the VMware User Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     */
    annotations?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * AAGConfig specifies whether to spread VMware User Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     */
    antiAffinityGroups?: pulumi.Input<inputs.gkeonprem.VMwareClusterAntiAffinityGroups>;
    /**
     * RBAC policy that will be applied and managed by GKE On-Prem.
     * Structure is documented below.
     */
    authorization?: pulumi.Input<inputs.gkeonprem.VMwareClusterAuthorization>;
    /**
     * Configuration for auto repairing.
     * Structure is documented below.
     */
    autoRepairConfig?: pulumi.Input<inputs.gkeonprem.VMwareClusterAutoRepairConfig>;
    /**
     * VMware User Cluster control plane nodes must have either 1 or 3 replicas.
     * Structure is documented below.
     */
    controlPlaneNode?: pulumi.Input<inputs.gkeonprem.VMwareClusterControlPlaneNode>;
    /**
     * The time at which VMware User Cluster was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * VmwareDataplaneV2Config specifies configuration for Dataplane V2.
     * Structure is documented below.
     */
    dataplaneV2?: pulumi.Input<inputs.gkeonprem.VMwareClusterDataplaneV2>;
    /**
     * The time at which VMware User Cluster was deleted.
     */
    deleteTime?: pulumi.Input<string>;
    /**
     * A human readable description of this VMware User Cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable control plane V2. Default to false.
     */
    enableControlPlaneV2?: pulumi.Input<boolean>;
    /**
     * The DNS name of VMware User Cluster's API server.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     */
    etag?: pulumi.Input<string>;
    /**
     * Fleet configuration for the cluster.
     * Structure is documented below.
     */
    fleets?: pulumi.Input<pulumi.Input<inputs.gkeonprem.VMwareClusterFleet>[]>;
    /**
     * Load Balancer configuration.
     * Structure is documented below.
     */
    loadBalancer?: pulumi.Input<inputs.gkeonprem.VMwareClusterLoadBalancer>;
    /**
     * The object name of the VMware OnPremUserCluster custom resource on the
     * associated admin cluster. This field is used to support conflicting
     * names when enrolling existing clusters to the API. When used as a part of
     * cluster enrollment, this field will differ from the ID in the resource
     * name. For new clusters, this field will match the user provided cluster ID
     * and be visible in the last component of the resource name. It is not
     * modifiable.
     * All users should use this name to access their cluster using gkectl or
     * kubectl and should expect to see the local name when viewing admin
     * cluster controller logs.
     */
    localName?: pulumi.Input<string>;
    /**
     * The location of the resource.
     */
    location?: pulumi.Input<string>;
    /**
     * The VMware cluster name.
     */
    name?: pulumi.Input<string>;
    /**
     * The VMware User Cluster network configuration.
     * Structure is documented below.
     */
    networkConfig?: pulumi.Input<inputs.gkeonprem.VMwareClusterNetworkConfig>;
    /**
     * The Anthos clusters on the VMware version for your user cluster.
     */
    onPremVersion?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * If set, there are currently changes in flight to the VMware User Cluster.
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * (Output)
     * The lifecycle state of the condition.
     */
    state?: pulumi.Input<string>;
    /**
     * (Output)
     * Specifies the detailed validation check status
     * Structure is documented below.
     */
    statuses?: pulumi.Input<pulumi.Input<inputs.gkeonprem.VMwareClusterStatus>[]>;
    /**
     * Storage configuration.
     * Structure is documented below.
     */
    storage?: pulumi.Input<inputs.gkeonprem.VMwareClusterStorage>;
    /**
     * The unique identifier of the VMware User Cluster.
     */
    uid?: pulumi.Input<string>;
    /**
     * The time at which VMware User Cluster was last updated.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * ValidationCheck represents the result of the preflight check job.
     * Structure is documented below.
     */
    validationChecks?: pulumi.Input<pulumi.Input<inputs.gkeonprem.VMwareClusterValidationCheck>[]>;
    /**
     * VmwareVCenterConfig specifies vCenter config for the user cluster.
     * Inherited from the admin cluster.
     * Structure is documented below.
     */
    vcenters?: pulumi.Input<pulumi.Input<inputs.gkeonprem.VMwareClusterVcenter>[]>;
    /**
     * Enable VM tracking.
     */
    vmTrackingEnabled?: pulumi.Input<boolean>;
}
/**
 * The set of arguments for constructing a VMwareCluster resource.
 */
export interface VMwareClusterArgs {
    /**
     * The admin cluster this VMware User Cluster belongs to.
     * This is the full resource name of the admin cluster's hub membership.
     * In the future, references to other resource types might be allowed if
     * admin clusters are modeled as their own resources.
     */
    adminClusterMembership: pulumi.Input<string>;
    /**
     * Annotations on the VMware User Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     */
    annotations?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * AAGConfig specifies whether to spread VMware User Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     */
    antiAffinityGroups?: pulumi.Input<inputs.gkeonprem.VMwareClusterAntiAffinityGroups>;
    /**
     * RBAC policy that will be applied and managed by GKE On-Prem.
     * Structure is documented below.
     */
    authorization?: pulumi.Input<inputs.gkeonprem.VMwareClusterAuthorization>;
    /**
     * Configuration for auto repairing.
     * Structure is documented below.
     */
    autoRepairConfig?: pulumi.Input<inputs.gkeonprem.VMwareClusterAutoRepairConfig>;
    /**
     * VMware User Cluster control plane nodes must have either 1 or 3 replicas.
     * Structure is documented below.
     */
    controlPlaneNode: pulumi.Input<inputs.gkeonprem.VMwareClusterControlPlaneNode>;
    /**
     * VmwareDataplaneV2Config specifies configuration for Dataplane V2.
     * Structure is documented below.
     */
    dataplaneV2?: pulumi.Input<inputs.gkeonprem.VMwareClusterDataplaneV2>;
    /**
     * A human readable description of this VMware User Cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable control plane V2. Default to false.
     */
    enableControlPlaneV2?: pulumi.Input<boolean>;
    /**
     * Load Balancer configuration.
     * Structure is documented below.
     */
    loadBalancer?: pulumi.Input<inputs.gkeonprem.VMwareClusterLoadBalancer>;
    /**
     * The location of the resource.
     */
    location: pulumi.Input<string>;
    /**
     * The VMware cluster name.
     */
    name?: pulumi.Input<string>;
    /**
     * The VMware User Cluster network configuration.
     * Structure is documented below.
     */
    networkConfig?: pulumi.Input<inputs.gkeonprem.VMwareClusterNetworkConfig>;
    /**
     * The Anthos clusters on the VMware version for your user cluster.
     */
    onPremVersion: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Storage configuration.
     * Structure is documented below.
     */
    storage?: pulumi.Input<inputs.gkeonprem.VMwareClusterStorage>;
    /**
     * Enable VM tracking.
     */
    vmTrackingEnabled?: pulumi.Input<boolean>;
}
