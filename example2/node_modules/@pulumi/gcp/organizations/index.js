"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Project = exports.Policy = exports.IAMPolicy = exports.IAMMember = exports.IAMCustomRole = exports.IAMBinding = exports.IamAuditConfig = exports.getProjectOutput = exports.getProject = exports.getOrganizationOutput = exports.getOrganization = exports.getIAMPolicyOutput = exports.getIAMPolicy = exports.getFoldersOutput = exports.getFolders = exports.getFolderOutput = exports.getFolder = exports.getClientOpenIdUserInfo = exports.getClientConfig = exports.getBillingAccountOutput = exports.getBillingAccount = exports.getActiveFolderOutput = exports.getActiveFolder = exports.Folder = exports.AccessApprovalSettings = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.AccessApprovalSettings = null;
utilities.lazyLoad(exports, ["AccessApprovalSettings"], () => require("./accessApprovalSettings"));
exports.Folder = null;
utilities.lazyLoad(exports, ["Folder"], () => require("./folder"));
exports.getActiveFolder = null;
exports.getActiveFolderOutput = null;
utilities.lazyLoad(exports, ["getActiveFolder", "getActiveFolderOutput"], () => require("./getActiveFolder"));
exports.getBillingAccount = null;
exports.getBillingAccountOutput = null;
utilities.lazyLoad(exports, ["getBillingAccount", "getBillingAccountOutput"], () => require("./getBillingAccount"));
exports.getClientConfig = null;
utilities.lazyLoad(exports, ["getClientConfig"], () => require("./getClientConfig"));
exports.getClientOpenIdUserInfo = null;
utilities.lazyLoad(exports, ["getClientOpenIdUserInfo"], () => require("./getClientOpenIdUserInfo"));
exports.getFolder = null;
exports.getFolderOutput = null;
utilities.lazyLoad(exports, ["getFolder", "getFolderOutput"], () => require("./getFolder"));
exports.getFolders = null;
exports.getFoldersOutput = null;
utilities.lazyLoad(exports, ["getFolders", "getFoldersOutput"], () => require("./getFolders"));
exports.getIAMPolicy = null;
exports.getIAMPolicyOutput = null;
utilities.lazyLoad(exports, ["getIAMPolicy", "getIAMPolicyOutput"], () => require("./getIAMPolicy"));
exports.getOrganization = null;
exports.getOrganizationOutput = null;
utilities.lazyLoad(exports, ["getOrganization", "getOrganizationOutput"], () => require("./getOrganization"));
exports.getProject = null;
exports.getProjectOutput = null;
utilities.lazyLoad(exports, ["getProject", "getProjectOutput"], () => require("./getProject"));
exports.IamAuditConfig = null;
utilities.lazyLoad(exports, ["IamAuditConfig"], () => require("./iamAuditConfig"));
exports.IAMBinding = null;
utilities.lazyLoad(exports, ["IAMBinding"], () => require("./iambinding"));
exports.IAMCustomRole = null;
utilities.lazyLoad(exports, ["IAMCustomRole"], () => require("./iamcustomRole"));
exports.IAMMember = null;
utilities.lazyLoad(exports, ["IAMMember"], () => require("./iammember"));
exports.IAMPolicy = null;
utilities.lazyLoad(exports, ["IAMPolicy"], () => require("./iampolicy"));
exports.Policy = null;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));
exports.Project = null;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:organizations/accessApprovalSettings:AccessApprovalSettings":
                return new exports.AccessApprovalSettings(name, undefined, { urn });
            case "gcp:organizations/folder:Folder":
                return new exports.Folder(name, undefined, { urn });
            case "gcp:organizations/iAMBinding:IAMBinding":
                return new exports.IAMBinding(name, undefined, { urn });
            case "gcp:organizations/iAMCustomRole:IAMCustomRole":
                return new exports.IAMCustomRole(name, undefined, { urn });
            case "gcp:organizations/iAMMember:IAMMember":
                return new exports.IAMMember(name, undefined, { urn });
            case "gcp:organizations/iAMPolicy:IAMPolicy":
                return new exports.IAMPolicy(name, undefined, { urn });
            case "gcp:organizations/iamAuditConfig:IamAuditConfig":
                return new exports.IamAuditConfig(name, undefined, { urn });
            case "gcp:organizations/policy:Policy":
                return new exports.Policy(name, undefined, { urn });
            case "gcp:organizations/project:Project":
                return new exports.Project(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "organizations/accessApprovalSettings", _module);
pulumi.runtime.registerResourceModule("gcp", "organizations/folder", _module);
pulumi.runtime.registerResourceModule("gcp", "organizations/iAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "organizations/iAMCustomRole", _module);
pulumi.runtime.registerResourceModule("gcp", "organizations/iAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "organizations/iAMPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "organizations/iamAuditConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "organizations/policy", _module);
pulumi.runtime.registerResourceModule("gcp", "organizations/project", _module);
//# sourceMappingURL=index.js.map