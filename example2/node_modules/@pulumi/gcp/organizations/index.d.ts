export { AccessApprovalSettingsArgs, AccessApprovalSettingsState } from "./accessApprovalSettings";
export type AccessApprovalSettings = import("./accessApprovalSettings").AccessApprovalSettings;
export declare const AccessApprovalSettings: typeof import("./accessApprovalSettings").AccessApprovalSettings;
export { FolderArgs, FolderState } from "./folder";
export type Folder = import("./folder").Folder;
export declare const Folder: typeof import("./folder").Folder;
export { GetActiveFolderArgs, GetActiveFolderResult, GetActiveFolderOutputArgs } from "./getActiveFolder";
export declare const getActiveFolder: typeof import("./getActiveFolder").getActiveFolder;
export declare const getActiveFolderOutput: typeof import("./getActiveFolder").getActiveFolderOutput;
export { GetBillingAccountArgs, GetBillingAccountResult, GetBillingAccountOutputArgs } from "./getBillingAccount";
export declare const getBillingAccount: typeof import("./getBillingAccount").getBillingAccount;
export declare const getBillingAccountOutput: typeof import("./getBillingAccount").getBillingAccountOutput;
export { GetClientConfigResult } from "./getClientConfig";
export declare const getClientConfig: typeof import("./getClientConfig").getClientConfig;
export { GetClientOpenIdUserInfoResult } from "./getClientOpenIdUserInfo";
export declare const getClientOpenIdUserInfo: typeof import("./getClientOpenIdUserInfo").getClientOpenIdUserInfo;
export { GetFolderArgs, GetFolderResult, GetFolderOutputArgs } from "./getFolder";
export declare const getFolder: typeof import("./getFolder").getFolder;
export declare const getFolderOutput: typeof import("./getFolder").getFolderOutput;
export { GetFoldersArgs, GetFoldersResult, GetFoldersOutputArgs } from "./getFolders";
export declare const getFolders: typeof import("./getFolders").getFolders;
export declare const getFoldersOutput: typeof import("./getFolders").getFoldersOutput;
export { GetIAMPolicyArgs, GetIAMPolicyResult, GetIAMPolicyOutputArgs } from "./getIAMPolicy";
export declare const getIAMPolicy: typeof import("./getIAMPolicy").getIAMPolicy;
export declare const getIAMPolicyOutput: typeof import("./getIAMPolicy").getIAMPolicyOutput;
export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export declare const getOrganization: typeof import("./getOrganization").getOrganization;
export declare const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput;
export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export declare const getProject: typeof import("./getProject").getProject;
export declare const getProjectOutput: typeof import("./getProject").getProjectOutput;
export { IamAuditConfigArgs, IamAuditConfigState } from "./iamAuditConfig";
export type IamAuditConfig = import("./iamAuditConfig").IamAuditConfig;
export declare const IamAuditConfig: typeof import("./iamAuditConfig").IamAuditConfig;
export { IAMBindingArgs, IAMBindingState } from "./iambinding";
export type IAMBinding = import("./iambinding").IAMBinding;
export declare const IAMBinding: typeof import("./iambinding").IAMBinding;
export { IAMCustomRoleArgs, IAMCustomRoleState } from "./iamcustomRole";
export type IAMCustomRole = import("./iamcustomRole").IAMCustomRole;
export declare const IAMCustomRole: typeof import("./iamcustomRole").IAMCustomRole;
export { IAMMemberArgs, IAMMemberState } from "./iammember";
export type IAMMember = import("./iammember").IAMMember;
export declare const IAMMember: typeof import("./iammember").IAMMember;
export { IAMPolicyArgs, IAMPolicyState } from "./iampolicy";
export type IAMPolicy = import("./iampolicy").IAMPolicy;
export declare const IAMPolicy: typeof import("./iampolicy").IAMPolicy;
export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export declare const Policy: typeof import("./policy").Policy;
export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export declare const Project: typeof import("./project").Project;
