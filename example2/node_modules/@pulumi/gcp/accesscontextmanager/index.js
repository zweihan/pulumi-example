"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServicePerimeters = exports.ServicePerimeterResource = exports.ServicePerimeter = exports.IngressPolicy = exports.GcpUserAccessBinding = exports.EgressPolicy = exports.AuthorizedOrgsDesc = exports.AccessPolicyIamPolicy = exports.AccessPolicyIamMember = exports.AccessPolicyIamBinding = exports.AccessPolicy = exports.AccessLevels = exports.AccessLevelCondition = exports.AccessLevel = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.AccessLevel = null;
utilities.lazyLoad(exports, ["AccessLevel"], () => require("./accessLevel"));
exports.AccessLevelCondition = null;
utilities.lazyLoad(exports, ["AccessLevelCondition"], () => require("./accessLevelCondition"));
exports.AccessLevels = null;
utilities.lazyLoad(exports, ["AccessLevels"], () => require("./accessLevels"));
exports.AccessPolicy = null;
utilities.lazyLoad(exports, ["AccessPolicy"], () => require("./accessPolicy"));
exports.AccessPolicyIamBinding = null;
utilities.lazyLoad(exports, ["AccessPolicyIamBinding"], () => require("./accessPolicyIamBinding"));
exports.AccessPolicyIamMember = null;
utilities.lazyLoad(exports, ["AccessPolicyIamMember"], () => require("./accessPolicyIamMember"));
exports.AccessPolicyIamPolicy = null;
utilities.lazyLoad(exports, ["AccessPolicyIamPolicy"], () => require("./accessPolicyIamPolicy"));
exports.AuthorizedOrgsDesc = null;
utilities.lazyLoad(exports, ["AuthorizedOrgsDesc"], () => require("./authorizedOrgsDesc"));
exports.EgressPolicy = null;
utilities.lazyLoad(exports, ["EgressPolicy"], () => require("./egressPolicy"));
exports.GcpUserAccessBinding = null;
utilities.lazyLoad(exports, ["GcpUserAccessBinding"], () => require("./gcpUserAccessBinding"));
exports.IngressPolicy = null;
utilities.lazyLoad(exports, ["IngressPolicy"], () => require("./ingressPolicy"));
exports.ServicePerimeter = null;
utilities.lazyLoad(exports, ["ServicePerimeter"], () => require("./servicePerimeter"));
exports.ServicePerimeterResource = null;
utilities.lazyLoad(exports, ["ServicePerimeterResource"], () => require("./servicePerimeterResource"));
exports.ServicePerimeters = null;
utilities.lazyLoad(exports, ["ServicePerimeters"], () => require("./servicePerimeters"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:accesscontextmanager/accessLevel:AccessLevel":
                return new exports.AccessLevel(name, undefined, { urn });
            case "gcp:accesscontextmanager/accessLevelCondition:AccessLevelCondition":
                return new exports.AccessLevelCondition(name, undefined, { urn });
            case "gcp:accesscontextmanager/accessLevels:AccessLevels":
                return new exports.AccessLevels(name, undefined, { urn });
            case "gcp:accesscontextmanager/accessPolicy:AccessPolicy":
                return new exports.AccessPolicy(name, undefined, { urn });
            case "gcp:accesscontextmanager/accessPolicyIamBinding:AccessPolicyIamBinding":
                return new exports.AccessPolicyIamBinding(name, undefined, { urn });
            case "gcp:accesscontextmanager/accessPolicyIamMember:AccessPolicyIamMember":
                return new exports.AccessPolicyIamMember(name, undefined, { urn });
            case "gcp:accesscontextmanager/accessPolicyIamPolicy:AccessPolicyIamPolicy":
                return new exports.AccessPolicyIamPolicy(name, undefined, { urn });
            case "gcp:accesscontextmanager/authorizedOrgsDesc:AuthorizedOrgsDesc":
                return new exports.AuthorizedOrgsDesc(name, undefined, { urn });
            case "gcp:accesscontextmanager/egressPolicy:EgressPolicy":
                return new exports.EgressPolicy(name, undefined, { urn });
            case "gcp:accesscontextmanager/gcpUserAccessBinding:GcpUserAccessBinding":
                return new exports.GcpUserAccessBinding(name, undefined, { urn });
            case "gcp:accesscontextmanager/ingressPolicy:IngressPolicy":
                return new exports.IngressPolicy(name, undefined, { urn });
            case "gcp:accesscontextmanager/servicePerimeter:ServicePerimeter":
                return new exports.ServicePerimeter(name, undefined, { urn });
            case "gcp:accesscontextmanager/servicePerimeterResource:ServicePerimeterResource":
                return new exports.ServicePerimeterResource(name, undefined, { urn });
            case "gcp:accesscontextmanager/servicePerimeters:ServicePerimeters":
                return new exports.ServicePerimeters(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/accessLevel", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/accessLevelCondition", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/accessLevels", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/accessPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/accessPolicyIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/accessPolicyIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/accessPolicyIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/authorizedOrgsDesc", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/egressPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/gcpUserAccessBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/ingressPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/servicePerimeter", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/servicePerimeterResource", _module);
pulumi.runtime.registerResourceModule("gcp", "accesscontextmanager/servicePerimeters", _module);
//# sourceMappingURL=index.js.map