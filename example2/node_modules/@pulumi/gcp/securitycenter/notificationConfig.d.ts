import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * A Cloud Security Command Center (Cloud SCC) notification configs. A
 * notification config is a Cloud SCC resource that contains the
 * configuration to send notifications for create/update events of
 * findings, assets and etc.
 * > **Note:** In order to use Cloud SCC resources, your organization must be enrolled
 * in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
 * Without doing so, you may run into errors during resource creation.
 *
 * To get more information about NotificationConfig, see:
 *
 * * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.notificationConfigs)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/security-command-center/docs)
 *
 * ## Example Usage
 * ### Scc Notification Config Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const sccNotification = new gcp.pubsub.Topic("sccNotification", {});
 * const customNotificationConfig = new gcp.securitycenter.NotificationConfig("customNotificationConfig", {
 *     configId: "my-config",
 *     organization: "123456789",
 *     description: "My custom Cloud Security Command Center Finding Notification Configuration",
 *     pubsubTopic: sccNotification.id,
 *     streamingConfig: {
 *         filter: "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * NotificationConfig can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:securitycenter/notificationConfig:NotificationConfig default organizations/{{organization}}/notificationConfigs/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:securitycenter/notificationConfig:NotificationConfig default {{organization}}/{{name}}
 * ```
 */
export declare class NotificationConfig extends pulumi.CustomResource {
    /**
     * Get an existing NotificationConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationConfigState, opts?: pulumi.CustomResourceOptions): NotificationConfig;
    /**
     * Returns true if the given object is an instance of NotificationConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is NotificationConfig;
    /**
     * This must be unique within the organization.
     */
    readonly configId: pulumi.Output<string>;
    /**
     * The description of the notification config (max of 1024 characters).
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The resource name of this notification config, in the format
     * `organizations/{{organization}}/notificationConfigs/{{config_id}}`.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The organization whose Cloud Security Command Center the Notification
     * Config lives in.
     */
    readonly organization: pulumi.Output<string>;
    /**
     * The Pub/Sub topic to send notifications to. Its format is
     * "projects/[projectId]/topics/[topic]".
     */
    readonly pubsubTopic: pulumi.Output<string>;
    /**
     * The service account that needs "pubsub.topics.publish" permission to
     * publish to the Pub/Sub topic.
     */
    readonly serviceAccount: pulumi.Output<string>;
    /**
     * The config for triggering streaming-based notifications.
     * Structure is documented below.
     */
    readonly streamingConfig: pulumi.Output<outputs.securitycenter.NotificationConfigStreamingConfig>;
    /**
     * Create a NotificationConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationConfigArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering NotificationConfig resources.
 */
export interface NotificationConfigState {
    /**
     * This must be unique within the organization.
     */
    configId?: pulumi.Input<string>;
    /**
     * The description of the notification config (max of 1024 characters).
     */
    description?: pulumi.Input<string>;
    /**
     * The resource name of this notification config, in the format
     * `organizations/{{organization}}/notificationConfigs/{{config_id}}`.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization whose Cloud Security Command Center the Notification
     * Config lives in.
     */
    organization?: pulumi.Input<string>;
    /**
     * The Pub/Sub topic to send notifications to. Its format is
     * "projects/[projectId]/topics/[topic]".
     */
    pubsubTopic?: pulumi.Input<string>;
    /**
     * The service account that needs "pubsub.topics.publish" permission to
     * publish to the Pub/Sub topic.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * The config for triggering streaming-based notifications.
     * Structure is documented below.
     */
    streamingConfig?: pulumi.Input<inputs.securitycenter.NotificationConfigStreamingConfig>;
}
/**
 * The set of arguments for constructing a NotificationConfig resource.
 */
export interface NotificationConfigArgs {
    /**
     * This must be unique within the organization.
     */
    configId: pulumi.Input<string>;
    /**
     * The description of the notification config (max of 1024 characters).
     */
    description?: pulumi.Input<string>;
    /**
     * The organization whose Cloud Security Command Center the Notification
     * Config lives in.
     */
    organization: pulumi.Input<string>;
    /**
     * The Pub/Sub topic to send notifications to. Its format is
     * "projects/[projectId]/topics/[topic]".
     */
    pubsubTopic: pulumi.Input<string>;
    /**
     * The config for triggering streaming-based notifications.
     * Structure is documented below.
     */
    streamingConfig: pulumi.Input<inputs.securitycenter.NotificationConfigStreamingConfig>;
}
