"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretVersion = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A secret version resource.
 *
 * > **Warning:** All arguments including `payload.secret_data` will be stored in the raw
 * state as plain-text.
 *
 * ## Example Usage
 * ### Secret Version Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const secret_basic = new gcp.secretmanager.Secret("secret-basic", {
 *     secretId: "secret-version",
 *     labels: {
 *         label: "my-label",
 *     },
 *     replication: {
 *         automatic: true,
 *     },
 * });
 * const secret_version_basic = new gcp.secretmanager.SecretVersion("secret-version-basic", {
 *     secret: secret_basic.id,
 *     secretData: "secret-data",
 * });
 * ```
 *
 * ## Import
 *
 * SecretVersion can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:secretmanager/secretVersion:SecretVersion default projects/{{project}}/secrets/{{secret_id}}/versions/{{version}}
 * ```
 */
class SecretVersion extends pulumi.CustomResource {
    /**
     * Get an existing SecretVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SecretVersion(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SecretVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretVersion.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["destroyTime"] = state ? state.destroyTime : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["secretData"] = state ? state.secretData : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.secret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secret'");
            }
            if ((!args || args.secretData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretData'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["secret"] = args ? args.secret : undefined;
            resourceInputs["secretData"] = (args === null || args === void 0 ? void 0 : args.secretData) ? pulumi.secret(args.secretData) : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["destroyTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretData"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SecretVersion.__pulumiType, name, resourceInputs, opts);
    }
}
exports.SecretVersion = SecretVersion;
/** @internal */
SecretVersion.__pulumiType = 'gcp:secretmanager/secretVersion:SecretVersion';
//# sourceMappingURL=secretVersion.js.map