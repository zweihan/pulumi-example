"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetastoreFederation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 * ### Dataproc Metastore Federation Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultMetastoreService = new gcp.dataproc.MetastoreService("defaultMetastoreService", {
 *     serviceId: "",
 *     location: "us-central1",
 *     tier: "DEVELOPER",
 *     hiveMetastoreConfig: {
 *         version: "3.1.2",
 *         endpointProtocol: "GRPC",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const defaultMetastoreFederation = new gcp.dataproc.MetastoreFederation("defaultMetastoreFederation", {
 *     location: "us-central1",
 *     federationId: "",
 *     version: "3.1.2",
 *     backendMetastores: [{
 *         rank: "1",
 *         name: defaultMetastoreService.id,
 *         metastoreType: "DATAPROC_METASTORE",
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Dataproc Metastore Federation Bigquery
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultMetastoreService = new gcp.dataproc.MetastoreService("defaultMetastoreService", {
 *     serviceId: "",
 *     location: "us-central1",
 *     tier: "DEVELOPER",
 *     hiveMetastoreConfig: {
 *         version: "3.1.2",
 *         endpointProtocol: "GRPC",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const project = gcp.organizations.getProject({});
 * const defaultMetastoreFederation = new gcp.dataproc.MetastoreFederation("defaultMetastoreFederation", {
 *     location: "us-central1",
 *     federationId: "",
 *     version: "3.1.2",
 *     backendMetastores: [
 *         {
 *             rank: "2",
 *             name: project.then(project => project.id),
 *             metastoreType: "BIGQUERY",
 *         },
 *         {
 *             rank: "1",
 *             name: defaultMetastoreService.id,
 *             metastoreType: "DATAPROC_METASTORE",
 *         },
 *     ],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * Federation can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:dataproc/metastoreFederation:MetastoreFederation default projects/{{project}}/locations/{{location}}/federations/{{federation_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:dataproc/metastoreFederation:MetastoreFederation default {{project}}/{{location}}/{{federation_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:dataproc/metastoreFederation:MetastoreFederation default {{location}}/{{federation_id}}
 * ```
 */
class MetastoreFederation extends pulumi.CustomResource {
    /**
     * Get an existing MetastoreFederation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MetastoreFederation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MetastoreFederation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetastoreFederation.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["backendMetastores"] = state ? state.backendMetastores : undefined;
            resourceInputs["endpointUri"] = state ? state.endpointUri : undefined;
            resourceInputs["federationId"] = state ? state.federationId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateMessage"] = state ? state.stateMessage : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.backendMetastores === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendMetastores'");
            }
            if ((!args || args.federationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'federationId'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["backendMetastores"] = args ? args.backendMetastores : undefined;
            resourceInputs["federationId"] = args ? args.federationId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["endpointUri"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateMessage"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetastoreFederation.__pulumiType, name, resourceInputs, opts);
    }
}
exports.MetastoreFederation = MetastoreFederation;
/** @internal */
MetastoreFederation.__pulumiType = 'gcp:dataproc/metastoreFederation:MetastoreFederation';
//# sourceMappingURL=metastoreFederation.js.map