"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoscalingPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Describes an autoscaling policy for Dataproc cluster autoscaler.
 *
 * ## Example Usage
 * ### Dataproc Autoscaling Policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const asp = new gcp.dataproc.AutoscalingPolicy("asp", {
 *     policyId: "dataproc-policy",
 *     location: "us-central1",
 *     workerConfig: {
 *         maxInstances: 3,
 *     },
 *     basicAlgorithm: {
 *         yarnConfig: {
 *             gracefulDecommissionTimeout: "30s",
 *             scaleUpFactor: 0.5,
 *             scaleDownFactor: 0.5,
 *         },
 *     },
 * });
 * const basic = new gcp.dataproc.Cluster("basic", {
 *     region: "us-central1",
 *     clusterConfig: {
 *         autoscalingConfig: {
 *             policyUri: asp.name,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * AutoscalingPolicy can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:dataproc/autoscalingPolicy:AutoscalingPolicy default projects/{{project}}/locations/{{location}}/autoscalingPolicies/{{policy_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:dataproc/autoscalingPolicy:AutoscalingPolicy default {{project}}/{{location}}/{{policy_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:dataproc/autoscalingPolicy:AutoscalingPolicy default {{location}}/{{policy_id}}
 * ```
 */
class AutoscalingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AutoscalingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AutoscalingPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AutoscalingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoscalingPolicy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["basicAlgorithm"] = state ? state.basicAlgorithm : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["secondaryWorkerConfig"] = state ? state.secondaryWorkerConfig : undefined;
            resourceInputs["workerConfig"] = state ? state.workerConfig : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["basicAlgorithm"] = args ? args.basicAlgorithm : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["secondaryWorkerConfig"] = args ? args.secondaryWorkerConfig : undefined;
            resourceInputs["workerConfig"] = args ? args.workerConfig : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoscalingPolicy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.AutoscalingPolicy = AutoscalingPolicy;
/** @internal */
AutoscalingPolicy.__pulumiType = 'gcp:dataproc/autoscalingPolicy:AutoscalingPolicy';
//# sourceMappingURL=autoscalingPolicy.js.map