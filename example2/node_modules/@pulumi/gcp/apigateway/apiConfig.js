"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * An API Configuration is an association of an API Controller Config and a Gateway Config
 *
 * To get more information about ApiConfig, see:
 *
 * * [API documentation](https://cloud.google.com/api-gateway/docs/reference/rest/v1beta/projects.locations.apis.configs)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/api-gateway/docs/creating-api-config)
 *
 * ## Example Usage
 * ### Apigateway Api Config Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as gcp from "@pulumi/gcp";
 *
 * const apiCfgApi = new gcp.apigateway.Api("apiCfgApi", {apiId: "my-api"}, {
 *     provider: google_beta,
 * });
 * const apiCfgApiConfig = new gcp.apigateway.ApiConfig("apiCfgApiConfig", {
 *     api: apiCfgApi.apiId,
 *     apiConfigId: "my-config",
 *     openapiDocuments: [{
 *         document: {
 *             path: "spec.yaml",
 *             contents: Buffer.from(fs.readFileSync("test-fixtures/apigateway/openapi.yaml"), 'binary').toString('base64'),
 *         },
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * ApiConfig can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:apigateway/apiConfig:ApiConfig default projects/{{project}}/locations/global/apis/{{api}}/configs/{{api_config_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:apigateway/apiConfig:ApiConfig default {{project}}/{{api}}/{{api_config_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:apigateway/apiConfig:ApiConfig default {{api}}/{{api_config_id}}
 * ```
 */
class ApiConfig extends pulumi.CustomResource {
    /**
     * Get an existing ApiConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ApiConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ApiConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiConfig.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["api"] = state ? state.api : undefined;
            resourceInputs["apiConfigId"] = state ? state.apiConfigId : undefined;
            resourceInputs["apiConfigIdPrefix"] = state ? state.apiConfigIdPrefix : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["gatewayConfig"] = state ? state.gatewayConfig : undefined;
            resourceInputs["grpcServices"] = state ? state.grpcServices : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["managedServiceConfigs"] = state ? state.managedServiceConfigs : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openapiDocuments"] = state ? state.openapiDocuments : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceConfigId"] = state ? state.serviceConfigId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.api === undefined) && !opts.urn) {
                throw new Error("Missing required property 'api'");
            }
            resourceInputs["api"] = args ? args.api : undefined;
            resourceInputs["apiConfigId"] = args ? args.apiConfigId : undefined;
            resourceInputs["apiConfigIdPrefix"] = args ? args.apiConfigIdPrefix : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["gatewayConfig"] = args ? args.gatewayConfig : undefined;
            resourceInputs["grpcServices"] = args ? args.grpcServices : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["managedServiceConfigs"] = args ? args.managedServiceConfigs : undefined;
            resourceInputs["openapiDocuments"] = args ? args.openapiDocuments : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["serviceConfigId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiConfig.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ApiConfig = ApiConfig;
/** @internal */
ApiConfig.__pulumiType = 'gcp:apigateway/apiConfig:ApiConfig';
//# sourceMappingURL=apiConfig.js.map