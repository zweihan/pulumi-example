"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GCPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates a Google Cloud Bigtable GC Policy inside a family. For more information see
 * [the official documentation](https://cloud.google.com/bigtable/) and
 * [API](https://cloud.google.com/bigtable/docs/go/reference).
 *
 * > **Warning**: We don't recommend having multiple GC policies for the same column
 * family as it may result in unexpected behavior.
 *
 * > **Note**: GC policies associated with a replicated table cannot be destroyed directly.
 * Destroying a GC policy is translated into never perform garbage collection, this is
 * considered relaxing from pure age-based or version-based GC policy, hence not allowed.
 * The workaround is unreplicating the instance first by updating the instance to have one
 * cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const instance = new gcp.bigtable.Instance("instance", {clusters: [{
 *     clusterId: "tf-instance-cluster",
 *     numNodes: 3,
 *     storageType: "HDD",
 * }]});
 * const table = new gcp.bigtable.Table("table", {
 *     instanceName: instance.name,
 *     columnFamilies: [{
 *         family: "name",
 *     }],
 * });
 * const policy = new gcp.bigtable.GCPolicy("policy", {
 *     instanceName: instance.name,
 *     table: table.name,
 *     columnFamily: "name",
 *     deletionPolicy: "ABANDON",
 *     gcRules: `  {
 *     "rules": [
 *       {
 *         "max_age": "168h"
 *       }
 *     ]
 *   }
 * `,
 * });
 * ```
 *
 * Multiple conditions is also supported. `UNION` when any of its sub-policies apply (OR). `INTERSECTION` when all its sub-policies apply (AND)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const policy = new gcp.bigtable.GCPolicy("policy", {
 *     instanceName: google_bigtable_instance.instance.name,
 *     table: google_bigtable_table.table.name,
 *     columnFamily: "name",
 *     deletionPolicy: "ABANDON",
 *     gcRules: `  {
 *     "mode": "union",
 *     "rules": [
 *       {
 *         "max_age": "168h"
 *       },
 *       {
 *         "max_version": 10
 *       }
 *     ]
 *   }
 * `,
 * });
 * ```
 *
 * An example of more complex GC policy:
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const instance = new gcp.bigtable.Instance("instance", {
 *     clusters: [{
 *         clusterId: "cid",
 *         zone: "us-central1-b",
 *     }],
 *     instanceType: "DEVELOPMENT",
 *     deletionProtection: false,
 * });
 * const table = new gcp.bigtable.Table("table", {
 *     instanceName: instance.id,
 *     columnFamilies: [{
 *         family: "cf1",
 *     }],
 * });
 * const policy = new gcp.bigtable.GCPolicy("policy", {
 *     instanceName: instance.id,
 *     table: table.name,
 *     columnFamily: "cf1",
 *     deletionPolicy: "ABANDON",
 *     gcRules: `  {
 *     "mode": "union",
 *     "rules": [
 *       {
 *         "max_age": "10h"
 *       },
 *       {
 *         "mode": "intersection",
 *         "rules": [
 *           {
 *             "max_age": "2h"
 *           },
 *           {
 *             "max_version": 2
 *           }
 *         ]
 *       }
 *     ]
 *   }
 * `,
 * });
 * ```
 * This is equivalent to running the following `cbt` command:
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ## Import
 *
 * This resource does not support import.
 */
class GCPolicy extends pulumi.CustomResource {
    /**
     * Get an existing GCPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GCPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GCPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GCPolicy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["columnFamily"] = state ? state.columnFamily : undefined;
            resourceInputs["deletionPolicy"] = state ? state.deletionPolicy : undefined;
            resourceInputs["gcRules"] = state ? state.gcRules : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["maxAge"] = state ? state.maxAge : undefined;
            resourceInputs["maxVersions"] = state ? state.maxVersions : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["table"] = state ? state.table : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.columnFamily === undefined) && !opts.urn) {
                throw new Error("Missing required property 'columnFamily'");
            }
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            if ((!args || args.table === undefined) && !opts.urn) {
                throw new Error("Missing required property 'table'");
            }
            resourceInputs["columnFamily"] = args ? args.columnFamily : undefined;
            resourceInputs["deletionPolicy"] = args ? args.deletionPolicy : undefined;
            resourceInputs["gcRules"] = args ? args.gcRules : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["maxAge"] = args ? args.maxAge : undefined;
            resourceInputs["maxVersions"] = args ? args.maxVersions : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["table"] = args ? args.table : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GCPolicy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.GCPolicy = GCPolicy;
/** @internal */
GCPolicy.__pulumiType = 'gcp:bigtable/gCPolicy:GCPolicy';
//# sourceMappingURL=gcpolicy.js.map