"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CapacityCommitment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Capacity commitment is a way to purchase compute capacity for BigQuery jobs (in the form of slots) with some committed period of usage. Annual commitments renew by default. Commitments can be removed after their commitment end time passes.
 *
 * In order to remove annual commitment, its plan needs to be changed to monthly or flex first.
 *
 * To get more information about CapacityCommitment, see:
 *
 * * [API documentation](https://cloud.google.com/bigquery/docs/reference/reservations/rest/v1/projects.locations.capacityCommitments)
 * * How-to Guides
 *     * [Introduction to Reservations](https://cloud.google.com/bigquery/docs/reservations-intro)
 *
 * ## Example Usage
 * ### Bigquery Reservation Capacity Commitment Docs
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const example = new gcp.bigquery.CapacityCommitment("example", {
 *     capacityCommitmentId: "example-commitment",
 *     edition: "ENTERPRISE",
 *     location: "us-west2",
 *     plan: "FLEX_FLAT_RATE",
 *     slotCount: 100,
 * });
 * ```
 *
 * ## Import
 *
 * CapacityCommitment can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:bigquery/capacityCommitment:CapacityCommitment default projects/{{project}}/locations/{{location}}/capacityCommitments/{{capacity_commitment_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:bigquery/capacityCommitment:CapacityCommitment default {{project}}/{{location}}/{{capacity_commitment_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:bigquery/capacityCommitment:CapacityCommitment default {{location}}/{{capacity_commitment_id}}
 * ```
 */
class CapacityCommitment extends pulumi.CustomResource {
    /**
     * Get an existing CapacityCommitment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CapacityCommitment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CapacityCommitment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CapacityCommitment.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["capacityCommitmentId"] = state ? state.capacityCommitmentId : undefined;
            resourceInputs["commitmentEndTime"] = state ? state.commitmentEndTime : undefined;
            resourceInputs["commitmentStartTime"] = state ? state.commitmentStartTime : undefined;
            resourceInputs["edition"] = state ? state.edition : undefined;
            resourceInputs["enforceSingleAdminProjectPerOrg"] = state ? state.enforceSingleAdminProjectPerOrg : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["renewalPlan"] = state ? state.renewalPlan : undefined;
            resourceInputs["slotCount"] = state ? state.slotCount : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.slotCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slotCount'");
            }
            resourceInputs["capacityCommitmentId"] = args ? args.capacityCommitmentId : undefined;
            resourceInputs["edition"] = args ? args.edition : undefined;
            resourceInputs["enforceSingleAdminProjectPerOrg"] = args ? args.enforceSingleAdminProjectPerOrg : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["renewalPlan"] = args ? args.renewalPlan : undefined;
            resourceInputs["slotCount"] = args ? args.slotCount : undefined;
            resourceInputs["commitmentEndTime"] = undefined /*out*/;
            resourceInputs["commitmentStartTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CapacityCommitment.__pulumiType, name, resourceInputs, opts);
    }
}
exports.CapacityCommitment = CapacityCommitment;
/** @internal */
CapacityCommitment.__pulumiType = 'gcp:bigquery/capacityCommitment:CapacityCommitment';
//# sourceMappingURL=capacityCommitment.js.map