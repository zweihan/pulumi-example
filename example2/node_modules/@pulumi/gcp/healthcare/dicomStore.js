"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DicomStore = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A DicomStore is a datastore inside a Healthcare dataset that conforms to the DICOM
 * (https://www.dicomstandard.org/about/) standard for Healthcare information exchange
 *
 * To get more information about DicomStore, see:
 *
 * * [API documentation](https://cloud.google.com/healthcare/docs/reference/rest/v1/projects.locations.datasets.dicomStores)
 * * How-to Guides
 *     * [Creating a DICOM store](https://cloud.google.com/healthcare/docs/how-tos/dicom)
 *
 * ## Example Usage
 * ### Healthcare Dicom Store Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const topic = new gcp.pubsub.Topic("topic", {});
 * const dataset = new gcp.healthcare.Dataset("dataset", {location: "us-central1"});
 * const _default = new gcp.healthcare.DicomStore("default", {
 *     dataset: dataset.id,
 *     notificationConfig: {
 *         pubsubTopic: topic.id,
 *     },
 *     labels: {
 *         label1: "labelvalue1",
 *     },
 * });
 * ```
 * ### Healthcare Dicom Store Bq Stream
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const topic = new gcp.pubsub.Topic("topic", {}, {
 *     provider: google_beta,
 * });
 * const dataset = new gcp.healthcare.Dataset("dataset", {location: "us-central1"}, {
 *     provider: google_beta,
 * });
 * const bqDataset = new gcp.bigquery.Dataset("bqDataset", {
 *     datasetId: "dicom_bq_ds",
 *     friendlyName: "test",
 *     description: "This is a test description",
 *     location: "US",
 *     deleteContentsOnDestroy: true,
 * }, {
 *     provider: google_beta,
 * });
 * const bqTable = new gcp.bigquery.Table("bqTable", {
 *     deletionProtection: false,
 *     datasetId: bqDataset.datasetId,
 *     tableId: "dicom_bq_tb",
 * }, {
 *     provider: google_beta,
 * });
 * const _default = new gcp.healthcare.DicomStore("default", {
 *     dataset: dataset.id,
 *     notificationConfig: {
 *         pubsubTopic: topic.id,
 *     },
 *     labels: {
 *         label1: "labelvalue1",
 *     },
 *     streamConfigs: [{
 *         bigqueryDestination: {
 *             tableUri: pulumi.interpolate`bq://${bqDataset.project}.${bqDataset.datasetId}.${bqTable.tableId}`,
 *         },
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * DicomStore can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:healthcare/dicomStore:DicomStore default {{dataset}}/dicomStores/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:healthcare/dicomStore:DicomStore default {{dataset}}/{{name}}
 * ```
 */
class DicomStore extends pulumi.CustomResource {
    /**
     * Get an existing DicomStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DicomStore(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DicomStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DicomStore.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["dataset"] = state ? state.dataset : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationConfig"] = state ? state.notificationConfig : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["streamConfigs"] = state ? state.streamConfigs : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.dataset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataset'");
            }
            resourceInputs["dataset"] = args ? args.dataset : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationConfig"] = args ? args.notificationConfig : undefined;
            resourceInputs["streamConfigs"] = args ? args.streamConfigs : undefined;
            resourceInputs["selfLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DicomStore.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DicomStore = DicomStore;
/** @internal */
DicomStore.__pulumiType = 'gcp:healthcare/dicomStore:DicomStore';
//# sourceMappingURL=dicomStore.js.map