"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsentStore = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The Consent Management API is a tool for tracking user consents and the documentation associated with the consents.
 *
 * To get more information about ConsentStore, see:
 *
 * * [API documentation](https://cloud.google.com/healthcare/docs/reference/rest/v1/projects.locations.datasets.consentStores)
 * * How-to Guides
 *     * [Creating a Consent store](https://cloud.google.com/healthcare/docs/how-tos/consent)
 *
 * ## Example Usage
 * ### Healthcare Consent Store Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const dataset = new gcp.healthcare.Dataset("dataset", {location: "us-central1"});
 * const my_consent = new gcp.healthcare.ConsentStore("my-consent", {dataset: dataset.id});
 * ```
 * ### Healthcare Consent Store Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const dataset = new gcp.healthcare.Dataset("dataset", {location: "us-central1"});
 * const my_consent = new gcp.healthcare.ConsentStore("my-consent", {
 *     dataset: dataset.id,
 *     enableConsentCreateOnUpdate: true,
 *     defaultConsentTtl: "90000s",
 *     labels: {
 *         label1: "labelvalue1",
 *     },
 * });
 * ```
 * ### Healthcare Consent Store Iam
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const dataset = new gcp.healthcare.Dataset("dataset", {location: "us-central1"});
 * const my_consent = new gcp.healthcare.ConsentStore("my-consent", {dataset: dataset.id});
 * const test_account = new gcp.serviceaccount.Account("test-account", {
 *     accountId: "my-account",
 *     displayName: "Test Service Account",
 * });
 * const test_iam = new gcp.healthcare.ConsentStoreIamMember("test-iam", {
 *     dataset: dataset.id,
 *     consentStoreId: my_consent.name,
 *     role: "roles/editor",
 *     member: pulumi.interpolate`serviceAccount:${test_account.email}`,
 * });
 * ```
 *
 * ## Import
 *
 * ConsentStore can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:healthcare/consentStore:ConsentStore default {{dataset}}/consentStores/{{name}}
 * ```
 */
class ConsentStore extends pulumi.CustomResource {
    /**
     * Get an existing ConsentStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ConsentStore(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ConsentStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConsentStore.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["dataset"] = state ? state.dataset : undefined;
            resourceInputs["defaultConsentTtl"] = state ? state.defaultConsentTtl : undefined;
            resourceInputs["enableConsentCreateOnUpdate"] = state ? state.enableConsentCreateOnUpdate : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.dataset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataset'");
            }
            resourceInputs["dataset"] = args ? args.dataset : undefined;
            resourceInputs["defaultConsentTtl"] = args ? args.defaultConsentTtl : undefined;
            resourceInputs["enableConsentCreateOnUpdate"] = args ? args.enableConsentCreateOnUpdate : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConsentStore.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ConsentStore = ConsentStore;
/** @internal */
ConsentStore.__pulumiType = 'gcp:healthcare/consentStore:ConsentStore';
//# sourceMappingURL=consentStore.js.map