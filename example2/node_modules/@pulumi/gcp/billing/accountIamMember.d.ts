import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Three different resources help you manage IAM policies on billing accounts. Each of these resources serves a different use case:
 *
 * * `gcp.billing.AccountIamPolicy`: Authoritative. Sets the IAM policy for the billing accounts and replaces any existing policy already attached.
 * * `gcp.billing.AccountIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the table are preserved.
 * * `gcp.billing.AccountIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role of the billing accounts are preserved.
 *
 * > **Note:** `gcp.billing.AccountIamPolicy` **cannot** be used in conjunction with `gcp.billing.AccountIamBinding` and `gcp.billing.AccountIamMember` or they will fight over what your policy should be. In addition, be careful not to accidentally unset ownership of the billing account as `gcp.billing.AccountIamPolicy` replaces the entire policy.
 *
 * > **Note:** `gcp.billing.AccountIamBinding` resources **can be** used in conjunction with `gcp.billing.AccountIamMember` resources **only if** they do not grant privilege to the same role.
 *
 * ## google\_billing\_account\_iam\_policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const admin = gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         role: "roles/billing.viewer",
 *         members: ["user:jane@example.com"],
 *     }],
 * });
 * const editor = new gcp.billing.AccountIamPolicy("editor", {
 *     billingAccountId: "00AA00-000AAA-00AA0A",
 *     policyData: admin.then(admin => admin.policyData),
 * });
 * ```
 *
 * ## google\_billing\_account\_iam\_binding
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const editor = new gcp.billing.AccountIamBinding("editor", {
 *     billingAccountId: "00AA00-000AAA-00AA0A",
 *     members: ["user:jane@example.com"],
 *     role: "roles/billing.viewer",
 * });
 * ```
 *
 * ## google\_billing\_account\_iam\_member
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const editor = new gcp.billing.AccountIamMember("editor", {
 *     billingAccountId: "00AA00-000AAA-00AA0A",
 *     member: "user:jane@example.com",
 *     role: "roles/billing.viewer",
 * });
 * ```
 *
 * ## Import
 *
 * Instance IAM resources can be imported using the project, table name, role and/or member.
 *
 * ```sh
 *  $ pulumi import gcp:billing/accountIamMember:AccountIamMember binding "your-billing-account-id"
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:billing/accountIamMember:AccountIamMember binding "your-billing-account-id roles/billing.user"
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:billing/accountIamMember:AccountIamMember binding "your-billing-account-id roles/billing.user user:jane@example.com"
 * ```
 *
 *  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
 *
 * full name of the custom role, e.g. `organizations/my-org-id/roles/my-custom-role`.
 */
export declare class AccountIamMember extends pulumi.CustomResource {
    /**
     * Get an existing AccountIamMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountIamMemberState, opts?: pulumi.CustomResourceOptions): AccountIamMember;
    /**
     * Returns true if the given object is an instance of AccountIamMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is AccountIamMember;
    /**
     * The billing account id.
     */
    readonly billingAccountId: pulumi.Output<string>;
    readonly condition: pulumi.Output<outputs.billing.AccountIamMemberCondition | undefined>;
    /**
     * (Computed) The etag of the billing account's IAM policy.
     */
    readonly etag: pulumi.Output<string>;
    readonly member: pulumi.Output<string>;
    /**
     * The role that should be applied. Only one
     * `gcp.billing.AccountIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`. Read more about roles [here](https://cloud.google.com/bigtable/docs/access-control#roles).
     */
    readonly role: pulumi.Output<string>;
    /**
     * Create a AccountIamMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountIamMemberArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering AccountIamMember resources.
 */
export interface AccountIamMemberState {
    /**
     * The billing account id.
     */
    billingAccountId?: pulumi.Input<string>;
    condition?: pulumi.Input<inputs.billing.AccountIamMemberCondition>;
    /**
     * (Computed) The etag of the billing account's IAM policy.
     */
    etag?: pulumi.Input<string>;
    member?: pulumi.Input<string>;
    /**
     * The role that should be applied. Only one
     * `gcp.billing.AccountIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`. Read more about roles [here](https://cloud.google.com/bigtable/docs/access-control#roles).
     */
    role?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a AccountIamMember resource.
 */
export interface AccountIamMemberArgs {
    /**
     * The billing account id.
     */
    billingAccountId: pulumi.Input<string>;
    condition?: pulumi.Input<inputs.billing.AccountIamMemberCondition>;
    member: pulumi.Input<string>;
    /**
     * The role that should be applied. Only one
     * `gcp.billing.AccountIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`. Read more about roles [here](https://cloud.google.com/bigtable/docs/access-control#roles).
     */
    role: pulumi.Input<string>;
}
