"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Membership = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Membership contains information about a member cluster.
 *
 * To get more information about Membership, see:
 *
 * * [API documentation](https://cloud.google.com/anthos/multicluster-management/reference/rest/v1/projects.locations.memberships)
 * * How-to Guides
 *     * [Registering a Cluster](https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster#register_cluster)
 *
 * ## Example Usage
 * ### Gkehub Membership Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.container.Cluster("primary", {
 *     initialNodeCount: 1,
 *     location: "us-central1-a",
 * });
 * const membership = new gcp.gkehub.Membership("membership", {
 *     endpoint: {
 *         gkeCluster: {
 *             resourceLink: pulumi.interpolate`//container.googleapis.com/${primary.id}`,
 *         },
 *     },
 *     membershipId: "basic",
 * });
 * ```
 * ### Gkehub Membership Issuer
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.container.Cluster("primary", {
 *     location: "us-central1-a",
 *     initialNodeCount: 1,
 *     workloadIdentityConfig: {
 *         workloadPool: "my-project-name.svc.id.goog",
 *     },
 * });
 * const membership = new gcp.gkehub.Membership("membership", {
 *     membershipId: "basic",
 *     endpoint: {
 *         gkeCluster: {
 *             resourceLink: primary.id,
 *         },
 *     },
 *     authority: {
 *         issuer: pulumi.interpolate`https://container.googleapis.com/v1/${primary.id}`,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Membership can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:gkehub/membership:Membership default projects/{{project}}/locations/global/memberships/{{membership_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gkehub/membership:Membership default {{project}}/{{membership_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gkehub/membership:Membership default {{membership_id}}
 * ```
 */
class Membership extends pulumi.CustomResource {
    /**
     * Get an existing Membership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Membership(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Membership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Membership.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authority"] = state ? state.authority : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["membershipId"] = state ? state.membershipId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.membershipId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'membershipId'");
            }
            resourceInputs["authority"] = args ? args.authority : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["membershipId"] = args ? args.membershipId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Membership.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Membership = Membership;
/** @internal */
Membership.__pulumiType = 'gcp:gkehub/membership:Membership';
//# sourceMappingURL=membership.js.map