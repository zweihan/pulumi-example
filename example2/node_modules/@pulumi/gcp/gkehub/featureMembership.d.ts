import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * ## Example Usage
 * ### Config Management
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const cluster = new gcp.container.Cluster("cluster", {
 *     location: "us-central1-a",
 *     initialNodeCount: 1,
 * }, {
 *     provider: google_beta,
 * });
 * const membership = new gcp.gkehub.Membership("membership", {
 *     membershipId: "my-membership",
 *     endpoint: {
 *         gkeCluster: {
 *             resourceLink: pulumi.interpolate`//container.googleapis.com/${cluster.id}`,
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const feature = new gcp.gkehub.Feature("feature", {
 *     location: "global",
 *     labels: {
 *         foo: "bar",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const featureMember = new gcp.gkehub.FeatureMembership("featureMember", {
 *     location: "global",
 *     feature: feature.name,
 *     membership: membership.membershipId,
 *     configmanagement: {
 *         version: "1.6.2",
 *         configSync: {
 *             git: {
 *                 syncRepo: "https://github.com/hashicorp/terraform",
 *             },
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Config Management With OCI
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const cluster = new gcp.container.Cluster("cluster", {
 *     location: "us-central1-a",
 *     initialNodeCount: 1,
 * }, {
 *     provider: google_beta,
 * });
 * const membership = new gcp.gkehub.Membership("membership", {
 *     membershipId: "my-membership",
 *     endpoint: {
 *         gkeCluster: {
 *             resourceLink: pulumi.interpolate`//container.googleapis.com/${cluster.id}`,
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const feature = new gcp.gkehub.Feature("feature", {
 *     location: "global",
 *     labels: {
 *         foo: "bar",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const featureMember = new gcp.gkehub.FeatureMembership("featureMember", {
 *     location: "global",
 *     feature: feature.name,
 *     membership: membership.membershipId,
 *     configmanagement: {
 *         version: "1.12.0",
 *         configSync: {
 *             oci: {
 *                 syncRepo: "us-central1-docker.pkg.dev/sample-project/config-repo/config-sync-gke:latest",
 *                 policyDir: "config-connector",
 *                 syncWaitSecs: "20",
 *                 secretType: "gcpserviceaccount",
 *                 gcpServiceAccountEmail: "sa@project-id.iam.gserviceaccount.com",
 *             },
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Multi Cluster Service Discovery
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const feature = new gcp.gkehub.Feature("feature", {
 *     location: "global",
 *     labels: {
 *         foo: "bar",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Service Mesh
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const cluster = new gcp.container.Cluster("cluster", {
 *     location: "us-central1-a",
 *     initialNodeCount: 1,
 * }, {
 *     provider: google_beta,
 * });
 * const membership = new gcp.gkehub.Membership("membership", {
 *     membershipId: "my-membership",
 *     endpoint: {
 *         gkeCluster: {
 *             resourceLink: pulumi.interpolate`//container.googleapis.com/${cluster.id}`,
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const feature = new gcp.gkehub.Feature("feature", {location: "global"}, {
 *     provider: google_beta,
 * });
 * const featureMember = new gcp.gkehub.FeatureMembership("featureMember", {
 *     location: "global",
 *     feature: feature.name,
 *     membership: membership.membershipId,
 *     mesh: {
 *         management: "MANAGEMENT_AUTOMATIC",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * FeatureMembership can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default projects/{{project}}/locations/{{location}}/features/{{feature}}/membershipId/{{membership}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default {{project}}/{{location}}/{{feature}}/{{membership}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:gkehub/featureMembership:FeatureMembership default {{location}}/{{feature}}/{{membership}}
 * ```
 */
export declare class FeatureMembership extends pulumi.CustomResource {
    /**
     * Get an existing FeatureMembership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FeatureMembershipState, opts?: pulumi.CustomResourceOptions): FeatureMembership;
    /**
     * Returns true if the given object is an instance of FeatureMembership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is FeatureMembership;
    /**
     * Config Management-specific spec. Structure is documented below.
     */
    readonly configmanagement: pulumi.Output<outputs.gkehub.FeatureMembershipConfigmanagement | undefined>;
    /**
     * The name of the feature
     */
    readonly feature: pulumi.Output<string>;
    /**
     * The location of the feature
     */
    readonly location: pulumi.Output<string>;
    /**
     * The name of the membership
     */
    readonly membership: pulumi.Output<string>;
    /**
     * Service mesh specific spec. Structure is documented below.
     */
    readonly mesh: pulumi.Output<outputs.gkehub.FeatureMembershipMesh | undefined>;
    /**
     * The project of the feature
     */
    readonly project: pulumi.Output<string>;
    /**
     * Create a FeatureMembership resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FeatureMembershipArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering FeatureMembership resources.
 */
export interface FeatureMembershipState {
    /**
     * Config Management-specific spec. Structure is documented below.
     */
    configmanagement?: pulumi.Input<inputs.gkehub.FeatureMembershipConfigmanagement>;
    /**
     * The name of the feature
     */
    feature?: pulumi.Input<string>;
    /**
     * The location of the feature
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the membership
     */
    membership?: pulumi.Input<string>;
    /**
     * Service mesh specific spec. Structure is documented below.
     */
    mesh?: pulumi.Input<inputs.gkehub.FeatureMembershipMesh>;
    /**
     * The project of the feature
     */
    project?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a FeatureMembership resource.
 */
export interface FeatureMembershipArgs {
    /**
     * Config Management-specific spec. Structure is documented below.
     */
    configmanagement?: pulumi.Input<inputs.gkehub.FeatureMembershipConfigmanagement>;
    /**
     * The name of the feature
     */
    feature: pulumi.Input<string>;
    /**
     * The location of the feature
     */
    location: pulumi.Input<string>;
    /**
     * The name of the membership
     */
    membership: pulumi.Input<string>;
    /**
     * Service mesh specific spec. Structure is documented below.
     */
    mesh?: pulumi.Input<inputs.gkehub.FeatureMembershipMesh>;
    /**
     * The project of the feature
     */
    project?: pulumi.Input<string>;
}
