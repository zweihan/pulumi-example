"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Workload = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The AssuredWorkloads Workload resource
 *
 * ## Example Usage
 * ### Basic_workload
 * A basic test of a assuredworkloads api
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.assuredworkloads.Workload("primary", {
 *     billingAccount: "billingAccounts/000000-0000000-0000000-000000",
 *     complianceRegime: "FEDRAMP_MODERATE",
 *     displayName: "Workload Example",
 *     kmsSettings: {
 *         nextRotationTime: "9999-10-02T15:01:23Z",
 *         rotationPeriod: "10368000s",
 *     },
 *     labels: {
 *         "label-one": "value-one",
 *     },
 *     location: "us-west1",
 *     organization: "123456789",
 *     provisionedResourcesParent: "folders/519620126891",
 *     resourceSettings: [
 *         {
 *             resourceType: "CONSUMER_PROJECT",
 *         },
 *         {
 *             resourceType: "ENCRYPTION_KEYS_PROJECT",
 *         },
 *         {
 *             resourceId: "ring",
 *             resourceType: "KEYRING",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Workload can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:assuredworkloads/workload:Workload default organizations/{{organization}}/locations/{{location}}/workloads/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:assuredworkloads/workload:Workload default {{organization}}/{{location}}/{{name}}
 * ```
 */
class Workload extends pulumi.CustomResource {
    /**
     * Get an existing Workload resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Workload(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Workload.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workload.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["billingAccount"] = state ? state.billingAccount : undefined;
            resourceInputs["complianceRegime"] = state ? state.complianceRegime : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["kmsSettings"] = state ? state.kmsSettings : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["provisionedResourcesParent"] = state ? state.provisionedResourcesParent : undefined;
            resourceInputs["resourceSettings"] = state ? state.resourceSettings : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.billingAccount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'billingAccount'");
            }
            if ((!args || args.complianceRegime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'complianceRegime'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            resourceInputs["billingAccount"] = args ? args.billingAccount : undefined;
            resourceInputs["complianceRegime"] = args ? args.complianceRegime : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["kmsSettings"] = args ? args.kmsSettings : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["provisionedResourcesParent"] = args ? args.provisionedResourcesParent : undefined;
            resourceInputs["resourceSettings"] = args ? args.resourceSettings : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["resources"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Workload.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Workload = Workload;
/** @internal */
Workload.__pulumiType = 'gcp:assuredworkloads/workload:Workload';
//# sourceMappingURL=workload.js.map