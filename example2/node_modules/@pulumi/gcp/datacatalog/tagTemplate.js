"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagTemplate = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A tag template defines a tag, which can have one or more typed fields.
 * The template is used to create and attach the tag to GCP resources.
 *
 * To get more information about TagTemplate, see:
 *
 * * [API documentation](https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.tagTemplates)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/data-catalog/docs)
 *
 * ## Example Usage
 * ### Data Catalog Tag Template Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basicTagTemplate = new gcp.datacatalog.TagTemplate("basicTagTemplate", {
 *     displayName: "Demo Tag Template",
 *     fields: [
 *         {
 *             displayName: "Source of data asset",
 *             fieldId: "source",
 *             isRequired: true,
 *             type: {
 *                 primitiveType: "STRING",
 *             },
 *         },
 *         {
 *             displayName: "Number of rows in the data asset",
 *             fieldId: "num_rows",
 *             type: {
 *                 primitiveType: "DOUBLE",
 *             },
 *         },
 *         {
 *             displayName: "PII type",
 *             fieldId: "pii_type",
 *             type: {
 *                 enumType: {
 *                     allowedValues: [
 *                         {
 *                             displayName: "EMAIL",
 *                         },
 *                         {
 *                             displayName: "SOCIAL SECURITY NUMBER",
 *                         },
 *                         {
 *                             displayName: "NONE",
 *                         },
 *                     ],
 *                 },
 *             },
 *         },
 *     ],
 *     forceDelete: false,
 *     region: "us-central1",
 *     tagTemplateId: "my_template",
 * });
 * ```
 *
 * ## Import
 *
 * TagTemplate can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:datacatalog/tagTemplate:TagTemplate default {{name}}
 * ```
 */
class TagTemplate extends pulumi.CustomResource {
    /**
     * Get an existing TagTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TagTemplate(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TagTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TagTemplate.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["fields"] = state ? state.fields : undefined;
            resourceInputs["forceDelete"] = state ? state.forceDelete : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["tagTemplateId"] = state ? state.tagTemplateId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.fields === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fields'");
            }
            if ((!args || args.tagTemplateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tagTemplateId'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["fields"] = args ? args.fields : undefined;
            resourceInputs["forceDelete"] = args ? args.forceDelete : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tagTemplateId"] = args ? args.tagTemplateId : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TagTemplate.__pulumiType, name, resourceInputs, opts);
    }
}
exports.TagTemplate = TagTemplate;
/** @internal */
TagTemplate.__pulumiType = 'gcp:datacatalog/tagTemplate:TagTemplate';
//# sourceMappingURL=tagTemplate.js.map