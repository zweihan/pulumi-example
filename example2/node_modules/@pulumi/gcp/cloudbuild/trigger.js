"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Trigger = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Configuration for an automated build in response to source repository changes.
 *
 * To get more information about Trigger, see:
 *
 * * [API documentation](https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.triggers)
 * * How-to Guides
 *     * [Automating builds using build triggers](https://cloud.google.com/cloud-build/docs/running-builds/automate-builds)
 *
 * > **Note:** You can retrieve the email of the Cloud Build Service Account used in jobs by using the `gcp.projects.ServiceIdentity` resource.
 *
 * ## Example Usage
 * ### Cloudbuild Trigger Filename
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const filename_trigger = new gcp.cloudbuild.Trigger("filename-trigger", {
 *     filename: "cloudbuild.yaml",
 *     location: "us-central1",
 *     substitutions: {
 *         _BAZ: "qux",
 *         _FOO: "bar",
 *     },
 *     triggerTemplate: {
 *         branchName: "main",
 *         repoName: "my-repo",
 *     },
 * });
 * ```
 * ### Cloudbuild Trigger Service Account
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const cloudbuildServiceAccount = new gcp.serviceaccount.Account("cloudbuildServiceAccount", {accountId: "cloud-sa"});
 * const actAs = new gcp.projects.IAMMember("actAs", {
 *     project: project.then(project => project.projectId),
 *     role: "roles/iam.serviceAccountUser",
 *     member: pulumi.interpolate`serviceAccount:${cloudbuildServiceAccount.email}`,
 * });
 * const logsWriter = new gcp.projects.IAMMember("logsWriter", {
 *     project: project.then(project => project.projectId),
 *     role: "roles/logging.logWriter",
 *     member: pulumi.interpolate`serviceAccount:${cloudbuildServiceAccount.email}`,
 * });
 * const service_account_trigger = new gcp.cloudbuild.Trigger("service-account-trigger", {
 *     triggerTemplate: {
 *         branchName: "main",
 *         repoName: "my-repo",
 *     },
 *     serviceAccount: cloudbuildServiceAccount.id,
 *     filename: "cloudbuild.yaml",
 * }, {
 *     dependsOn: [
 *         actAs,
 *         logsWriter,
 *     ],
 * });
 * ```
 * ### Cloudbuild Trigger Include Build Logs
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const include_build_logs_trigger = new gcp.cloudbuild.Trigger("include-build-logs-trigger", {
 *     filename: "cloudbuild.yaml",
 *     github: {
 *         name: "terraform-provider-google-beta",
 *         owner: "hashicorp",
 *         push: {
 *             branch: "^main$",
 *         },
 *     },
 *     includeBuildLogs: "INCLUDE_BUILD_LOGS_WITH_STATUS",
 *     location: "us-central1",
 * });
 * ```
 * ### Cloudbuild Trigger Pubsub Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const mytopic = new gcp.pubsub.Topic("mytopic", {});
 * const pubsub_config_trigger = new gcp.cloudbuild.Trigger("pubsub-config-trigger", {
 *     location: "us-central1",
 *     description: "acceptance test example pubsub build trigger",
 *     pubsubConfig: {
 *         topic: mytopic.id,
 *     },
 *     sourceToBuild: {
 *         uri: "https://hashicorp/terraform-provider-google-beta",
 *         ref: "refs/heads/main",
 *         repoType: "GITHUB",
 *     },
 *     gitFileSource: {
 *         path: "cloudbuild.yaml",
 *         uri: "https://hashicorp/terraform-provider-google-beta",
 *         revision: "refs/heads/main",
 *         repoType: "GITHUB",
 *     },
 *     substitutions: {
 *         _ACTION: "$(body.message.data.action)",
 *     },
 *     filter: "_ACTION.matches('INSERT')",
 * });
 * ```
 * ### Cloudbuild Trigger Webhook Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const webhookTriggerSecretKey = new gcp.secretmanager.Secret("webhookTriggerSecretKey", {
 *     secretId: "webhook_trigger-secret-key-1",
 *     replication: {
 *         userManaged: {
 *             replicas: [{
 *                 location: "us-central1",
 *             }],
 *         },
 *     },
 * });
 * const webhookTriggerSecretKeyData = new gcp.secretmanager.SecretVersion("webhookTriggerSecretKeyData", {
 *     secret: webhookTriggerSecretKey.id,
 *     secretData: "secretkeygoeshere",
 * });
 * const project = gcp.organizations.getProject({});
 * const secretAccessor = project.then(project => gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         role: "roles/secretmanager.secretAccessor",
 *         members: [`serviceAccount:service-${project.number}@gcp-sa-cloudbuild.iam.gserviceaccount.com`],
 *     }],
 * }));
 * const policy = new gcp.secretmanager.SecretIamPolicy("policy", {
 *     project: webhookTriggerSecretKey.project,
 *     secretId: webhookTriggerSecretKey.secretId,
 *     policyData: secretAccessor.then(secretAccessor => secretAccessor.policyData),
 * });
 * const webhook_config_trigger = new gcp.cloudbuild.Trigger("webhook-config-trigger", {
 *     description: "acceptance test example webhook build trigger",
 *     webhookConfig: {
 *         secret: webhookTriggerSecretKeyData.id,
 *     },
 *     sourceToBuild: {
 *         uri: "https://hashicorp/terraform-provider-google-beta",
 *         ref: "refs/heads/main",
 *         repoType: "GITHUB",
 *     },
 *     gitFileSource: {
 *         path: "cloudbuild.yaml",
 *         uri: "https://hashicorp/terraform-provider-google-beta",
 *         revision: "refs/heads/main",
 *         repoType: "GITHUB",
 *     },
 * });
 * ```
 * ### Cloudbuild Trigger Manual
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const manual_trigger = new gcp.cloudbuild.Trigger("manual-trigger", {
 *     approvalConfig: {
 *         approvalRequired: true,
 *     },
 *     gitFileSource: {
 *         path: "cloudbuild.yaml",
 *         repoType: "GITHUB",
 *         revision: "refs/heads/main",
 *         uri: "https://hashicorp/terraform-provider-google-beta",
 *     },
 *     sourceToBuild: {
 *         ref: "refs/heads/main",
 *         repoType: "GITHUB",
 *         uri: "https://hashicorp/terraform-provider-google-beta",
 *     },
 * });
 * ```
 * ### Cloudbuild Trigger Manual Github Enterprise
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const manual_ghe_trigger = new gcp.cloudbuild.Trigger("manual-ghe-trigger", {
 *     gitFileSource: {
 *         githubEnterpriseConfig: "projects/myProject/locations/global/githubEnterpriseConfigs/configID",
 *         path: "cloudbuild.yaml",
 *         repoType: "GITHUB",
 *         revision: "refs/heads/main",
 *         uri: "https://hashicorp/terraform-provider-google-beta",
 *     },
 *     sourceToBuild: {
 *         githubEnterpriseConfig: "projects/myProject/locations/global/githubEnterpriseConfigs/configID",
 *         ref: "refs/heads/main",
 *         repoType: "GITHUB",
 *         uri: "https://hashicorp/terraform-provider-google-beta",
 *     },
 * });
 * ```
 * ### Cloudbuild Trigger Repo
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_connection = new gcp.cloudbuildv2.Connection("my-connection", {
 *     location: "us-central1",
 *     githubConfig: {
 *         appInstallationId: 123123,
 *         authorizerCredential: {
 *             oauthTokenSecretVersion: "projects/my-project/secrets/github-pat-secret/versions/latest",
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const my_repository = new gcp.cloudbuildv2.Repository("my-repository", {
 *     parentConnection: my_connection.id,
 *     remoteUri: "https://github.com/myuser/my-repo.git",
 * }, {
 *     provider: google_beta,
 * });
 * const repo_trigger = new gcp.cloudbuild.Trigger("repo-trigger", {
 *     location: "us-central1",
 *     repositoryEventConfig: {
 *         repository: my_repository.id,
 *         push: {
 *             branch: "feature-.*",
 *         },
 *     },
 *     filename: "cloudbuild.yaml",
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Cloudbuild Trigger Bitbucket Server Push
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const bbs_push_trigger = new gcp.cloudbuild.Trigger("bbs-push-trigger", {
 *     bitbucketServerTriggerConfig: {
 *         bitbucketServerConfigResource: "projects/123456789/locations/us-central1/bitbucketServerConfigs/myBitbucketConfig",
 *         projectKey: "STAG",
 *         push: {
 *             invertRegex: true,
 *             tag: "^0.1.*",
 *         },
 *         repoSlug: "terraform-provider-google",
 *     },
 *     filename: "cloudbuild.yaml",
 *     location: "us-central1",
 * });
 * ```
 * ### Cloudbuild Trigger Bitbucket Server Pull Request
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const bbs_pull_request_trigger = new gcp.cloudbuild.Trigger("bbs-pull-request-trigger", {
 *     bitbucketServerTriggerConfig: {
 *         bitbucketServerConfigResource: "projects/123456789/locations/us-central1/bitbucketServerConfigs/myBitbucketConfig",
 *         projectKey: "STAG",
 *         pullRequest: {
 *             branch: "^master$",
 *             commentControl: "COMMENTS_ENABLED",
 *             invertRegex: false,
 *         },
 *         repoSlug: "terraform-provider-google",
 *     },
 *     filename: "cloudbuild.yaml",
 *     location: "us-central1",
 * });
 * ```
 * ### Cloudbuild Trigger Github Enterprise
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const ghe_trigger = new gcp.cloudbuild.Trigger("ghe-trigger", {
 *     filename: "cloudbuild.yaml",
 *     github: {
 *         enterpriseConfigResourceName: "projects/123456789/locations/us-central1/githubEnterpriseConfigs/configID",
 *         name: "terraform-provider-google",
 *         owner: "hashicorp",
 *         push: {
 *             branch: "^main$",
 *         },
 *     },
 *     location: "us-central1",
 * });
 * ```
 * ### Cloudbuild Trigger Pubsub With Repo
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const my_connection = new gcp.cloudbuildv2.Connection("my-connection", {
 *     location: "us-central1",
 *     githubConfig: {
 *         appInstallationId: 123123,
 *         authorizerCredential: {
 *             oauthTokenSecretVersion: "projects/my-project/secrets/github-pat-secret/versions/latest",
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const my_repository = new gcp.cloudbuildv2.Repository("my-repository", {
 *     parentConnection: my_connection.id,
 *     remoteUri: "https://github.com/myuser/my-repo.git",
 * }, {
 *     provider: google_beta,
 * });
 * const mytopic = new gcp.pubsub.Topic("mytopic", {}, {
 *     provider: google_beta,
 * });
 * const pubsub_with_repo_trigger = new gcp.cloudbuild.Trigger("pubsub-with-repo-trigger", {
 *     location: "us-central1",
 *     pubsubConfig: {
 *         topic: mytopic.id,
 *     },
 *     sourceToBuild: {
 *         repository: my_repository.id,
 *         ref: "refs/heads/main",
 *         repoType: "GITHUB",
 *     },
 *     gitFileSource: {
 *         path: "cloudbuild.yaml",
 *         repository: my_repository.id,
 *         revision: "refs/heads/main",
 *         repoType: "GITHUB",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * Trigger can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:cloudbuild/trigger:Trigger default projects/{{project}}/locations/{{location}}/triggers/{{trigger_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudbuild/trigger:Trigger default projects/{{project}}/triggers/{{trigger_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudbuild/trigger:Trigger default {{project}}/{{trigger_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudbuild/trigger:Trigger default {{trigger_id}}
 * ```
 */
class Trigger extends pulumi.CustomResource {
    /**
     * Get an existing Trigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Trigger(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Trigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Trigger.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["approvalConfig"] = state ? state.approvalConfig : undefined;
            resourceInputs["bitbucketServerTriggerConfig"] = state ? state.bitbucketServerTriggerConfig : undefined;
            resourceInputs["build"] = state ? state.build : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["filename"] = state ? state.filename : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["gitFileSource"] = state ? state.gitFileSource : undefined;
            resourceInputs["github"] = state ? state.github : undefined;
            resourceInputs["ignoredFiles"] = state ? state.ignoredFiles : undefined;
            resourceInputs["includeBuildLogs"] = state ? state.includeBuildLogs : undefined;
            resourceInputs["includedFiles"] = state ? state.includedFiles : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pubsubConfig"] = state ? state.pubsubConfig : undefined;
            resourceInputs["repositoryEventConfig"] = state ? state.repositoryEventConfig : undefined;
            resourceInputs["serviceAccount"] = state ? state.serviceAccount : undefined;
            resourceInputs["sourceToBuild"] = state ? state.sourceToBuild : undefined;
            resourceInputs["substitutions"] = state ? state.substitutions : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["triggerId"] = state ? state.triggerId : undefined;
            resourceInputs["triggerTemplate"] = state ? state.triggerTemplate : undefined;
            resourceInputs["webhookConfig"] = state ? state.webhookConfig : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["approvalConfig"] = args ? args.approvalConfig : undefined;
            resourceInputs["bitbucketServerTriggerConfig"] = args ? args.bitbucketServerTriggerConfig : undefined;
            resourceInputs["build"] = args ? args.build : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["filename"] = args ? args.filename : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["gitFileSource"] = args ? args.gitFileSource : undefined;
            resourceInputs["github"] = args ? args.github : undefined;
            resourceInputs["ignoredFiles"] = args ? args.ignoredFiles : undefined;
            resourceInputs["includeBuildLogs"] = args ? args.includeBuildLogs : undefined;
            resourceInputs["includedFiles"] = args ? args.includedFiles : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["pubsubConfig"] = args ? args.pubsubConfig : undefined;
            resourceInputs["repositoryEventConfig"] = args ? args.repositoryEventConfig : undefined;
            resourceInputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            resourceInputs["sourceToBuild"] = args ? args.sourceToBuild : undefined;
            resourceInputs["substitutions"] = args ? args.substitutions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["triggerTemplate"] = args ? args.triggerTemplate : undefined;
            resourceInputs["webhookConfig"] = args ? args.webhookConfig : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["triggerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Trigger.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Trigger = Trigger;
/** @internal */
Trigger.__pulumiType = 'gcp:cloudbuild/trigger:Trigger';
//# sourceMappingURL=trigger.js.map