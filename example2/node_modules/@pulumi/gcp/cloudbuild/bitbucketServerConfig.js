"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitbucketServerConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * BitbucketServerConfig represents the configuration for a Bitbucket Server.
 *
 * To get more information about BitbucketServerConfig, see:
 *
 * * [API documentation](https://cloud.google.com/build/docs/api/reference/rest/v1/projects.locations.bitbucketServerConfigs)
 * * How-to Guides
 *     * [Connect to a Bitbucket Server host](https://cloud.google.com/build/docs/automating-builds/bitbucket/connect-host-bitbucket-server)
 *
 * ## Example Usage
 * ### Cloudbuild Bitbucket Server Config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const bbs_config = new gcp.cloudbuild.BitbucketServerConfig("bbs-config", {
 *     apiKey: "<api-key>",
 *     configId: "mybbsconfig",
 *     hostUri: "https://bbs.com",
 *     location: "us-central1",
 *     secrets: {
 *         adminAccessTokenVersionName: "projects/myProject/secrets/mybbspat/versions/1",
 *         readAccessTokenVersionName: "projects/myProject/secrets/mybbspat/versions/1",
 *         webhookSecretVersionName: "projects/myProject/secrets/mybbspat/versions/1",
 *     },
 *     username: "test",
 * });
 * ```
 * ### Cloudbuild Bitbucket Server Config Repositories
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const bbs_config_with_repos = new gcp.cloudbuild.BitbucketServerConfig("bbs-config-with-repos", {
 *     apiKey: "<api-key>",
 *     configId: "mybbsconfig",
 *     connectedRepositories: [
 *         {
 *             projectKey: "DEV",
 *             repoSlug: "repo1",
 *         },
 *         {
 *             projectKey: "PROD",
 *             repoSlug: "repo1",
 *         },
 *     ],
 *     hostUri: "https://bbs.com",
 *     location: "us-central1",
 *     secrets: {
 *         adminAccessTokenVersionName: "projects/myProject/secrets/mybbspat/versions/1",
 *         readAccessTokenVersionName: "projects/myProject/secrets/mybbspat/versions/1",
 *         webhookSecretVersionName: "projects/myProject/secrets/mybbspat/versions/1",
 *     },
 *     username: "test",
 * });
 * ```
 *
 * ## Import
 *
 * BitbucketServerConfig can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:cloudbuild/bitbucketServerConfig:BitbucketServerConfig default projects/{{project}}/locations/{{location}}/bitbucketServerConfigs/{{config_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudbuild/bitbucketServerConfig:BitbucketServerConfig default {{project}}/{{location}}/{{config_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudbuild/bitbucketServerConfig:BitbucketServerConfig default {{location}}/{{config_id}}
 * ```
 */
class BitbucketServerConfig extends pulumi.CustomResource {
    /**
     * Get an existing BitbucketServerConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BitbucketServerConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of BitbucketServerConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BitbucketServerConfig.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["configId"] = state ? state.configId : undefined;
            resourceInputs["connectedRepositories"] = state ? state.connectedRepositories : undefined;
            resourceInputs["hostUri"] = state ? state.hostUri : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peeredNetwork"] = state ? state.peeredNetwork : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["secrets"] = state ? state.secrets : undefined;
            resourceInputs["sslCa"] = state ? state.sslCa : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["webhookKey"] = state ? state.webhookKey : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.apiKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiKey'");
            }
            if ((!args || args.configId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configId'");
            }
            if ((!args || args.hostUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostUri'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.secrets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secrets'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["apiKey"] = args ? args.apiKey : undefined;
            resourceInputs["configId"] = args ? args.configId : undefined;
            resourceInputs["connectedRepositories"] = args ? args.connectedRepositories : undefined;
            resourceInputs["hostUri"] = args ? args.hostUri : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["peeredNetwork"] = args ? args.peeredNetwork : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["sslCa"] = args ? args.sslCa : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["webhookKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BitbucketServerConfig.__pulumiType, name, resourceInputs, opts);
    }
}
exports.BitbucketServerConfig = BitbucketServerConfig;
/** @internal */
BitbucketServerConfig.__pulumiType = 'gcp:cloudbuild/bitbucketServerConfig:BitbucketServerConfig';
//# sourceMappingURL=bitbucketServerConfig.js.map