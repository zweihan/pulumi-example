"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopicIAMPolicy = exports.TopicIAMMember = exports.TopicIAMBinding = exports.Topic = exports.SubscriptionIAMPolicy = exports.SubscriptionIAMMember = exports.SubscriptionIAMBinding = exports.Subscription = exports.Schema = exports.LiteTopic = exports.LiteSubscription = exports.LiteReservation = exports.getTopicOutput = exports.getTopic = exports.getSubscriptionOutput = exports.getSubscription = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.getSubscription = null;
exports.getSubscriptionOutput = null;
utilities.lazyLoad(exports, ["getSubscription", "getSubscriptionOutput"], () => require("./getSubscription"));
exports.getTopic = null;
exports.getTopicOutput = null;
utilities.lazyLoad(exports, ["getTopic", "getTopicOutput"], () => require("./getTopic"));
exports.LiteReservation = null;
utilities.lazyLoad(exports, ["LiteReservation"], () => require("./liteReservation"));
exports.LiteSubscription = null;
utilities.lazyLoad(exports, ["LiteSubscription"], () => require("./liteSubscription"));
exports.LiteTopic = null;
utilities.lazyLoad(exports, ["LiteTopic"], () => require("./liteTopic"));
exports.Schema = null;
utilities.lazyLoad(exports, ["Schema"], () => require("./schema"));
exports.Subscription = null;
utilities.lazyLoad(exports, ["Subscription"], () => require("./subscription"));
exports.SubscriptionIAMBinding = null;
utilities.lazyLoad(exports, ["SubscriptionIAMBinding"], () => require("./subscriptionIAMBinding"));
exports.SubscriptionIAMMember = null;
utilities.lazyLoad(exports, ["SubscriptionIAMMember"], () => require("./subscriptionIAMMember"));
exports.SubscriptionIAMPolicy = null;
utilities.lazyLoad(exports, ["SubscriptionIAMPolicy"], () => require("./subscriptionIAMPolicy"));
exports.Topic = null;
utilities.lazyLoad(exports, ["Topic"], () => require("./topic"));
exports.TopicIAMBinding = null;
utilities.lazyLoad(exports, ["TopicIAMBinding"], () => require("./topicIAMBinding"));
exports.TopicIAMMember = null;
utilities.lazyLoad(exports, ["TopicIAMMember"], () => require("./topicIAMMember"));
exports.TopicIAMPolicy = null;
utilities.lazyLoad(exports, ["TopicIAMPolicy"], () => require("./topicIAMPolicy"));
__exportStar(require("./zMixins"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:pubsub/liteReservation:LiteReservation":
                return new exports.LiteReservation(name, undefined, { urn });
            case "gcp:pubsub/liteSubscription:LiteSubscription":
                return new exports.LiteSubscription(name, undefined, { urn });
            case "gcp:pubsub/liteTopic:LiteTopic":
                return new exports.LiteTopic(name, undefined, { urn });
            case "gcp:pubsub/schema:Schema":
                return new exports.Schema(name, undefined, { urn });
            case "gcp:pubsub/subscription:Subscription":
                return new exports.Subscription(name, undefined, { urn });
            case "gcp:pubsub/subscriptionIAMBinding:SubscriptionIAMBinding":
                return new exports.SubscriptionIAMBinding(name, undefined, { urn });
            case "gcp:pubsub/subscriptionIAMMember:SubscriptionIAMMember":
                return new exports.SubscriptionIAMMember(name, undefined, { urn });
            case "gcp:pubsub/subscriptionIAMPolicy:SubscriptionIAMPolicy":
                return new exports.SubscriptionIAMPolicy(name, undefined, { urn });
            case "gcp:pubsub/topic:Topic":
                return new exports.Topic(name, undefined, { urn });
            case "gcp:pubsub/topicIAMBinding:TopicIAMBinding":
                return new exports.TopicIAMBinding(name, undefined, { urn });
            case "gcp:pubsub/topicIAMMember:TopicIAMMember":
                return new exports.TopicIAMMember(name, undefined, { urn });
            case "gcp:pubsub/topicIAMPolicy:TopicIAMPolicy":
                return new exports.TopicIAMPolicy(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "pubsub/liteReservation", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/liteSubscription", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/liteTopic", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/schema", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/subscription", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/subscriptionIAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/subscriptionIAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/subscriptionIAMPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/topic", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/topicIAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/topicIAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "pubsub/topicIAMPolicy", _module);
//# sourceMappingURL=index.js.map