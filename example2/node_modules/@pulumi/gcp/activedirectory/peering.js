"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Peering = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 * ### Active Directory Peering Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const source_network = new gcp.compute.Network("source-network", {}, {
 *     provider: google_beta,
 * });
 * const ad_domain = new gcp.activedirectory.Domain("ad-domain", {
 *     domainName: "ad.test.hashicorptest.com",
 *     locations: ["us-central1"],
 *     reservedIpRange: "192.168.255.0/24",
 *     authorizedNetworks: [source_network.id],
 * }, {
 *     provider: google_beta,
 * });
 * const peered_project = new gcp.organizations.Project("peered-project", {
 *     projectId: "my-peered-project",
 *     orgId: "123456789",
 *     billingAccount: "000000-0000000-0000000-000000",
 * }, {
 *     provider: google_beta,
 * });
 * const compute = new gcp.projects.Service("compute", {
 *     project: peered_project.projectId,
 *     service: "compute.googleapis.com",
 * }, {
 *     provider: google_beta,
 * });
 * const peered_network = new gcp.compute.Network("peered-network", {project: compute.project}, {
 *     provider: google_beta,
 * });
 * const ad_domain_peering = new gcp.activedirectory.Peering("ad-domain-peering", {
 *     domainResource: ad_domain.name,
 *     peeringId: "ad-domain-peering",
 *     authorizedNetwork: peered_network.id,
 *     labels: {
 *         foo: "bar",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * This resource does not support import.
 */
class Peering extends pulumi.CustomResource {
    /**
     * Get an existing Peering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Peering(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Peering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Peering.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authorizedNetwork"] = state ? state.authorizedNetwork : undefined;
            resourceInputs["domainResource"] = state ? state.domainResource : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peeringId"] = state ? state.peeringId : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusMessage"] = state ? state.statusMessage : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.authorizedNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizedNetwork'");
            }
            if ((!args || args.domainResource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainResource'");
            }
            if ((!args || args.peeringId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peeringId'");
            }
            resourceInputs["authorizedNetwork"] = args ? args.authorizedNetwork : undefined;
            resourceInputs["domainResource"] = args ? args.domainResource : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["peeringId"] = args ? args.peeringId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["statusMessage"] = args ? args.statusMessage : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Peering.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Peering = Peering;
/** @internal */
Peering.__pulumiType = 'gcp:activedirectory/peering:Peering';
//# sourceMappingURL=peering.js.map