"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Service = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Cloud Run service has a unique endpoint and autoscales containers.
 *
 * To get more information about Service, see:
 *
 * * [API documentation](https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/run/docs/)
 *
 * > **Warning:** We recommend using the `gcp.cloudrunv2.Service` resource which offers a better
 * developer experience and broader support of Cloud Run features.
 *
 * ## Example Usage
 * ### Cloud Run Service Pubsub
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "gcr.io/cloudrun/hello",
 *             }],
 *         },
 *     },
 *     traffics: [{
 *         percent: 100,
 *         latestRevision: true,
 *     }],
 * });
 * const sa = new gcp.serviceaccount.Account("sa", {
 *     accountId: "cloud-run-pubsub-invoker",
 *     displayName: "Cloud Run Pub/Sub Invoker",
 * });
 * const binding = new gcp.cloudrun.IamBinding("binding", {
 *     location: _default.location,
 *     service: _default.name,
 *     role: "roles/run.invoker",
 *     members: [pulumi.interpolate`serviceAccount:${sa.email}`],
 * });
 * const project = new gcp.projects.IAMBinding("project", {
 *     role: "roles/iam.serviceAccountTokenCreator",
 *     members: [pulumi.interpolate`serviceAccount:${sa.email}`],
 * });
 * const topic = new gcp.pubsub.Topic("topic", {});
 * const subscription = new gcp.pubsub.Subscription("subscription", {
 *     topic: topic.name,
 *     pushConfig: {
 *         pushEndpoint: _default.statuses.apply(statuses => statuses[0].url),
 *         oidcToken: {
 *             serviceAccountEmail: sa.email,
 *         },
 *         attributes: {
 *             "x-goog-version": "v1",
 *         },
 *     },
 * });
 * ```
 * ### Cloud Run Service Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *             }],
 *         },
 *     },
 *     traffics: [{
 *         latestRevision: true,
 *         percent: 100,
 *     }],
 * });
 * ```
 * ### Cloud Run Service Sql
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const instance = new gcp.sql.DatabaseInstance("instance", {
 *     region: "us-east1",
 *     databaseVersion: "MYSQL_5_7",
 *     settings: {
 *         tier: "db-f1-micro",
 *     },
 *     deletionProtection: true,
 * });
 * const _default = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *             }],
 *         },
 *         metadata: {
 *             annotations: {
 *                 "autoscaling.knative.dev/maxScale": "1000",
 *                 "run.googleapis.com/cloudsql-instances": instance.connectionName,
 *                 "run.googleapis.com/client-name": "demo",
 *             },
 *         },
 *     },
 *     autogenerateRevisionName: true,
 * });
 * ```
 * ### Cloud Run Service Noauth
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *             }],
 *         },
 *     },
 * });
 * const noauthIAMPolicy = gcp.organizations.getIAMPolicy({
 *     bindings: [{
 *         role: "roles/run.invoker",
 *         members: ["allUsers"],
 *     }],
 * });
 * const noauthIamPolicy = new gcp.cloudrun.IamPolicy("noauthIamPolicy", {
 *     location: _default.location,
 *     project: _default.project,
 *     service: _default.name,
 *     policyData: noauthIAMPolicy.then(noauthIAMPolicy => noauthIAMPolicy.policyData),
 * });
 * ```
 * ### Cloud Run Service Probes
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.cloudrun.Service("default", {
 *     location: "us-central1",
 *     template: {
 *         spec: {
 *             containers: [{
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *                 startupProbe: {
 *                     initialDelaySeconds: 0,
 *                     timeoutSeconds: 1,
 *                     periodSeconds: 3,
 *                     failureThreshold: 1,
 *                     tcpSocket: {
 *                         port: 8080,
 *                     },
 *                 },
 *                 livenessProbe: {
 *                     httpGet: {
 *                         path: "/",
 *                     },
 *                 },
 *             }],
 *         },
 *     },
 *     traffics: [{
 *         percent: 100,
 *         latestRevision: true,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Service can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:cloudrun/service:Service default locations/{{location}}/namespaces/{{project}}/services/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudrun/service:Service default {{location}}/{{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudrun/service:Service default {{location}}/{{name}}
 * ```
 */
class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Service(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["autogenerateRevisionName"] = state ? state.autogenerateRevisionName : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["statuses"] = state ? state.statuses : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["traffics"] = state ? state.traffics : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["autogenerateRevisionName"] = args ? args.autogenerateRevisionName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["traffics"] = args ? args.traffics : undefined;
            resourceInputs["statuses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Service = Service;
/** @internal */
Service.__pulumiType = 'gcp:cloudrun/service:Service';
//# sourceMappingURL=service.js.map