"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccountIdTokenOutput = exports.getAccountIdToken = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * This data source provides a Google OpenID Connect (`oidc`) `idToken`.  Tokens issued from this data source are typically used to call external services that accept OIDC tokens for authentication (e.g. [Google Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service)).
 *
 * For more information see
 * [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
 *
 * ## Example Usage
 *
 * ### ServiceAccount JSON Credential File.
 *   `gcp.serviceAccount.getAccountIdToken` will use the configured provider credentials
 *
 * ### Service Account Impersonation.
 *   `gcp.serviceAccount.getAccountAccessToken` will use background impersonated credentials provided by `gcp.serviceAccount.getAccountAccessToken`.
 *
 *   Note: to use the following, you must grant `targetServiceAccount` the
 *   `roles/iam.serviceAccountTokenCreator` role on itself.
 */
function getAccountIdToken(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:serviceAccount/getAccountIdToken:getAccountIdToken", {
        "delegates": args.delegates,
        "includeEmail": args.includeEmail,
        "targetAudience": args.targetAudience,
        "targetServiceAccount": args.targetServiceAccount,
    }, opts);
}
exports.getAccountIdToken = getAccountIdToken;
/**
 * This data source provides a Google OpenID Connect (`oidc`) `idToken`.  Tokens issued from this data source are typically used to call external services that accept OIDC tokens for authentication (e.g. [Google Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service)).
 *
 * For more information see
 * [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
 *
 * ## Example Usage
 *
 * ### ServiceAccount JSON Credential File.
 *   `gcp.serviceAccount.getAccountIdToken` will use the configured provider credentials
 *
 * ### Service Account Impersonation.
 *   `gcp.serviceAccount.getAccountAccessToken` will use background impersonated credentials provided by `gcp.serviceAccount.getAccountAccessToken`.
 *
 *   Note: to use the following, you must grant `targetServiceAccount` the
 *   `roles/iam.serviceAccountTokenCreator` role on itself.
 */
function getAccountIdTokenOutput(args, opts) {
    return pulumi.output(args).apply((a) => getAccountIdToken(a, opts));
}
exports.getAccountIdTokenOutput = getAccountIdTokenOutput;
//# sourceMappingURL=getAccountIdToken.js.map