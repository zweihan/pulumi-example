"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccountJwtOutput = exports.getAccountJwt = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * This data source provides a [self-signed JWT](https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-jwt).  Tokens issued from this data source are typically used to call external services that accept JWTs for authentication.
 *
 * ## Example Usage
 *
 * Note: in order to use the following, the caller must have _at least_ `roles/iam.serviceAccountTokenCreator` on the `targetServiceAccount`.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const foo = gcp.serviceAccount.getAccountJwt({
 *     targetServiceAccount: "impersonated-account@project.iam.gserviceaccount.com",
 *     payload: JSON.stringify({
 *         foo: "bar",
 *         sub: "subject",
 *     }),
 *     expiresIn: 60,
 * });
 * export const jwt = foo.then(foo => foo.jwt);
 * ```
 */
function getAccountJwt(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:serviceAccount/getAccountJwt:getAccountJwt", {
        "delegates": args.delegates,
        "expiresIn": args.expiresIn,
        "payload": args.payload,
        "targetServiceAccount": args.targetServiceAccount,
    }, opts);
}
exports.getAccountJwt = getAccountJwt;
/**
 * This data source provides a [self-signed JWT](https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-jwt).  Tokens issued from this data source are typically used to call external services that accept JWTs for authentication.
 *
 * ## Example Usage
 *
 * Note: in order to use the following, the caller must have _at least_ `roles/iam.serviceAccountTokenCreator` on the `targetServiceAccount`.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const foo = gcp.serviceAccount.getAccountJwt({
 *     targetServiceAccount: "impersonated-account@project.iam.gserviceaccount.com",
 *     payload: JSON.stringify({
 *         foo: "bar",
 *         sub: "subject",
 *     }),
 *     expiresIn: 60,
 * });
 * export const jwt = foo.then(foo => foo.jwt);
 * ```
 */
function getAccountJwtOutput(args, opts) {
    return pulumi.output(args).apply((a) => getAccountJwt(a, opts));
}
exports.getAccountJwtOutput = getAccountJwtOutput;
//# sourceMappingURL=getAccountJwt.js.map