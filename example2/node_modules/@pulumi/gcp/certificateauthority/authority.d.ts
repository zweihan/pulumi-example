import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * ## Example Usage
 * ### Privateca Certificate Authority Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.certificateauthority.Authority("default", {
 *     certificateAuthorityId: "my-certificate-authority",
 *     config: {
 *         subjectConfig: {
 *             subject: {
 *                 commonName: "my-certificate-authority",
 *                 organization: "HashiCorp",
 *             },
 *             subjectAltName: {
 *                 dnsNames: ["hashicorp.com"],
 *             },
 *         },
 *         x509Config: {
 *             caOptions: {
 *                 isCa: true,
 *                 maxIssuerPathLength: 10,
 *             },
 *             keyUsage: {
 *                 baseKeyUsage: {
 *                     certSign: true,
 *                     contentCommitment: true,
 *                     crlSign: true,
 *                     dataEncipherment: true,
 *                     decipherOnly: true,
 *                     digitalSignature: true,
 *                     keyAgreement: true,
 *                     keyEncipherment: false,
 *                 },
 *                 extendedKeyUsage: {
 *                     clientAuth: false,
 *                     codeSigning: true,
 *                     emailProtection: true,
 *                     serverAuth: true,
 *                     timeStamping: true,
 *                 },
 *             },
 *         },
 *     },
 *     deletionProtection: true,
 *     keySpec: {
 *         algorithm: "RSA_PKCS1_4096_SHA256",
 *     },
 *     lifetime: "86400s",
 *     location: "us-central1",
 *     pool: "ca-pool",
 * });
 * ```
 * ### Privateca Certificate Authority Subordinate
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const root_ca = new gcp.certificateauthority.Authority("root-ca", {
 *     pool: "ca-pool",
 *     certificateAuthorityId: "my-certificate-authority-root",
 *     location: "us-central1",
 *     config: {
 *         subjectConfig: {
 *             subject: {
 *                 organization: "HashiCorp",
 *                 commonName: "my-certificate-authority",
 *             },
 *             subjectAltName: {
 *                 dnsNames: ["hashicorp.com"],
 *             },
 *         },
 *         x509Config: {
 *             caOptions: {
 *                 isCa: true,
 *             },
 *             keyUsage: {
 *                 baseKeyUsage: {
 *                     certSign: true,
 *                     crlSign: true,
 *                 },
 *                 extendedKeyUsage: {
 *                     serverAuth: false,
 *                 },
 *             },
 *         },
 *     },
 *     keySpec: {
 *         algorithm: "RSA_PKCS1_4096_SHA256",
 *     },
 *     deletionProtection: false,
 *     skipGracePeriod: true,
 *     ignoreActiveCertificatesOnDeletion: true,
 * });
 * const _default = new gcp.certificateauthority.Authority("default", {
 *     pool: "ca-pool",
 *     certificateAuthorityId: "my-certificate-authority-sub",
 *     location: "us-central1",
 *     deletionProtection: true,
 *     subordinateConfig: {
 *         certificateAuthority: root_ca.name,
 *     },
 *     config: {
 *         subjectConfig: {
 *             subject: {
 *                 organization: "HashiCorp",
 *                 commonName: "my-subordinate-authority",
 *             },
 *             subjectAltName: {
 *                 dnsNames: ["hashicorp.com"],
 *             },
 *         },
 *         x509Config: {
 *             caOptions: {
 *                 isCa: true,
 *                 maxIssuerPathLength: 0,
 *             },
 *             keyUsage: {
 *                 baseKeyUsage: {
 *                     digitalSignature: true,
 *                     contentCommitment: true,
 *                     keyEncipherment: false,
 *                     dataEncipherment: true,
 *                     keyAgreement: true,
 *                     certSign: true,
 *                     crlSign: true,
 *                     decipherOnly: true,
 *                 },
 *                 extendedKeyUsage: {
 *                     serverAuth: true,
 *                     clientAuth: false,
 *                     emailProtection: true,
 *                     codeSigning: true,
 *                     timeStamping: true,
 *                 },
 *             },
 *         },
 *     },
 *     lifetime: "86400s",
 *     keySpec: {
 *         algorithm: "RSA_PKCS1_4096_SHA256",
 *     },
 *     type: "SUBORDINATE",
 * });
 * ```
 * ### Privateca Certificate Authority Byo Key
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const privatecaSa = new gcp.projects.ServiceIdentity("privatecaSa", {service: "privateca.googleapis.com"});
 * const privatecaSaKeyuserSignerverifier = new gcp.kms.CryptoKeyIAMBinding("privatecaSaKeyuserSignerverifier", {
 *     cryptoKeyId: "projects/keys-project/locations/us-central1/keyRings/key-ring/cryptoKeys/crypto-key",
 *     role: "roles/cloudkms.signerVerifier",
 *     members: [pulumi.interpolate`serviceAccount:${privatecaSa.email}`],
 * });
 * const privatecaSaKeyuserViewer = new gcp.kms.CryptoKeyIAMBinding("privatecaSaKeyuserViewer", {
 *     cryptoKeyId: "projects/keys-project/locations/us-central1/keyRings/key-ring/cryptoKeys/crypto-key",
 *     role: "roles/viewer",
 *     members: [pulumi.interpolate`serviceAccount:${privatecaSa.email}`],
 * });
 * const _default = new gcp.certificateauthority.Authority("default", {
 *     pool: "ca-pool",
 *     certificateAuthorityId: "my-certificate-authority",
 *     location: "us-central1",
 *     deletionProtection: true,
 *     keySpec: {
 *         cloudKmsKeyVersion: "projects/keys-project/locations/us-central1/keyRings/key-ring/cryptoKeys/crypto-key/cryptoKeyVersions/1",
 *     },
 *     config: {
 *         subjectConfig: {
 *             subject: {
 *                 organization: "Example, Org.",
 *                 commonName: "Example Authority",
 *             },
 *         },
 *         x509Config: {
 *             caOptions: {
 *                 isCa: true,
 *                 maxIssuerPathLength: 10,
 *             },
 *             keyUsage: {
 *                 baseKeyUsage: {
 *                     certSign: true,
 *                     crlSign: true,
 *                 },
 *                 extendedKeyUsage: {
 *                     serverAuth: false,
 *                 },
 *             },
 *             nameConstraints: {
 *                 critical: true,
 *                 permittedDnsNames: ["*.example.com"],
 *                 excludedDnsNames: ["*.deny.example.com"],
 *                 permittedIpRanges: ["10.0.0.0/8"],
 *                 excludedIpRanges: ["10.1.1.0/24"],
 *                 permittedEmailAddresses: [".example.com"],
 *                 excludedEmailAddresses: [".deny.example.com"],
 *                 permittedUris: [".example.com"],
 *                 excludedUris: [".deny.example.com"],
 *             },
 *         },
 *     },
 * }, {
 *     dependsOn: [
 *         privatecaSaKeyuserSignerverifier,
 *         privatecaSaKeyuserViewer,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * CertificateAuthority can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:certificateauthority/authority:Authority default projects/{{project}}/locations/{{location}}/caPools/{{pool}}/certificateAuthorities/{{certificate_authority_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:certificateauthority/authority:Authority default {{project}}/{{location}}/{{pool}}/{{certificate_authority_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:certificateauthority/authority:Authority default {{location}}/{{pool}}/{{certificate_authority_id}}
 * ```
 */
export declare class Authority extends pulumi.CustomResource {
    /**
     * Get an existing Authority resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthorityState, opts?: pulumi.CustomResourceOptions): Authority;
    /**
     * Returns true if the given object is an instance of Authority.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Authority;
    /**
     * URLs for accessing content published by this CA, such as the CA certificate and CRLs.
     * Structure is documented below.
     */
    readonly accessUrls: pulumi.Output<outputs.certificateauthority.AuthorityAccessUrl[]>;
    /**
     * The user provided Resource ID for this Certificate Authority.
     */
    readonly certificateAuthorityId: pulumi.Output<string>;
    /**
     * The config used to create a self-signed X.509 certificate or CSR.
     * Structure is documented below.
     */
    readonly config: pulumi.Output<outputs.certificateauthority.AuthorityConfig>;
    /**
     * The time at which this CertificateAuthority was created.
     * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
     * fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    readonly createTime: pulumi.Output<string>;
    /**
     * Whether or not to allow Terraform to destroy the CertificateAuthority. Unless this field is set to false in Terraform
     * state, a 'terraform destroy' or 'terraform apply' that would delete the instance will fail.
     */
    readonly deletionProtection: pulumi.Output<boolean | undefined>;
    /**
     * Desired state of the CertificateAuthority. Set this field to `STAGED` to create a `STAGED` root CA.
     */
    readonly desiredState: pulumi.Output<string | undefined>;
    /**
     * The name of a Cloud Storage bucket where this CertificateAuthority will publish content,
     * such as the CA certificate and CRLs. This must be a bucket name, without any prefixes
     * (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named
     * my-bucket, you would simply specify `my-bucket`. If not specified, a managed bucket will be
     * created.
     */
    readonly gcsBucket: pulumi.Output<string | undefined>;
    /**
     * This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and unexpired certs.
     * Use with care. Defaults to `false`.
     */
    readonly ignoreActiveCertificatesOnDeletion: pulumi.Output<boolean | undefined>;
    /**
     * Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
     * is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
     * certificate. Otherwise, it is used to sign a CSR.
     * Structure is documented below.
     */
    readonly keySpec: pulumi.Output<outputs.certificateauthority.AuthorityKeySpec>;
    /**
     * Labels with user-defined metadata.
     * An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
     * "1.3kg", "count": "3" }.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
     * "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
     * fractional digits, terminated by 's'. Example: "3.5s".
     */
    readonly lifetime: pulumi.Output<string | undefined>;
    /**
     * Location of the CertificateAuthority. A full list of valid locations can be found by
     * running `gcloud privateca locations list`.
     */
    readonly location: pulumi.Output<string>;
    /**
     * The resource name for this CertificateAuthority in the format
     * projects/*&#47;locations/*&#47;certificateAuthorities/*.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with a third party issuer.
     */
    readonly pemCaCertificate: pulumi.Output<string | undefined>;
    /**
     * This CertificateAuthority's certificate chain, including the current
     * CertificateAuthority's certificate. Ordered such that the root issuer is the final
     * element (consistent with RFC 5246). For a self-signed CA, this will only list the current
     * CertificateAuthority's certificate.
     */
    readonly pemCaCertificates: pulumi.Output<string[]>;
    /**
     * The name of the CaPool this Certificate Authority belongs to.
     */
    readonly pool: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * If this flag is set, the Certificate Authority will be deleted as soon as
     * possible without a 30-day grace period where undeletion would have been
     * allowed. If you proceed, there will be no way to recover this CA.
     * Use with care. Defaults to `false`.
     */
    readonly skipGracePeriod: pulumi.Output<boolean | undefined>;
    /**
     * The State for this CertificateAuthority.
     */
    readonly state: pulumi.Output<string>;
    /**
     * If this is a subordinate CertificateAuthority, this field will be set
     * with the subordinate configuration, which describes its issuers.
     * Structure is documented below.
     */
    readonly subordinateConfig: pulumi.Output<outputs.certificateauthority.AuthoritySubordinateConfig | undefined>;
    /**
     * The Type of this CertificateAuthority.
     * > **Note:** For `SUBORDINATE` Certificate Authorities, they need to
     * be activated before they can issue certificates.
     * Default value is `SELF_SIGNED`.
     * Possible values are: `SELF_SIGNED`, `SUBORDINATE`.
     */
    readonly type: pulumi.Output<string | undefined>;
    /**
     * The time at which this CertificateAuthority was updated.
     * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
     * fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    readonly updateTime: pulumi.Output<string>;
    /**
     * Create a Authority resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthorityArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Authority resources.
 */
export interface AuthorityState {
    /**
     * URLs for accessing content published by this CA, such as the CA certificate and CRLs.
     * Structure is documented below.
     */
    accessUrls?: pulumi.Input<pulumi.Input<inputs.certificateauthority.AuthorityAccessUrl>[]>;
    /**
     * The user provided Resource ID for this Certificate Authority.
     */
    certificateAuthorityId?: pulumi.Input<string>;
    /**
     * The config used to create a self-signed X.509 certificate or CSR.
     * Structure is documented below.
     */
    config?: pulumi.Input<inputs.certificateauthority.AuthorityConfig>;
    /**
     * The time at which this CertificateAuthority was created.
     * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
     * fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    createTime?: pulumi.Input<string>;
    /**
     * Whether or not to allow Terraform to destroy the CertificateAuthority. Unless this field is set to false in Terraform
     * state, a 'terraform destroy' or 'terraform apply' that would delete the instance will fail.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * Desired state of the CertificateAuthority. Set this field to `STAGED` to create a `STAGED` root CA.
     */
    desiredState?: pulumi.Input<string>;
    /**
     * The name of a Cloud Storage bucket where this CertificateAuthority will publish content,
     * such as the CA certificate and CRLs. This must be a bucket name, without any prefixes
     * (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named
     * my-bucket, you would simply specify `my-bucket`. If not specified, a managed bucket will be
     * created.
     */
    gcsBucket?: pulumi.Input<string>;
    /**
     * This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and unexpired certs.
     * Use with care. Defaults to `false`.
     */
    ignoreActiveCertificatesOnDeletion?: pulumi.Input<boolean>;
    /**
     * Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
     * is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
     * certificate. Otherwise, it is used to sign a CSR.
     * Structure is documented below.
     */
    keySpec?: pulumi.Input<inputs.certificateauthority.AuthorityKeySpec>;
    /**
     * Labels with user-defined metadata.
     * An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
     * "1.3kg", "count": "3" }.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
     * "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
     * fractional digits, terminated by 's'. Example: "3.5s".
     */
    lifetime?: pulumi.Input<string>;
    /**
     * Location of the CertificateAuthority. A full list of valid locations can be found by
     * running `gcloud privateca locations list`.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name for this CertificateAuthority in the format
     * projects/*&#47;locations/*&#47;certificateAuthorities/*.
     */
    name?: pulumi.Input<string>;
    /**
     * The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with a third party issuer.
     */
    pemCaCertificate?: pulumi.Input<string>;
    /**
     * This CertificateAuthority's certificate chain, including the current
     * CertificateAuthority's certificate. Ordered such that the root issuer is the final
     * element (consistent with RFC 5246). For a self-signed CA, this will only list the current
     * CertificateAuthority's certificate.
     */
    pemCaCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the CaPool this Certificate Authority belongs to.
     */
    pool?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * If this flag is set, the Certificate Authority will be deleted as soon as
     * possible without a 30-day grace period where undeletion would have been
     * allowed. If you proceed, there will be no way to recover this CA.
     * Use with care. Defaults to `false`.
     */
    skipGracePeriod?: pulumi.Input<boolean>;
    /**
     * The State for this CertificateAuthority.
     */
    state?: pulumi.Input<string>;
    /**
     * If this is a subordinate CertificateAuthority, this field will be set
     * with the subordinate configuration, which describes its issuers.
     * Structure is documented below.
     */
    subordinateConfig?: pulumi.Input<inputs.certificateauthority.AuthoritySubordinateConfig>;
    /**
     * The Type of this CertificateAuthority.
     * > **Note:** For `SUBORDINATE` Certificate Authorities, they need to
     * be activated before they can issue certificates.
     * Default value is `SELF_SIGNED`.
     * Possible values are: `SELF_SIGNED`, `SUBORDINATE`.
     */
    type?: pulumi.Input<string>;
    /**
     * The time at which this CertificateAuthority was updated.
     * A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
     * fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
     */
    updateTime?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Authority resource.
 */
export interface AuthorityArgs {
    /**
     * The user provided Resource ID for this Certificate Authority.
     */
    certificateAuthorityId: pulumi.Input<string>;
    /**
     * The config used to create a self-signed X.509 certificate or CSR.
     * Structure is documented below.
     */
    config: pulumi.Input<inputs.certificateauthority.AuthorityConfig>;
    /**
     * Whether or not to allow Terraform to destroy the CertificateAuthority. Unless this field is set to false in Terraform
     * state, a 'terraform destroy' or 'terraform apply' that would delete the instance will fail.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * Desired state of the CertificateAuthority. Set this field to `STAGED` to create a `STAGED` root CA.
     */
    desiredState?: pulumi.Input<string>;
    /**
     * The name of a Cloud Storage bucket where this CertificateAuthority will publish content,
     * such as the CA certificate and CRLs. This must be a bucket name, without any prefixes
     * (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named
     * my-bucket, you would simply specify `my-bucket`. If not specified, a managed bucket will be
     * created.
     */
    gcsBucket?: pulumi.Input<string>;
    /**
     * This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and unexpired certs.
     * Use with care. Defaults to `false`.
     */
    ignoreActiveCertificatesOnDeletion?: pulumi.Input<boolean>;
    /**
     * Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
     * is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
     * certificate. Otherwise, it is used to sign a CSR.
     * Structure is documented below.
     */
    keySpec: pulumi.Input<inputs.certificateauthority.AuthorityKeySpec>;
    /**
     * Labels with user-defined metadata.
     * An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
     * "1.3kg", "count": "3" }.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
     * "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
     * fractional digits, terminated by 's'. Example: "3.5s".
     */
    lifetime?: pulumi.Input<string>;
    /**
     * Location of the CertificateAuthority. A full list of valid locations can be found by
     * running `gcloud privateca locations list`.
     */
    location: pulumi.Input<string>;
    /**
     * The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with a third party issuer.
     */
    pemCaCertificate?: pulumi.Input<string>;
    /**
     * The name of the CaPool this Certificate Authority belongs to.
     */
    pool: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * If this flag is set, the Certificate Authority will be deleted as soon as
     * possible without a 30-day grace period where undeletion would have been
     * allowed. If you proceed, there will be no way to recover this CA.
     * Use with care. Defaults to `false`.
     */
    skipGracePeriod?: pulumi.Input<boolean>;
    /**
     * If this is a subordinate CertificateAuthority, this field will be set
     * with the subordinate configuration, which describes its issuers.
     * Structure is documented below.
     */
    subordinateConfig?: pulumi.Input<inputs.certificateauthority.AuthoritySubordinateConfig>;
    /**
     * The Type of this CertificateAuthority.
     * > **Note:** For `SUBORDINATE` Certificate Authorities, they need to
     * be activated before they can issue certificates.
     * Default value is `SELF_SIGNED`.
     * Possible values are: `SELF_SIGNED`, `SUBORDINATE`.
     */
    type?: pulumi.Input<string>;
}
