"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Function = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Cloud Function that contains user computation executed in response to an event.
 *
 * To get more information about function, see:
 *
 * * [API documentation](https://cloud.google.com/functions/docs/reference/rest/v2beta/projects.locations.functions)
 *
 * ## Example Usage
 * ### Cloudfunctions2 Basic Gcs
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * // [START functions_v2_basic_gcs]
 * const source_bucket = new gcp.storage.Bucket("source-bucket", {
 *     location: "US",
 *     uniformBucketLevelAccess: true,
 * });
 * const object = new gcp.storage.BucketObject("object", {
 *     bucket: source_bucket.name,
 *     source: new pulumi.asset.FileAsset("function-source.zip"),
 * });
 * // Add path to the zipped function source code
 * const trigger_bucket = new gcp.storage.Bucket("trigger-bucket", {
 *     location: "us-central1",
 *     uniformBucketLevelAccess: true,
 * });
 * const gcsAccount = gcp.storage.getProjectServiceAccount({});
 * // To use GCS CloudEvent triggers, the GCS service account requires the Pub/Sub Publisher(roles/pubsub.publisher) IAM role in the specified project.
 * // (See https://cloud.google.com/eventarc/docs/run/quickstart-storage#before-you-begin)
 * const gcs_pubsub_publishing = new gcp.projects.IAMMember("gcs-pubsub-publishing", {
 *     project: "my-project-name",
 *     role: "roles/pubsub.publisher",
 *     member: gcsAccount.then(gcsAccount => `serviceAccount:${gcsAccount.emailAddress}`),
 * });
 * const account = new gcp.serviceaccount.Account("account", {
 *     accountId: "gcf-sa",
 *     displayName: "Test Service Account - used for both the cloud function and eventarc trigger in the test",
 * });
 * // Permissions on the service account used by the function and Eventarc trigger
 * const invoking = new gcp.projects.IAMMember("invoking", {
 *     project: "my-project-name",
 *     role: "roles/run.invoker",
 *     member: pulumi.interpolate`serviceAccount:${account.email}`,
 * }, {
 *     dependsOn: [gcs_pubsub_publishing],
 * });
 * const event_receiving = new gcp.projects.IAMMember("event-receiving", {
 *     project: "my-project-name",
 *     role: "roles/eventarc.eventReceiver",
 *     member: pulumi.interpolate`serviceAccount:${account.email}`,
 * }, {
 *     dependsOn: [invoking],
 * });
 * const artifactregistry_reader = new gcp.projects.IAMMember("artifactregistry-reader", {
 *     project: "my-project-name",
 *     role: "roles/artifactregistry.reader",
 *     member: pulumi.interpolate`serviceAccount:${account.email}`,
 * }, {
 *     dependsOn: [event_receiving],
 * });
 * const _function = new gcp.cloudfunctionsv2.Function("function", {
 *     location: "us-central1",
 *     description: "a new function",
 *     buildConfig: {
 *         runtime: "nodejs12",
 *         entryPoint: "entryPoint",
 *         environmentVariables: {
 *             BUILD_CONFIG_TEST: "build_test",
 *         },
 *         source: {
 *             storageSource: {
 *                 bucket: source_bucket.name,
 *                 object: object.name,
 *             },
 *         },
 *     },
 *     serviceConfig: {
 *         maxInstanceCount: 3,
 *         minInstanceCount: 1,
 *         availableMemory: "256M",
 *         timeoutSeconds: 60,
 *         environmentVariables: {
 *             SERVICE_CONFIG_TEST: "config_test",
 *         },
 *         ingressSettings: "ALLOW_INTERNAL_ONLY",
 *         allTrafficOnLatestRevision: true,
 *         serviceAccountEmail: account.email,
 *     },
 *     eventTrigger: {
 *         triggerRegion: "us-central1",
 *         eventType: "google.cloud.storage.object.v1.finalized",
 *         retryPolicy: "RETRY_POLICY_RETRY",
 *         serviceAccountEmail: account.email,
 *         eventFilters: [{
 *             attribute: "bucket",
 *             value: trigger_bucket.name,
 *         }],
 *     },
 * }, {
 *     dependsOn: [
 *         event_receiving,
 *         artifactregistry_reader,
 *     ],
 * });
 * ```
 * ### Cloudfunctions2 Basic Auditlogs
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * // [START functions_v2_basic_auditlogs]
 * // This example follows the examples shown in this Google Cloud Community blog post
 * // https://medium.com/google-cloud/applying-a-path-pattern-when-filtering-in-eventarc-f06b937b4c34
 * // and the docs:
 * // https://cloud.google.com/eventarc/docs/path-patterns
 * const source_bucket = new gcp.storage.Bucket("source-bucket", {
 *     location: "US",
 *     uniformBucketLevelAccess: true,
 * });
 * const object = new gcp.storage.BucketObject("object", {
 *     bucket: source_bucket.name,
 *     source: new pulumi.asset.FileAsset("function-source.zip"),
 * });
 * // Add path to the zipped function source code
 * const account = new gcp.serviceaccount.Account("account", {
 *     accountId: "gcf-sa",
 *     displayName: "Test Service Account - used for both the cloud function and eventarc trigger in the test",
 * });
 * // Note: The right way of listening for Cloud Storage events is to use a Cloud Storage trigger.
 * // Here we use Audit Logs to monitor the bucket so path patterns can be used in the example of
 * // google_cloudfunctions2_function below (Audit Log events have path pattern support)
 * const audit_log_bucket = new gcp.storage.Bucket("audit-log-bucket", {
 *     location: "us-central1",
 *     uniformBucketLevelAccess: true,
 * });
 * // Permissions on the service account used by the function and Eventarc trigger
 * const invoking = new gcp.projects.IAMMember("invoking", {
 *     project: "my-project-name",
 *     role: "roles/run.invoker",
 *     member: pulumi.interpolate`serviceAccount:${account.email}`,
 * });
 * const event_receiving = new gcp.projects.IAMMember("event-receiving", {
 *     project: "my-project-name",
 *     role: "roles/eventarc.eventReceiver",
 *     member: pulumi.interpolate`serviceAccount:${account.email}`,
 * }, {
 *     dependsOn: [invoking],
 * });
 * const artifactregistry_reader = new gcp.projects.IAMMember("artifactregistry-reader", {
 *     project: "my-project-name",
 *     role: "roles/artifactregistry.reader",
 *     member: pulumi.interpolate`serviceAccount:${account.email}`,
 * }, {
 *     dependsOn: [event_receiving],
 * });
 * const _function = new gcp.cloudfunctionsv2.Function("function", {
 *     location: "us-central1",
 *     description: "a new function",
 *     buildConfig: {
 *         runtime: "nodejs12",
 *         entryPoint: "entryPoint",
 *         environmentVariables: {
 *             BUILD_CONFIG_TEST: "build_test",
 *         },
 *         source: {
 *             storageSource: {
 *                 bucket: source_bucket.name,
 *                 object: object.name,
 *             },
 *         },
 *     },
 *     serviceConfig: {
 *         maxInstanceCount: 3,
 *         minInstanceCount: 1,
 *         availableMemory: "256M",
 *         timeoutSeconds: 60,
 *         environmentVariables: {
 *             SERVICE_CONFIG_TEST: "config_test",
 *         },
 *         ingressSettings: "ALLOW_INTERNAL_ONLY",
 *         allTrafficOnLatestRevision: true,
 *         serviceAccountEmail: account.email,
 *     },
 *     eventTrigger: {
 *         triggerRegion: "us-central1",
 *         eventType: "google.cloud.audit.log.v1.written",
 *         retryPolicy: "RETRY_POLICY_RETRY",
 *         serviceAccountEmail: account.email,
 *         eventFilters: [
 *             {
 *                 attribute: "serviceName",
 *                 value: "storage.googleapis.com",
 *             },
 *             {
 *                 attribute: "methodName",
 *                 value: "storage.objects.create",
 *             },
 *             {
 *                 attribute: "resourceName",
 *                 value: pulumi.interpolate`/projects/_/buckets/${audit_log_bucket.name}/objects/*.txt`,
 *                 operator: "match-path-pattern",
 *             },
 *         ],
 *     },
 * }, {
 *     dependsOn: [
 *         event_receiving,
 *         artifactregistry_reader,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * function can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:cloudfunctionsv2/function:Function default projects/{{project}}/locations/{{location}}/functions/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudfunctionsv2/function:Function default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudfunctionsv2/function:Function default {{location}}/{{name}}
 * ```
 */
class Function extends pulumi.CustomResource {
    /**
     * Get an existing Function resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Function(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Function.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Function.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["buildConfig"] = state ? state.buildConfig : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["eventTrigger"] = state ? state.eventTrigger : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceConfig"] = state ? state.serviceConfig : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["buildConfig"] = args ? args.buildConfig : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eventTrigger"] = args ? args.eventTrigger : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceConfig"] = args ? args.serviceConfig : undefined;
            resourceInputs["environment"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Function.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Function = Function;
/** @internal */
Function.__pulumiType = 'gcp:cloudfunctionsv2/function:Function';
//# sourceMappingURL=function.js.map