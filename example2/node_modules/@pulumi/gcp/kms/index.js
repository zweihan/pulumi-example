"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretCiphertext = exports.Registry = exports.KeyRingImportJob = exports.KeyRingIAMPolicy = exports.KeyRingIAMMember = exports.KeyRingIAMBinding = exports.KeyRing = exports.getKMSSecretCiphertextOutput = exports.getKMSSecretCiphertext = exports.getKMSSecretAsymmetricOutput = exports.getKMSSecretAsymmetric = exports.getKMSSecretOutput = exports.getKMSSecret = exports.getKMSKeyRingOutput = exports.getKMSKeyRing = exports.getKMSCryptoKeyVersionOutput = exports.getKMSCryptoKeyVersion = exports.getKMSCryptoKeyOutput = exports.getKMSCryptoKey = exports.CryptoKeyVersion = exports.CryptoKeyIAMPolicy = exports.CryptoKeyIAMMember = exports.CryptoKeyIAMBinding = exports.CryptoKey = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.CryptoKey = null;
utilities.lazyLoad(exports, ["CryptoKey"], () => require("./cryptoKey"));
exports.CryptoKeyIAMBinding = null;
utilities.lazyLoad(exports, ["CryptoKeyIAMBinding"], () => require("./cryptoKeyIAMBinding"));
exports.CryptoKeyIAMMember = null;
utilities.lazyLoad(exports, ["CryptoKeyIAMMember"], () => require("./cryptoKeyIAMMember"));
exports.CryptoKeyIAMPolicy = null;
utilities.lazyLoad(exports, ["CryptoKeyIAMPolicy"], () => require("./cryptoKeyIAMPolicy"));
exports.CryptoKeyVersion = null;
utilities.lazyLoad(exports, ["CryptoKeyVersion"], () => require("./cryptoKeyVersion"));
exports.getKMSCryptoKey = null;
exports.getKMSCryptoKeyOutput = null;
utilities.lazyLoad(exports, ["getKMSCryptoKey", "getKMSCryptoKeyOutput"], () => require("./getKMSCryptoKey"));
exports.getKMSCryptoKeyVersion = null;
exports.getKMSCryptoKeyVersionOutput = null;
utilities.lazyLoad(exports, ["getKMSCryptoKeyVersion", "getKMSCryptoKeyVersionOutput"], () => require("./getKMSCryptoKeyVersion"));
exports.getKMSKeyRing = null;
exports.getKMSKeyRingOutput = null;
utilities.lazyLoad(exports, ["getKMSKeyRing", "getKMSKeyRingOutput"], () => require("./getKMSKeyRing"));
exports.getKMSSecret = null;
exports.getKMSSecretOutput = null;
utilities.lazyLoad(exports, ["getKMSSecret", "getKMSSecretOutput"], () => require("./getKMSSecret"));
exports.getKMSSecretAsymmetric = null;
exports.getKMSSecretAsymmetricOutput = null;
utilities.lazyLoad(exports, ["getKMSSecretAsymmetric", "getKMSSecretAsymmetricOutput"], () => require("./getKMSSecretAsymmetric"));
exports.getKMSSecretCiphertext = null;
exports.getKMSSecretCiphertextOutput = null;
utilities.lazyLoad(exports, ["getKMSSecretCiphertext", "getKMSSecretCiphertextOutput"], () => require("./getKMSSecretCiphertext"));
exports.KeyRing = null;
utilities.lazyLoad(exports, ["KeyRing"], () => require("./keyRing"));
exports.KeyRingIAMBinding = null;
utilities.lazyLoad(exports, ["KeyRingIAMBinding"], () => require("./keyRingIAMBinding"));
exports.KeyRingIAMMember = null;
utilities.lazyLoad(exports, ["KeyRingIAMMember"], () => require("./keyRingIAMMember"));
exports.KeyRingIAMPolicy = null;
utilities.lazyLoad(exports, ["KeyRingIAMPolicy"], () => require("./keyRingIAMPolicy"));
exports.KeyRingImportJob = null;
utilities.lazyLoad(exports, ["KeyRingImportJob"], () => require("./keyRingImportJob"));
exports.Registry = null;
utilities.lazyLoad(exports, ["Registry"], () => require("./registry"));
exports.SecretCiphertext = null;
utilities.lazyLoad(exports, ["SecretCiphertext"], () => require("./secretCiphertext"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:kms/cryptoKey:CryptoKey":
                return new exports.CryptoKey(name, undefined, { urn });
            case "gcp:kms/cryptoKeyIAMBinding:CryptoKeyIAMBinding":
                return new exports.CryptoKeyIAMBinding(name, undefined, { urn });
            case "gcp:kms/cryptoKeyIAMMember:CryptoKeyIAMMember":
                return new exports.CryptoKeyIAMMember(name, undefined, { urn });
            case "gcp:kms/cryptoKeyIAMPolicy:CryptoKeyIAMPolicy":
                return new exports.CryptoKeyIAMPolicy(name, undefined, { urn });
            case "gcp:kms/cryptoKeyVersion:CryptoKeyVersion":
                return new exports.CryptoKeyVersion(name, undefined, { urn });
            case "gcp:kms/keyRing:KeyRing":
                return new exports.KeyRing(name, undefined, { urn });
            case "gcp:kms/keyRingIAMBinding:KeyRingIAMBinding":
                return new exports.KeyRingIAMBinding(name, undefined, { urn });
            case "gcp:kms/keyRingIAMMember:KeyRingIAMMember":
                return new exports.KeyRingIAMMember(name, undefined, { urn });
            case "gcp:kms/keyRingIAMPolicy:KeyRingIAMPolicy":
                return new exports.KeyRingIAMPolicy(name, undefined, { urn });
            case "gcp:kms/keyRingImportJob:KeyRingImportJob":
                return new exports.KeyRingImportJob(name, undefined, { urn });
            case "gcp:kms/registry:Registry":
                return new exports.Registry(name, undefined, { urn });
            case "gcp:kms/secretCiphertext:SecretCiphertext":
                return new exports.SecretCiphertext(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKey", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKeyIAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKeyIAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKeyIAMPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/cryptoKeyVersion", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/keyRing", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/keyRingIAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/keyRingIAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/keyRingIAMPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/keyRingImportJob", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/registry", _module);
pulumi.runtime.registerResourceModule("gcp", "kms/secretCiphertext", _module);
//# sourceMappingURL=index.js.map