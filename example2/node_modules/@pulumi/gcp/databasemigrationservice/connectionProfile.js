"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionProfile = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 * ### Database Migration Service Connection Profile Cloudsql
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const project = gcp.organizations.getProject({});
 * const cloudsqldb = new gcp.sql.DatabaseInstance("cloudsqldb", {
 *     databaseVersion: "MYSQL_5_7",
 *     settings: {
 *         tier: "db-n1-standard-1",
 *         deletionProtectionEnabled: false,
 *     },
 *     deletionProtection: false,
 * });
 * const sqlClientCert = new gcp.sql.SslCert("sqlClientCert", {
 *     commonName: "my-cert",
 *     instance: cloudsqldb.name,
 * }, {
 *     dependsOn: [cloudsqldb],
 * });
 * const sqldbUser = new gcp.sql.User("sqldbUser", {
 *     instance: cloudsqldb.name,
 *     password: "my-password",
 * }, {
 *     dependsOn: [sqlClientCert],
 * });
 * const cloudsqlprofile = new gcp.databasemigrationservice.ConnectionProfile("cloudsqlprofile", {
 *     location: "us-central1",
 *     connectionProfileId: "my-fromprofileid",
 *     displayName: "my-fromprofileid_display",
 *     labels: {
 *         foo: "bar",
 *     },
 *     mysql: {
 *         host: cloudsqldb.ipAddresses.apply(ipAddresses => ipAddresses[0].ipAddress),
 *         port: 3306,
 *         username: sqldbUser.name,
 *         password: sqldbUser.password,
 *         ssl: {
 *             clientKey: sqlClientCert.privateKey,
 *             clientCertificate: sqlClientCert.cert,
 *             caCertificate: sqlClientCert.serverCaCert,
 *         },
 *         cloudSqlId: "my-database",
 *     },
 * }, {
 *     dependsOn: [sqldbUser],
 * });
 * const cloudsqlprofileDestination = new gcp.databasemigrationservice.ConnectionProfile("cloudsqlprofileDestination", {
 *     location: "us-central1",
 *     connectionProfileId: "my-toprofileid",
 *     displayName: "my-toprofileid_displayname",
 *     labels: {
 *         foo: "bar",
 *     },
 *     cloudsql: {
 *         settings: {
 *             databaseVersion: "MYSQL_5_7",
 *             userLabels: {
 *                 cloudfoo: "cloudbar",
 *             },
 *             tier: "db-n1-standard-1",
 *             storageAutoResizeLimit: "0",
 *             activationPolicy: "ALWAYS",
 *             ipConfig: {
 *                 enableIpv4: true,
 *                 requireSsl: true,
 *             },
 *             autoStorageIncrease: true,
 *             dataDiskType: "PD_HDD",
 *             dataDiskSizeGb: "11",
 *             zone: "us-central1-b",
 *             sourceId: project.then(project => `projects/${project.projectId}/locations/us-central1/connectionProfiles/my-fromprofileid`),
 *             rootPassword: "testpasscloudsql",
 *         },
 *     },
 * }, {
 *     dependsOn: [cloudsqlprofile],
 * });
 * ```
 * ### Database Migration Service Connection Profile Postgres
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const postgresqldb = new gcp.sql.DatabaseInstance("postgresqldb", {
 *     databaseVersion: "POSTGRES_12",
 *     settings: {
 *         tier: "db-custom-2-13312",
 *     },
 *     deletionProtection: false,
 * });
 * const sqlClientCert = new gcp.sql.SslCert("sqlClientCert", {
 *     commonName: "my-cert",
 *     instance: postgresqldb.name,
 * }, {
 *     dependsOn: [postgresqldb],
 * });
 * const sqldbUser = new gcp.sql.User("sqldbUser", {
 *     instance: postgresqldb.name,
 *     password: "my-password",
 * }, {
 *     dependsOn: [sqlClientCert],
 * });
 * const postgresprofile = new gcp.databasemigrationservice.ConnectionProfile("postgresprofile", {
 *     location: "us-central1",
 *     connectionProfileId: "my-profileid",
 *     displayName: "my-profileid_display",
 *     labels: {
 *         foo: "bar",
 *     },
 *     postgresql: {
 *         host: postgresqldb.ipAddresses.apply(ipAddresses => ipAddresses[0].ipAddress),
 *         port: 5432,
 *         username: sqldbUser.name,
 *         password: sqldbUser.password,
 *         ssl: {
 *             clientKey: sqlClientCert.privateKey,
 *             clientCertificate: sqlClientCert.cert,
 *             caCertificate: sqlClientCert.serverCaCert,
 *         },
 *         cloudSqlId: "my-database",
 *     },
 * }, {
 *     dependsOn: [sqldbUser],
 * });
 * ```
 *
 * ## Import
 *
 * ConnectionProfile can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:databasemigrationservice/connectionProfile:ConnectionProfile default projects/{{project}}/locations/{{location}}/connectionProfiles/{{connection_profile_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:databasemigrationservice/connectionProfile:ConnectionProfile default {{project}}/{{location}}/{{connection_profile_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:databasemigrationservice/connectionProfile:ConnectionProfile default {{location}}/{{connection_profile_id}}
 * ```
 */
class ConnectionProfile extends pulumi.CustomResource {
    /**
     * Get an existing ConnectionProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ConnectionProfile(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ConnectionProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectionProfile.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["alloydb"] = state ? state.alloydb : undefined;
            resourceInputs["cloudsql"] = state ? state.cloudsql : undefined;
            resourceInputs["connectionProfileId"] = state ? state.connectionProfileId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dbprovider"] = state ? state.dbprovider : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["errors"] = state ? state.errors : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mysql"] = state ? state.mysql : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["postgresql"] = state ? state.postgresql : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.connectionProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionProfileId'");
            }
            resourceInputs["alloydb"] = args ? args.alloydb : undefined;
            resourceInputs["cloudsql"] = args ? args.cloudsql : undefined;
            resourceInputs["connectionProfileId"] = args ? args.connectionProfileId : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mysql"] = args ? args.mysql : undefined;
            resourceInputs["postgresql"] = args ? args.postgresql : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dbprovider"] = undefined /*out*/;
            resourceInputs["errors"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectionProfile.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ConnectionProfile = ConnectionProfile;
/** @internal */
ConnectionProfile.__pulumiType = 'gcp:databasemigrationservice/connectionProfile:ConnectionProfile';
//# sourceMappingURL=connectionProfile.js.map