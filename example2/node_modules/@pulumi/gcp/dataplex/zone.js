"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Zone = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The Dataplex Zone resource
 *
 * ## Example Usage
 * ### Basic_zone
 * A basic example of a dataplex zone
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basic = new gcp.dataplex.Lake("basic", {
 *     location: "us-west1",
 *     description: "Lake for DCL",
 *     displayName: "Lake for DCL",
 *     labels: {
 *         "my-lake": "exists",
 *     },
 *     project: "my-project-name",
 * });
 * const primary = new gcp.dataplex.Zone("primary", {
 *     discoverySpec: {
 *         enabled: false,
 *     },
 *     lake: basic.name,
 *     location: "us-west1",
 *     resourceSpec: {
 *         locationType: "MULTI_REGION",
 *     },
 *     type: "RAW",
 *     description: "Zone for DCL",
 *     displayName: "Zone for DCL",
 *     labels: {},
 *     project: "my-project-name",
 * });
 * ```
 *
 * ## Import
 *
 * Zone can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:dataplex/zone:Zone default projects/{{project}}/locations/{{location}}/lakes/{{lake}}/zones/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:dataplex/zone:Zone default {{project}}/{{location}}/{{lake}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:dataplex/zone:Zone default {{location}}/{{lake}}/{{name}}
 * ```
 */
class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Zone(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Zone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Zone.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["assetStatuses"] = state ? state.assetStatuses : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["discoverySpec"] = state ? state.discoverySpec : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lake"] = state ? state.lake : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["resourceSpec"] = state ? state.resourceSpec : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.discoverySpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'discoverySpec'");
            }
            if ((!args || args.lake === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lake'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceSpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceSpec'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["discoverySpec"] = args ? args.discoverySpec : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["lake"] = args ? args.lake : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["resourceSpec"] = args ? args.resourceSpec : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["assetStatuses"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Zone.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Zone = Zone;
/** @internal */
Zone.__pulumiType = 'gcp:dataplex/zone:Zone';
//# sourceMappingURL=zone.js.map