import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * The Dataplex Lake resource
 *
 * ## Example Usage
 * ### Basic_lake
 * A basic example of a dataplex lake
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.dataplex.Lake("primary", {
 *     description: "Lake for DCL",
 *     displayName: "Lake for DCL",
 *     labels: {
 *         "my-lake": "exists",
 *     },
 *     location: "us-west1",
 *     project: "my-project-name",
 * });
 * ```
 *
 * ## Import
 *
 * Lake can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:dataplex/lake:Lake default projects/{{project}}/locations/{{location}}/lakes/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:dataplex/lake:Lake default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:dataplex/lake:Lake default {{location}}/{{name}}
 * ```
 */
export declare class Lake extends pulumi.CustomResource {
    /**
     * Get an existing Lake resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LakeState, opts?: pulumi.CustomResourceOptions): Lake;
    /**
     * Returns true if the given object is an instance of Lake.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Lake;
    /**
     * Output only. Aggregated status of the underlying assets of the lake.
     */
    readonly assetStatuses: pulumi.Output<outputs.dataplex.LakeAssetStatus[]>;
    /**
     * Output only. The time when the lake was created.
     */
    readonly createTime: pulumi.Output<string>;
    /**
     * Optional. Description of the lake.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Optional. User friendly display name.
     */
    readonly displayName: pulumi.Output<string | undefined>;
    /**
     * Optional. User-defined labels for the lake.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The location for the resource
     */
    readonly location: pulumi.Output<string>;
    /**
     * Optional. Settings to manage lake and Dataproc Metastore service instance association.
     */
    readonly metastore: pulumi.Output<outputs.dataplex.LakeMetastore | undefined>;
    /**
     * Output only. Metastore status of the lake.
     */
    readonly metastoreStatuses: pulumi.Output<outputs.dataplex.LakeMetastoreStatus[]>;
    /**
     * The name of the lake.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The project for the resource
     */
    readonly project: pulumi.Output<string>;
    /**
     * Output only. Service account associated with this lake. This service account must be authorized to access or operate on resources managed by the lake.
     */
    readonly serviceAccount: pulumi.Output<string>;
    /**
     * Output only. Current state of the lake. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
     */
    readonly state: pulumi.Output<string>;
    /**
     * Output only. System generated globally unique ID for the lake. This ID will be different if the lake is deleted and re-created with the same name.
     */
    readonly uid: pulumi.Output<string>;
    /**
     * Output only. The time when the lake was last updated.
     */
    readonly updateTime: pulumi.Output<string>;
    /**
     * Create a Lake resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LakeArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Lake resources.
 */
export interface LakeState {
    /**
     * Output only. Aggregated status of the underlying assets of the lake.
     */
    assetStatuses?: pulumi.Input<pulumi.Input<inputs.dataplex.LakeAssetStatus>[]>;
    /**
     * Output only. The time when the lake was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Optional. Description of the lake.
     */
    description?: pulumi.Input<string>;
    /**
     * Optional. User friendly display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Optional. User-defined labels for the lake.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The location for the resource
     */
    location?: pulumi.Input<string>;
    /**
     * Optional. Settings to manage lake and Dataproc Metastore service instance association.
     */
    metastore?: pulumi.Input<inputs.dataplex.LakeMetastore>;
    /**
     * Output only. Metastore status of the lake.
     */
    metastoreStatuses?: pulumi.Input<pulumi.Input<inputs.dataplex.LakeMetastoreStatus>[]>;
    /**
     * The name of the lake.
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * Output only. Service account associated with this lake. This service account must be authorized to access or operate on resources managed by the lake.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * Output only. Current state of the lake. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
     */
    state?: pulumi.Input<string>;
    /**
     * Output only. System generated globally unique ID for the lake. This ID will be different if the lake is deleted and re-created with the same name.
     */
    uid?: pulumi.Input<string>;
    /**
     * Output only. The time when the lake was last updated.
     */
    updateTime?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Lake resource.
 */
export interface LakeArgs {
    /**
     * Optional. Description of the lake.
     */
    description?: pulumi.Input<string>;
    /**
     * Optional. User friendly display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Optional. User-defined labels for the lake.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The location for the resource
     */
    location: pulumi.Input<string>;
    /**
     * Optional. Settings to manage lake and Dataproc Metastore service instance association.
     */
    metastore?: pulumi.Input<inputs.dataplex.LakeMetastore>;
    /**
     * The name of the lake.
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
}
