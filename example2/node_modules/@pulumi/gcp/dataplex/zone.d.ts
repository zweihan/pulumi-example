import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * The Dataplex Zone resource
 *
 * ## Example Usage
 * ### Basic_zone
 * A basic example of a dataplex zone
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basic = new gcp.dataplex.Lake("basic", {
 *     location: "us-west1",
 *     description: "Lake for DCL",
 *     displayName: "Lake for DCL",
 *     labels: {
 *         "my-lake": "exists",
 *     },
 *     project: "my-project-name",
 * });
 * const primary = new gcp.dataplex.Zone("primary", {
 *     discoverySpec: {
 *         enabled: false,
 *     },
 *     lake: basic.name,
 *     location: "us-west1",
 *     resourceSpec: {
 *         locationType: "MULTI_REGION",
 *     },
 *     type: "RAW",
 *     description: "Zone for DCL",
 *     displayName: "Zone for DCL",
 *     labels: {},
 *     project: "my-project-name",
 * });
 * ```
 *
 * ## Import
 *
 * Zone can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:dataplex/zone:Zone default projects/{{project}}/locations/{{location}}/lakes/{{lake}}/zones/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:dataplex/zone:Zone default {{project}}/{{location}}/{{lake}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:dataplex/zone:Zone default {{location}}/{{lake}}/{{name}}
 * ```
 */
export declare class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneState, opts?: pulumi.CustomResourceOptions): Zone;
    /**
     * Returns true if the given object is an instance of Zone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Zone;
    /**
     * Output only. Aggregated status of the underlying assets of the zone.
     */
    readonly assetStatuses: pulumi.Output<outputs.dataplex.ZoneAssetStatus[]>;
    /**
     * Output only. The time when the zone was created.
     */
    readonly createTime: pulumi.Output<string>;
    /**
     * Optional. Description of the zone.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Required. Specification of the discovery feature applied to data in this zone.
     */
    readonly discoverySpec: pulumi.Output<outputs.dataplex.ZoneDiscoverySpec>;
    /**
     * Optional. User friendly display name.
     */
    readonly displayName: pulumi.Output<string | undefined>;
    /**
     * Optional. User defined labels for the zone.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The lake for the resource
     */
    readonly lake: pulumi.Output<string>;
    /**
     * The location for the resource
     */
    readonly location: pulumi.Output<string>;
    /**
     * The name of the zone.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The project for the resource
     */
    readonly project: pulumi.Output<string>;
    /**
     * Required. Immutable. Specification of the resources that are referenced by the assets within this zone.
     */
    readonly resourceSpec: pulumi.Output<outputs.dataplex.ZoneResourceSpec>;
    /**
     * Output only. Current state of the zone. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
     */
    readonly state: pulumi.Output<string>;
    /**
     * Required. Immutable. The type of the zone. Possible values: TYPE_UNSPECIFIED, RAW, CURATED
     */
    readonly type: pulumi.Output<string>;
    /**
     * Output only. System generated globally unique ID for the zone. This ID will be different if the zone is deleted and re-created with the same name.
     */
    readonly uid: pulumi.Output<string>;
    /**
     * Output only. The time when the zone was last updated.
     */
    readonly updateTime: pulumi.Output<string>;
    /**
     * Create a Zone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Zone resources.
 */
export interface ZoneState {
    /**
     * Output only. Aggregated status of the underlying assets of the zone.
     */
    assetStatuses?: pulumi.Input<pulumi.Input<inputs.dataplex.ZoneAssetStatus>[]>;
    /**
     * Output only. The time when the zone was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Optional. Description of the zone.
     */
    description?: pulumi.Input<string>;
    /**
     * Required. Specification of the discovery feature applied to data in this zone.
     */
    discoverySpec?: pulumi.Input<inputs.dataplex.ZoneDiscoverySpec>;
    /**
     * Optional. User friendly display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Optional. User defined labels for the zone.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The lake for the resource
     */
    lake?: pulumi.Input<string>;
    /**
     * The location for the resource
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the zone.
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * Required. Immutable. Specification of the resources that are referenced by the assets within this zone.
     */
    resourceSpec?: pulumi.Input<inputs.dataplex.ZoneResourceSpec>;
    /**
     * Output only. Current state of the zone. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
     */
    state?: pulumi.Input<string>;
    /**
     * Required. Immutable. The type of the zone. Possible values: TYPE_UNSPECIFIED, RAW, CURATED
     */
    type?: pulumi.Input<string>;
    /**
     * Output only. System generated globally unique ID for the zone. This ID will be different if the zone is deleted and re-created with the same name.
     */
    uid?: pulumi.Input<string>;
    /**
     * Output only. The time when the zone was last updated.
     */
    updateTime?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Zone resource.
 */
export interface ZoneArgs {
    /**
     * Optional. Description of the zone.
     */
    description?: pulumi.Input<string>;
    /**
     * Required. Specification of the discovery feature applied to data in this zone.
     */
    discoverySpec: pulumi.Input<inputs.dataplex.ZoneDiscoverySpec>;
    /**
     * Optional. User friendly display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Optional. User defined labels for the zone.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The lake for the resource
     */
    lake: pulumi.Input<string>;
    /**
     * The location for the resource
     */
    location: pulumi.Input<string>;
    /**
     * The name of the zone.
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project?: pulumi.Input<string>;
    /**
     * Required. Immutable. Specification of the resources that are referenced by the assets within this zone.
     */
    resourceSpec: pulumi.Input<inputs.dataplex.ZoneResourceSpec>;
    /**
     * Required. Immutable. The type of the zone. Possible values: TYPE_UNSPECIFIED, RAW, CURATED
     */
    type: pulumi.Input<string>;
}
