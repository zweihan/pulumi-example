"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRegistryImageOutput = exports.getRegistryImage = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * This data source fetches the project name, and provides the appropriate URLs to use for container registry for this project.
 *
 * The URLs are computed entirely offline - as long as the project exists, they will be valid, but this data source does not contact Google Container Registry (GCR) at any point.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const debian = gcp.container.getRegistryImage({
 *     name: "debian",
 * });
 * export const gcrLocation = debian.then(debian => debian.imageUrl);
 * ```
 */
function getRegistryImage(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:container/getRegistryImage:getRegistryImage", {
        "digest": args.digest,
        "name": args.name,
        "project": args.project,
        "region": args.region,
        "tag": args.tag,
    }, opts);
}
exports.getRegistryImage = getRegistryImage;
/**
 * This data source fetches the project name, and provides the appropriate URLs to use for container registry for this project.
 *
 * The URLs are computed entirely offline - as long as the project exists, they will be valid, but this data source does not contact Google Container Registry (GCR) at any point.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const debian = gcp.container.getRegistryImage({
 *     name: "debian",
 * });
 * export const gcrLocation = debian.then(debian => debian.imageUrl);
 * ```
 */
function getRegistryImageOutput(args, opts) {
    return pulumi.output(args).apply((a) => getRegistryImage(a, opts));
}
exports.getRegistryImageOutput = getRegistryImageOutput;
//# sourceMappingURL=getRegistryImage.js.map