import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * ## Example Usage
 * ### Network Services Grpc Route Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.networkservices.GrpcRoute("default", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 *     hostnames: ["example"],
 *     rules: [{
 *         matches: [{
 *             headers: [{
 *                 key: "key",
 *                 value: "value",
 *             }],
 *         }],
 *         action: {
 *             retryPolicy: {
 *                 retryConditions: ["cancelled"],
 *                 numRetries: 1,
 *             },
 *         },
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Network Services Grpc Route Matches And Actions
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.networkservices.GrpcRoute("default", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 *     hostnames: ["example"],
 *     rules: [{
 *         matches: [
 *             {
 *                 headers: [{
 *                     key: "key",
 *                     value: "value",
 *                 }],
 *             },
 *             {
 *                 headers: [{
 *                     key: "key",
 *                     value: "value",
 *                 }],
 *                 method: {
 *                     grpcService: "foo",
 *                     grpcMethod: "bar",
 *                     caseSensitive: true,
 *                 },
 *             },
 *         ],
 *         action: {
 *             faultInjectionPolicy: {
 *                 delay: {
 *                     fixedDelay: "1s",
 *                     percentage: 1,
 *                 },
 *                 abort: {
 *                     httpStatus: 500,
 *                     percentage: 1,
 *                 },
 *             },
 *             retryPolicy: {
 *                 retryConditions: ["cancelled"],
 *                 numRetries: 1,
 *             },
 *         },
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Network Services Grpc Route Actions
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.networkservices.GrpcRoute("default", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 *     hostnames: ["example"],
 *     rules: [{
 *         action: {
 *             faultInjectionPolicy: {
 *                 delay: {
 *                     fixedDelay: "1s",
 *                     percentage: 1,
 *                 },
 *                 abort: {
 *                     httpStatus: 500,
 *                     percentage: 1,
 *                 },
 *             },
 *             retryPolicy: {
 *                 retryConditions: ["cancelled"],
 *                 numRetries: 1,
 *             },
 *         },
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * GrpcRoute can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:networkservices/grpcRoute:GrpcRoute default projects/{{project}}/locations/global/grpcRoutes/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:networkservices/grpcRoute:GrpcRoute default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:networkservices/grpcRoute:GrpcRoute default {{name}}
 * ```
 */
export declare class GrpcRoute extends pulumi.CustomResource {
    /**
     * Get an existing GrpcRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GrpcRouteState, opts?: pulumi.CustomResourceOptions): GrpcRoute;
    /**
     * Returns true if the given object is an instance of GrpcRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is GrpcRoute;
    /**
     * Time the GrpcRoute was created in UTC.
     */
    readonly createTime: pulumi.Output<string>;
    /**
     * A free-text description of the resource. Max length 1024 characters.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * List of gateways this GrpcRoute is attached to, as one of the routing rules to route the requests served by the gateway.
     */
    readonly gateways: pulumi.Output<string[] | undefined>;
    /**
     * Required. Service hostnames with an optional port for which this route describes traffic.
     */
    readonly hostnames: pulumi.Output<string[]>;
    /**
     * Set of label tags associated with the GrpcRoute resource.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * List of meshes this GrpcRoute is attached to, as one of the routing rules to route the requests served by the mesh.
     */
    readonly meshes: pulumi.Output<string[] | undefined>;
    /**
     * Name of the GrpcRoute resource.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * Rules that define how traffic is routed and handled.
     * Structure is documented below.
     */
    readonly rules: pulumi.Output<outputs.networkservices.GrpcRouteRule[]>;
    /**
     * Server-defined URL of this resource.
     */
    readonly selfLink: pulumi.Output<string>;
    /**
     * Time the GrpcRoute was updated in UTC.
     */
    readonly updateTime: pulumi.Output<string>;
    /**
     * Create a GrpcRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GrpcRouteArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering GrpcRoute resources.
 */
export interface GrpcRouteState {
    /**
     * Time the GrpcRoute was created in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * A free-text description of the resource. Max length 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * List of gateways this GrpcRoute is attached to, as one of the routing rules to route the requests served by the gateway.
     */
    gateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required. Service hostnames with an optional port for which this route describes traffic.
     */
    hostnames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of label tags associated with the GrpcRoute resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * List of meshes this GrpcRoute is attached to, as one of the routing rules to route the requests served by the mesh.
     */
    meshes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the GrpcRoute resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Rules that define how traffic is routed and handled.
     * Structure is documented below.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.networkservices.GrpcRouteRule>[]>;
    /**
     * Server-defined URL of this resource.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * Time the GrpcRoute was updated in UTC.
     */
    updateTime?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a GrpcRoute resource.
 */
export interface GrpcRouteArgs {
    /**
     * A free-text description of the resource. Max length 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * List of gateways this GrpcRoute is attached to, as one of the routing rules to route the requests served by the gateway.
     */
    gateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required. Service hostnames with an optional port for which this route describes traffic.
     */
    hostnames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of label tags associated with the GrpcRoute resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * List of meshes this GrpcRoute is attached to, as one of the routing rules to route the requests served by the mesh.
     */
    meshes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the GrpcRoute resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Rules that define how traffic is routed and handled.
     * Structure is documented below.
     */
    rules: pulumi.Input<pulumi.Input<inputs.networkservices.GrpcRouteRule>[]>;
}
