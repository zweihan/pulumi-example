"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcRoute = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 * ### Network Services Grpc Route Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.networkservices.GrpcRoute("default", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 *     hostnames: ["example"],
 *     rules: [{
 *         matches: [{
 *             headers: [{
 *                 key: "key",
 *                 value: "value",
 *             }],
 *         }],
 *         action: {
 *             retryPolicy: {
 *                 retryConditions: ["cancelled"],
 *                 numRetries: 1,
 *             },
 *         },
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Network Services Grpc Route Matches And Actions
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.networkservices.GrpcRoute("default", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 *     hostnames: ["example"],
 *     rules: [{
 *         matches: [
 *             {
 *                 headers: [{
 *                     key: "key",
 *                     value: "value",
 *                 }],
 *             },
 *             {
 *                 headers: [{
 *                     key: "key",
 *                     value: "value",
 *                 }],
 *                 method: {
 *                     grpcService: "foo",
 *                     grpcMethod: "bar",
 *                     caseSensitive: true,
 *                 },
 *             },
 *         ],
 *         action: {
 *             faultInjectionPolicy: {
 *                 delay: {
 *                     fixedDelay: "1s",
 *                     percentage: 1,
 *                 },
 *                 abort: {
 *                     httpStatus: 500,
 *                     percentage: 1,
 *                 },
 *             },
 *             retryPolicy: {
 *                 retryConditions: ["cancelled"],
 *                 numRetries: 1,
 *             },
 *         },
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Network Services Grpc Route Actions
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.networkservices.GrpcRoute("default", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "my description",
 *     hostnames: ["example"],
 *     rules: [{
 *         action: {
 *             faultInjectionPolicy: {
 *                 delay: {
 *                     fixedDelay: "1s",
 *                     percentage: 1,
 *                 },
 *                 abort: {
 *                     httpStatus: 500,
 *                     percentage: 1,
 *                 },
 *             },
 *             retryPolicy: {
 *                 retryConditions: ["cancelled"],
 *                 numRetries: 1,
 *             },
 *         },
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * GrpcRoute can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:networkservices/grpcRoute:GrpcRoute default projects/{{project}}/locations/global/grpcRoutes/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:networkservices/grpcRoute:GrpcRoute default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:networkservices/grpcRoute:GrpcRoute default {{name}}
 * ```
 */
class GrpcRoute extends pulumi.CustomResource {
    /**
     * Get an existing GrpcRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GrpcRoute(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GrpcRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GrpcRoute.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["gateways"] = state ? state.gateways : undefined;
            resourceInputs["hostnames"] = state ? state.hostnames : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["meshes"] = state ? state.meshes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.hostnames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostnames'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gateways"] = args ? args.gateways : undefined;
            resourceInputs["hostnames"] = args ? args.hostnames : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["meshes"] = args ? args.meshes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GrpcRoute.__pulumiType, name, resourceInputs, opts);
    }
}
exports.GrpcRoute = GrpcRoute;
/** @internal */
GrpcRoute.__pulumiType = 'gcp:networkservices/grpcRoute:GrpcRoute';
//# sourceMappingURL=grpcRoute.js.map