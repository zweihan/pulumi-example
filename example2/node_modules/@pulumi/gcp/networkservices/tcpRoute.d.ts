import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * ## Example Usage
 *
 * ## Import
 *
 * TcpRoute can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:networkservices/tcpRoute:TcpRoute default projects/{{project}}/locations/global/tcpRoutes/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:networkservices/tcpRoute:TcpRoute default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:networkservices/tcpRoute:TcpRoute default {{name}}
 * ```
 */
export declare class TcpRoute extends pulumi.CustomResource {
    /**
     * Get an existing TcpRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TcpRouteState, opts?: pulumi.CustomResourceOptions): TcpRoute;
    /**
     * Returns true if the given object is an instance of TcpRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is TcpRoute;
    /**
     * Time the TcpRoute was created in UTC.
     */
    readonly createTime: pulumi.Output<string>;
    /**
     * A free-text description of the resource. Max length 1024 characters.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
     * Each gateway reference should match the pattern: projects/*&#47;locations/global/gateways/<gateway_name>
     */
    readonly gateways: pulumi.Output<string[] | undefined>;
    /**
     * Set of label tags associated with the TcpRoute resource.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
     * Each mesh reference should match the pattern: projects/*&#47;locations/global/meshes/<mesh_name>
     * The attached Mesh should be of a type SIDECAR
     */
    readonly meshes: pulumi.Output<string[] | undefined>;
    /**
     * Name of the TcpRoute resource.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * Rules that define how traffic is routed and handled. At least one RouteRule must be supplied.
     * If there are multiple rules then the action taken will be the first rule to match.
     * Structure is documented below.
     */
    readonly rules: pulumi.Output<outputs.networkservices.TcpRouteRule[]>;
    /**
     * Server-defined URL of this resource.
     */
    readonly selfLink: pulumi.Output<string>;
    /**
     * Time the TcpRoute was updated in UTC.
     */
    readonly updateTime: pulumi.Output<string>;
    /**
     * Create a TcpRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TcpRouteArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering TcpRoute resources.
 */
export interface TcpRouteState {
    /**
     * Time the TcpRoute was created in UTC.
     */
    createTime?: pulumi.Input<string>;
    /**
     * A free-text description of the resource. Max length 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
     * Each gateway reference should match the pattern: projects/*&#47;locations/global/gateways/<gateway_name>
     */
    gateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of label tags associated with the TcpRoute resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
     * Each mesh reference should match the pattern: projects/*&#47;locations/global/meshes/<mesh_name>
     * The attached Mesh should be of a type SIDECAR
     */
    meshes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the TcpRoute resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Rules that define how traffic is routed and handled. At least one RouteRule must be supplied.
     * If there are multiple rules then the action taken will be the first rule to match.
     * Structure is documented below.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.networkservices.TcpRouteRule>[]>;
    /**
     * Server-defined URL of this resource.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * Time the TcpRoute was updated in UTC.
     */
    updateTime?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a TcpRoute resource.
 */
export interface TcpRouteArgs {
    /**
     * A free-text description of the resource. Max length 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
     * Each gateway reference should match the pattern: projects/*&#47;locations/global/gateways/<gateway_name>
     */
    gateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of label tags associated with the TcpRoute resource.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
     * Each mesh reference should match the pattern: projects/*&#47;locations/global/meshes/<mesh_name>
     * The attached Mesh should be of a type SIDECAR
     */
    meshes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the TcpRoute resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Rules that define how traffic is routed and handled. At least one RouteRule must be supplied.
     * If there are multiple rules then the action taken will be the first rule to match.
     * Structure is documented below.
     */
    rules: pulumi.Input<pulumi.Input<inputs.networkservices.TcpRouteRule>[]>;
}
