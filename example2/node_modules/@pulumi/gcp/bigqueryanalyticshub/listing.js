"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Listing = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Bigquery Analytics Hub data exchange listing
 *
 * To get more information about Listing, see:
 *
 * * [API documentation](https://cloud.google.com/bigquery/docs/reference/analytics-hub/rest/v1/projects.locations.dataExchanges.listings)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/bigquery/docs/analytics-hub-introduction)
 *
 * ## Example Usage
 * ### Bigquery Analyticshub Listing Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const listingDataExchange = new gcp.bigqueryanalyticshub.DataExchange("listingDataExchange", {
 *     location: "US",
 *     dataExchangeId: "my_data_exchange",
 *     displayName: "my_data_exchange",
 *     description: "example data exchange",
 * });
 * const listingDataset = new gcp.bigquery.Dataset("listingDataset", {
 *     datasetId: "my_listing",
 *     friendlyName: "my_listing",
 *     description: "example data exchange",
 *     location: "US",
 * });
 * const listingListing = new gcp.bigqueryanalyticshub.Listing("listingListing", {
 *     location: "US",
 *     dataExchangeId: listingDataExchange.dataExchangeId,
 *     listingId: "my_listing",
 *     displayName: "my_listing",
 *     description: "example data exchange",
 *     bigqueryDataset: {
 *         dataset: listingDataset.id,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Listing can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:bigqueryanalyticshub/listing:Listing default projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}/listings/{{listing_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:bigqueryanalyticshub/listing:Listing default {{project}}/{{location}}/{{data_exchange_id}}/{{listing_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:bigqueryanalyticshub/listing:Listing default {{location}}/{{data_exchange_id}}/{{listing_id}}
 * ```
 */
class Listing extends pulumi.CustomResource {
    /**
     * Get an existing Listing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Listing(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Listing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Listing.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["bigqueryDataset"] = state ? state.bigqueryDataset : undefined;
            resourceInputs["categories"] = state ? state.categories : undefined;
            resourceInputs["dataExchangeId"] = state ? state.dataExchangeId : undefined;
            resourceInputs["dataProvider"] = state ? state.dataProvider : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["documentation"] = state ? state.documentation : undefined;
            resourceInputs["icon"] = state ? state.icon : undefined;
            resourceInputs["listingId"] = state ? state.listingId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primaryContact"] = state ? state.primaryContact : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["publisher"] = state ? state.publisher : undefined;
            resourceInputs["requestAccess"] = state ? state.requestAccess : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.bigqueryDataset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bigqueryDataset'");
            }
            if ((!args || args.dataExchangeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataExchangeId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.listingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listingId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["bigqueryDataset"] = args ? args.bigqueryDataset : undefined;
            resourceInputs["categories"] = args ? args.categories : undefined;
            resourceInputs["dataExchangeId"] = args ? args.dataExchangeId : undefined;
            resourceInputs["dataProvider"] = args ? args.dataProvider : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["documentation"] = args ? args.documentation : undefined;
            resourceInputs["icon"] = args ? args.icon : undefined;
            resourceInputs["listingId"] = args ? args.listingId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["primaryContact"] = args ? args.primaryContact : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["publisher"] = args ? args.publisher : undefined;
            resourceInputs["requestAccess"] = args ? args.requestAccess : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Listing.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Listing = Listing;
/** @internal */
Listing.__pulumiType = 'gcp:bigqueryanalyticshub/listing:Listing';
//# sourceMappingURL=listing.js.map