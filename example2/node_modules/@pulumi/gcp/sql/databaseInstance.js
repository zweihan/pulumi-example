"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseInstance = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates a new Google SQL Database Instance. For more information, see the [official documentation](https://cloud.google.com/sql/),
 * or the [JSON API](https://cloud.google.com/sql/docs/admin-api/v1beta4/instances).
 *
 * > **NOTE on `gcp.sql.DatabaseInstance`:** - Second-generation instances include a
 * default 'root'@'%' user with no password. This user will be deleted by the provider on
 * instance creation. You should use `gcp.sql.User` to define a custom user with
 * a restricted host and strong password.
 *
 * > **Note**: On newer versions of the provider, you must explicitly set `deletion_protection=false`
 * (and run `pulumi update` to write the field to state) in order to destroy an instance.
 * It is recommended to not set this field (or set it to true) until you're ready to destroy the instance and its databases.
 *
 * ## Example Usage
 * ### SQL Second Generation Instance
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const main = new gcp.sql.DatabaseInstance("main", {
 *     databaseVersion: "POSTGRES_14",
 *     region: "us-central1",
 *     settings: {
 *         tier: "db-f1-micro",
 *     },
 * });
 * ```
 * ### Private IP Instance
 * > **NOTE:** For private IP instance setup, note that the `gcp.sql.DatabaseInstance` does not actually interpolate values from `gcp.servicenetworking.Connection`. You must explicitly add a `dependsOn`reference as shown below.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as random from "@pulumi/random";
 *
 * const privateNetwork = new gcp.compute.Network("privateNetwork", {}, {
 *     provider: google_beta,
 * });
 * const privateIpAddress = new gcp.compute.GlobalAddress("privateIpAddress", {
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 16,
 *     network: privateNetwork.id,
 * }, {
 *     provider: google_beta,
 * });
 * const privateVpcConnection = new gcp.servicenetworking.Connection("privateVpcConnection", {
 *     network: privateNetwork.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [privateIpAddress.name],
 * }, {
 *     provider: google_beta,
 * });
 * const dbNameSuffix = new random.RandomId("dbNameSuffix", {byteLength: 4});
 * const instance = new gcp.sql.DatabaseInstance("instance", {
 *     region: "us-central1",
 *     databaseVersion: "MYSQL_5_7",
 *     settings: {
 *         tier: "db-f1-micro",
 *         ipConfiguration: {
 *             ipv4Enabled: false,
 *             privateNetwork: privateNetwork.id,
 *             enablePrivatePathForGoogleCloudServices: true,
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 *     dependsOn: [privateVpcConnection],
 * });
 * ```
 *
 * ## Import
 *
 * Database instances can be imported using one of any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:sql/databaseInstance:DatabaseInstance main projects/{{project}}/instances/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:sql/databaseInstance:DatabaseInstance main {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:sql/databaseInstance:DatabaseInstance main {{name}}
 * ```
 *
 *  config and set on the server. When importing, double-check that your config has all the fields set that you expect- just seeing no diff isn't sufficient to know that your config could reproduce the imported resource.
 */
class DatabaseInstance extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DatabaseInstance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DatabaseInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseInstance.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["availableMaintenanceVersions"] = state ? state.availableMaintenanceVersions : undefined;
            resourceInputs["clone"] = state ? state.clone : undefined;
            resourceInputs["connectionName"] = state ? state.connectionName : undefined;
            resourceInputs["databaseVersion"] = state ? state.databaseVersion : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["encryptionKeyName"] = state ? state.encryptionKeyName : undefined;
            resourceInputs["firstIpAddress"] = state ? state.firstIpAddress : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["ipAddresses"] = state ? state.ipAddresses : undefined;
            resourceInputs["maintenanceVersion"] = state ? state.maintenanceVersion : undefined;
            resourceInputs["masterInstanceName"] = state ? state.masterInstanceName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["publicIpAddress"] = state ? state.publicIpAddress : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["replicaConfiguration"] = state ? state.replicaConfiguration : undefined;
            resourceInputs["restoreBackupContext"] = state ? state.restoreBackupContext : undefined;
            resourceInputs["rootPassword"] = state ? state.rootPassword : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["serverCaCerts"] = state ? state.serverCaCerts : undefined;
            resourceInputs["serviceAccountEmailAddress"] = state ? state.serviceAccountEmailAddress : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.databaseVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseVersion'");
            }
            resourceInputs["clone"] = args ? args.clone : undefined;
            resourceInputs["databaseVersion"] = args ? args.databaseVersion : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["encryptionKeyName"] = args ? args.encryptionKeyName : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["maintenanceVersion"] = args ? args.maintenanceVersion : undefined;
            resourceInputs["masterInstanceName"] = args ? args.masterInstanceName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["replicaConfiguration"] = args ? args.replicaConfiguration : undefined;
            resourceInputs["restoreBackupContext"] = args ? args.restoreBackupContext : undefined;
            resourceInputs["rootPassword"] = (args === null || args === void 0 ? void 0 : args.rootPassword) ? pulumi.secret(args.rootPassword) : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["availableMaintenanceVersions"] = undefined /*out*/;
            resourceInputs["connectionName"] = undefined /*out*/;
            resourceInputs["firstIpAddress"] = undefined /*out*/;
            resourceInputs["ipAddresses"] = undefined /*out*/;
            resourceInputs["privateIpAddress"] = undefined /*out*/;
            resourceInputs["publicIpAddress"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["serverCaCerts"] = undefined /*out*/;
            resourceInputs["serviceAccountEmailAddress"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["rootPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DatabaseInstance.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DatabaseInstance = DatabaseInstance;
/** @internal */
DatabaseInstance.__pulumiType = 'gcp:sql/databaseInstance:DatabaseInstance';
//# sourceMappingURL=databaseInstance.js.map