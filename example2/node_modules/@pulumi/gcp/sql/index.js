"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = exports.SslCert = exports.SourceRepresentationInstance = exports.getTiersOutput = exports.getTiers = exports.getDatabasesOutput = exports.getDatabases = exports.getDatabaseInstancesOutput = exports.getDatabaseInstances = exports.getDatabaseInstanceOutput = exports.getDatabaseInstance = exports.getDatabaseOutput = exports.getDatabase = exports.getCaCertsOutput = exports.getCaCerts = exports.getBackupRunOutput = exports.getBackupRun = exports.DatabaseInstance = exports.Database = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Database = null;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));
exports.DatabaseInstance = null;
utilities.lazyLoad(exports, ["DatabaseInstance"], () => require("./databaseInstance"));
exports.getBackupRun = null;
exports.getBackupRunOutput = null;
utilities.lazyLoad(exports, ["getBackupRun", "getBackupRunOutput"], () => require("./getBackupRun"));
exports.getCaCerts = null;
exports.getCaCertsOutput = null;
utilities.lazyLoad(exports, ["getCaCerts", "getCaCertsOutput"], () => require("./getCaCerts"));
exports.getDatabase = null;
exports.getDatabaseOutput = null;
utilities.lazyLoad(exports, ["getDatabase", "getDatabaseOutput"], () => require("./getDatabase"));
exports.getDatabaseInstance = null;
exports.getDatabaseInstanceOutput = null;
utilities.lazyLoad(exports, ["getDatabaseInstance", "getDatabaseInstanceOutput"], () => require("./getDatabaseInstance"));
exports.getDatabaseInstances = null;
exports.getDatabaseInstancesOutput = null;
utilities.lazyLoad(exports, ["getDatabaseInstances", "getDatabaseInstancesOutput"], () => require("./getDatabaseInstances"));
exports.getDatabases = null;
exports.getDatabasesOutput = null;
utilities.lazyLoad(exports, ["getDatabases", "getDatabasesOutput"], () => require("./getDatabases"));
exports.getTiers = null;
exports.getTiersOutput = null;
utilities.lazyLoad(exports, ["getTiers", "getTiersOutput"], () => require("./getTiers"));
exports.SourceRepresentationInstance = null;
utilities.lazyLoad(exports, ["SourceRepresentationInstance"], () => require("./sourceRepresentationInstance"));
exports.SslCert = null;
utilities.lazyLoad(exports, ["SslCert"], () => require("./sslCert"));
exports.User = null;
utilities.lazyLoad(exports, ["User"], () => require("./user"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:sql/database:Database":
                return new exports.Database(name, undefined, { urn });
            case "gcp:sql/databaseInstance:DatabaseInstance":
                return new exports.DatabaseInstance(name, undefined, { urn });
            case "gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance":
                return new exports.SourceRepresentationInstance(name, undefined, { urn });
            case "gcp:sql/sslCert:SslCert":
                return new exports.SslCert(name, undefined, { urn });
            case "gcp:sql/user:User":
                return new exports.User(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "sql/database", _module);
pulumi.runtime.registerResourceModule("gcp", "sql/databaseInstance", _module);
pulumi.runtime.registerResourceModule("gcp", "sql/sourceRepresentationInstance", _module);
pulumi.runtime.registerResourceModule("gcp", "sql/sslCert", _module);
pulumi.runtime.registerResourceModule("gcp", "sql/user", _module);
//# sourceMappingURL=index.js.map