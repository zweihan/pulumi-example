"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Intent = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Represents a Dialogflow intent. Intents convert a number of user expressions or patterns into an action. An action
 * is an extraction of a user command or sentence semantics.
 *
 * To get more information about Intent, see:
 *
 * * [API documentation](https://cloud.google.com/dialogflow/docs/reference/rest/v2/projects.agent.intents)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/dialogflow/docs/)
 *
 * ## Example Usage
 * ### Dialogflow Intent Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basicAgent = new gcp.diagflow.Agent("basicAgent", {
 *     displayName: "example_agent",
 *     defaultLanguageCode: "en",
 *     timeZone: "America/New_York",
 * });
 * const basicIntent = new gcp.diagflow.Intent("basicIntent", {displayName: "basic-intent"}, {
 *     dependsOn: [basicAgent],
 * });
 * ```
 * ### Dialogflow Intent Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const agentProjectProject = new gcp.organizations.Project("agentProjectProject", {
 *     projectId: "my-project",
 *     orgId: "123456789",
 * });
 * const agentProjectService = new gcp.projects.Service("agentProjectService", {
 *     project: agentProjectProject.projectId,
 *     service: "dialogflow.googleapis.com",
 *     disableDependentServices: false,
 * });
 * const dialogflowServiceAccount = new gcp.serviceaccount.Account("dialogflowServiceAccount", {accountId: "my-account"});
 * const agentCreate = new gcp.projects.IAMMember("agentCreate", {
 *     project: agentProjectService.project,
 *     role: "roles/dialogflow.admin",
 *     member: pulumi.interpolate`serviceAccount:${dialogflowServiceAccount.email}`,
 * });
 * const basicAgent = new gcp.diagflow.Agent("basicAgent", {
 *     project: agentProjectProject.projectId,
 *     displayName: "example_agent",
 *     defaultLanguageCode: "en",
 *     timeZone: "America/New_York",
 * });
 * const fullIntent = new gcp.diagflow.Intent("fullIntent", {
 *     project: agentProjectProject.projectId,
 *     displayName: "full-intent",
 *     webhookState: "WEBHOOK_STATE_ENABLED",
 *     priority: 1,
 *     isFallback: false,
 *     mlDisabled: true,
 *     action: "some_action",
 *     resetContexts: true,
 *     inputContextNames: [pulumi.interpolate`projects/${agentProjectProject.projectId}/agent/sessions/-/contexts/some_id`],
 *     events: ["some_event"],
 *     defaultResponsePlatforms: [
 *         "FACEBOOK",
 *         "SLACK",
 *     ],
 * }, {
 *     dependsOn: [basicAgent],
 * });
 * ```
 *
 * ## Import
 *
 * Intent can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:diagflow/intent:Intent default {{name}}
 * ```
 */
class Intent extends pulumi.CustomResource {
    /**
     * Get an existing Intent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Intent(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Intent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Intent.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["defaultResponsePlatforms"] = state ? state.defaultResponsePlatforms : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["events"] = state ? state.events : undefined;
            resourceInputs["followupIntentInfos"] = state ? state.followupIntentInfos : undefined;
            resourceInputs["inputContextNames"] = state ? state.inputContextNames : undefined;
            resourceInputs["isFallback"] = state ? state.isFallback : undefined;
            resourceInputs["mlDisabled"] = state ? state.mlDisabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentFollowupIntentName"] = state ? state.parentFollowupIntentName : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["resetContexts"] = state ? state.resetContexts : undefined;
            resourceInputs["rootFollowupIntentName"] = state ? state.rootFollowupIntentName : undefined;
            resourceInputs["webhookState"] = state ? state.webhookState : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["defaultResponsePlatforms"] = args ? args.defaultResponsePlatforms : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["events"] = args ? args.events : undefined;
            resourceInputs["inputContextNames"] = args ? args.inputContextNames : undefined;
            resourceInputs["isFallback"] = args ? args.isFallback : undefined;
            resourceInputs["mlDisabled"] = args ? args.mlDisabled : undefined;
            resourceInputs["parentFollowupIntentName"] = args ? args.parentFollowupIntentName : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["resetContexts"] = args ? args.resetContexts : undefined;
            resourceInputs["webhookState"] = args ? args.webhookState : undefined;
            resourceInputs["followupIntentInfos"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["rootFollowupIntentName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Intent.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Intent = Intent;
/** @internal */
Intent.__pulumiType = 'gcp:diagflow/intent:Intent';
//# sourceMappingURL=intent.js.map