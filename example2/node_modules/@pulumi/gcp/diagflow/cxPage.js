"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CxPage = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages.
 *
 * To get more information about Page, see:
 *
 * * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows.pages)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
 *
 * ## Example Usage
 * ### Dialogflowcx Page Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const agent = new gcp.diagflow.CxAgent("agent", {
 *     displayName: "dialogflowcx-agent",
 *     location: "global",
 *     defaultLanguageCode: "en",
 *     supportedLanguageCodes: [
 *         "fr",
 *         "de",
 *         "es",
 *     ],
 *     timeZone: "America/New_York",
 *     description: "Example description.",
 *     avatarUri: "https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
 *     enableStackdriverLogging: true,
 *     enableSpellCorrection: true,
 *     speechToTextSettings: {
 *         enableSpeechAdaptation: true,
 *     },
 * });
 * const myPage2 = new gcp.diagflow.CxPage("myPage2", {
 *     parent: agent.startFlow,
 *     displayName: "MyPage2",
 * });
 * const basicPage = new gcp.diagflow.CxPage("basicPage", {
 *     parent: agent.startFlow,
 *     displayName: "MyPage",
 *     entryFulfillment: {
 *         messages: [{
 *             text: {
 *                 texts: ["Welcome to page"],
 *             },
 *         }],
 *     },
 *     form: {
 *         parameters: [{
 *             displayName: "param1",
 *             entityType: "projects/-/locations/-/agents/-/entityTypes/sys.date",
 *             fillBehavior: {
 *                 initialPromptFulfillment: {
 *                     messages: [{
 *                         text: {
 *                             texts: ["Please provide param1"],
 *                         },
 *                     }],
 *                 },
 *             },
 *             required: true,
 *             redact: true,
 *         }],
 *     },
 *     transitionRoutes: [{
 *         condition: "$page.params.status = 'FINAL'",
 *         triggerFulfillment: {
 *             messages: [{
 *                 text: {
 *                     texts: ["information completed, navigating to page 2"],
 *                 },
 *             }],
 *         },
 *         targetPage: myPage2.id,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Page can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:diagflow/cxPage:CxPage default {{parent}}/pages/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:diagflow/cxPage:CxPage default {{parent}}/{{name}}
 * ```
 */
class CxPage extends pulumi.CustomResource {
    /**
     * Get an existing CxPage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CxPage(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CxPage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CxPage.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["entryFulfillment"] = state ? state.entryFulfillment : undefined;
            resourceInputs["eventHandlers"] = state ? state.eventHandlers : undefined;
            resourceInputs["form"] = state ? state.form : undefined;
            resourceInputs["languageCode"] = state ? state.languageCode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["transitionRouteGroups"] = state ? state.transitionRouteGroups : undefined;
            resourceInputs["transitionRoutes"] = state ? state.transitionRoutes : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["entryFulfillment"] = args ? args.entryFulfillment : undefined;
            resourceInputs["eventHandlers"] = args ? args.eventHandlers : undefined;
            resourceInputs["form"] = args ? args.form : undefined;
            resourceInputs["languageCode"] = args ? args.languageCode : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["transitionRouteGroups"] = args ? args.transitionRouteGroups : undefined;
            resourceInputs["transitionRoutes"] = args ? args.transitionRoutes : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CxPage.__pulumiType, name, resourceInputs, opts);
    }
}
exports.CxPage = CxPage;
/** @internal */
CxPage.__pulumiType = 'gcp:diagflow/cxPage:CxPage';
//# sourceMappingURL=cxPage.js.map