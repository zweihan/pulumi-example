"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CxAgent = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Agents are best described as Natural Language Understanding (NLU) modules that transform user requests into actionable data. You can include agents in your app, product, or service to determine user intent and respond to the user in a natural way.
 *
 * To get more information about Agent, see:
 *
 * * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)
 *
 * ## Example Usage
 * ### Dialogflowcx Agent Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const fullAgent = new gcp.diagflow.CxAgent("fullAgent", {
 *     avatarUri: "https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
 *     defaultLanguageCode: "en",
 *     description: "Example description.",
 *     displayName: "dialogflowcx-agent",
 *     enableSpellCorrection: true,
 *     enableStackdriverLogging: true,
 *     location: "global",
 *     speechToTextSettings: {
 *         enableSpeechAdaptation: true,
 *     },
 *     supportedLanguageCodes: [
 *         "fr",
 *         "de",
 *         "es",
 *     ],
 *     timeZone: "America/New_York",
 * });
 * ```
 *
 * ## Import
 *
 * Agent can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:diagflow/cxAgent:CxAgent default projects/{{project}}/locations/{{location}}/agents/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:diagflow/cxAgent:CxAgent default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:diagflow/cxAgent:CxAgent default {{location}}/{{name}}
 * ```
 */
class CxAgent extends pulumi.CustomResource {
    /**
     * Get an existing CxAgent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CxAgent(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CxAgent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CxAgent.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["avatarUri"] = state ? state.avatarUri : undefined;
            resourceInputs["defaultLanguageCode"] = state ? state.defaultLanguageCode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enableSpellCorrection"] = state ? state.enableSpellCorrection : undefined;
            resourceInputs["enableStackdriverLogging"] = state ? state.enableStackdriverLogging : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["securitySettings"] = state ? state.securitySettings : undefined;
            resourceInputs["speechToTextSettings"] = state ? state.speechToTextSettings : undefined;
            resourceInputs["startFlow"] = state ? state.startFlow : undefined;
            resourceInputs["supportedLanguageCodes"] = state ? state.supportedLanguageCodes : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.defaultLanguageCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultLanguageCode'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.timeZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeZone'");
            }
            resourceInputs["avatarUri"] = args ? args.avatarUri : undefined;
            resourceInputs["defaultLanguageCode"] = args ? args.defaultLanguageCode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enableSpellCorrection"] = args ? args.enableSpellCorrection : undefined;
            resourceInputs["enableStackdriverLogging"] = args ? args.enableStackdriverLogging : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["securitySettings"] = args ? args.securitySettings : undefined;
            resourceInputs["speechToTextSettings"] = args ? args.speechToTextSettings : undefined;
            resourceInputs["supportedLanguageCodes"] = args ? args.supportedLanguageCodes : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["startFlow"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CxAgent.__pulumiType, name, resourceInputs, opts);
    }
}
exports.CxAgent = CxAgent;
/** @internal */
CxAgent.__pulumiType = 'gcp:diagflow/cxAgent:CxAgent';
//# sourceMappingURL=cxAgent.js.map