export { AddressArgs, AddressState } from "./address";
export type Address = import("./address").Address;
export declare const Address: typeof import("./address").Address;
export { AttachedDiskArgs, AttachedDiskState } from "./attachedDisk";
export type AttachedDisk = import("./attachedDisk").AttachedDisk;
export declare const AttachedDisk: typeof import("./attachedDisk").AttachedDisk;
export { AutoscalarArgs, AutoscalarState } from "./autoscalar";
export type Autoscalar = import("./autoscalar").Autoscalar;
export declare const Autoscalar: typeof import("./autoscalar").Autoscalar;
export { AutoscalerArgs, AutoscalerState } from "./autoscaler";
export type Autoscaler = import("./autoscaler").Autoscaler;
export declare const Autoscaler: typeof import("./autoscaler").Autoscaler;
export { BackendBucketArgs, BackendBucketState } from "./backendBucket";
export type BackendBucket = import("./backendBucket").BackendBucket;
export declare const BackendBucket: typeof import("./backendBucket").BackendBucket;
export { BackendBucketIamBindingArgs, BackendBucketIamBindingState } from "./backendBucketIamBinding";
export type BackendBucketIamBinding = import("./backendBucketIamBinding").BackendBucketIamBinding;
export declare const BackendBucketIamBinding: typeof import("./backendBucketIamBinding").BackendBucketIamBinding;
export { BackendBucketIamMemberArgs, BackendBucketIamMemberState } from "./backendBucketIamMember";
export type BackendBucketIamMember = import("./backendBucketIamMember").BackendBucketIamMember;
export declare const BackendBucketIamMember: typeof import("./backendBucketIamMember").BackendBucketIamMember;
export { BackendBucketIamPolicyArgs, BackendBucketIamPolicyState } from "./backendBucketIamPolicy";
export type BackendBucketIamPolicy = import("./backendBucketIamPolicy").BackendBucketIamPolicy;
export declare const BackendBucketIamPolicy: typeof import("./backendBucketIamPolicy").BackendBucketIamPolicy;
export { BackendBucketSignedUrlKeyArgs, BackendBucketSignedUrlKeyState } from "./backendBucketSignedUrlKey";
export type BackendBucketSignedUrlKey = import("./backendBucketSignedUrlKey").BackendBucketSignedUrlKey;
export declare const BackendBucketSignedUrlKey: typeof import("./backendBucketSignedUrlKey").BackendBucketSignedUrlKey;
export { BackendServiceArgs, BackendServiceState } from "./backendService";
export type BackendService = import("./backendService").BackendService;
export declare const BackendService: typeof import("./backendService").BackendService;
export { BackendServiceIamBindingArgs, BackendServiceIamBindingState } from "./backendServiceIamBinding";
export type BackendServiceIamBinding = import("./backendServiceIamBinding").BackendServiceIamBinding;
export declare const BackendServiceIamBinding: typeof import("./backendServiceIamBinding").BackendServiceIamBinding;
export { BackendServiceIamMemberArgs, BackendServiceIamMemberState } from "./backendServiceIamMember";
export type BackendServiceIamMember = import("./backendServiceIamMember").BackendServiceIamMember;
export declare const BackendServiceIamMember: typeof import("./backendServiceIamMember").BackendServiceIamMember;
export { BackendServiceIamPolicyArgs, BackendServiceIamPolicyState } from "./backendServiceIamPolicy";
export type BackendServiceIamPolicy = import("./backendServiceIamPolicy").BackendServiceIamPolicy;
export declare const BackendServiceIamPolicy: typeof import("./backendServiceIamPolicy").BackendServiceIamPolicy;
export { BackendServiceSignedUrlKeyArgs, BackendServiceSignedUrlKeyState } from "./backendServiceSignedUrlKey";
export type BackendServiceSignedUrlKey = import("./backendServiceSignedUrlKey").BackendServiceSignedUrlKey;
export declare const BackendServiceSignedUrlKey: typeof import("./backendServiceSignedUrlKey").BackendServiceSignedUrlKey;
export { DiskArgs, DiskState } from "./disk";
export type Disk = import("./disk").Disk;
export declare const Disk: typeof import("./disk").Disk;
export { DiskAsyncReplicationArgs, DiskAsyncReplicationState } from "./diskAsyncReplication";
export type DiskAsyncReplication = import("./diskAsyncReplication").DiskAsyncReplication;
export declare const DiskAsyncReplication: typeof import("./diskAsyncReplication").DiskAsyncReplication;
export { DiskIamBindingArgs, DiskIamBindingState } from "./diskIamBinding";
export type DiskIamBinding = import("./diskIamBinding").DiskIamBinding;
export declare const DiskIamBinding: typeof import("./diskIamBinding").DiskIamBinding;
export { DiskIamMemberArgs, DiskIamMemberState } from "./diskIamMember";
export type DiskIamMember = import("./diskIamMember").DiskIamMember;
export declare const DiskIamMember: typeof import("./diskIamMember").DiskIamMember;
export { DiskIamPolicyArgs, DiskIamPolicyState } from "./diskIamPolicy";
export type DiskIamPolicy = import("./diskIamPolicy").DiskIamPolicy;
export declare const DiskIamPolicy: typeof import("./diskIamPolicy").DiskIamPolicy;
export { DiskResourcePolicyAttachmentArgs, DiskResourcePolicyAttachmentState } from "./diskResourcePolicyAttachment";
export type DiskResourcePolicyAttachment = import("./diskResourcePolicyAttachment").DiskResourcePolicyAttachment;
export declare const DiskResourcePolicyAttachment: typeof import("./diskResourcePolicyAttachment").DiskResourcePolicyAttachment;
export { ExternalVpnGatewayArgs, ExternalVpnGatewayState } from "./externalVpnGateway";
export type ExternalVpnGateway = import("./externalVpnGateway").ExternalVpnGateway;
export declare const ExternalVpnGateway: typeof import("./externalVpnGateway").ExternalVpnGateway;
export { FirewallArgs, FirewallState } from "./firewall";
export type Firewall = import("./firewall").Firewall;
export declare const Firewall: typeof import("./firewall").Firewall;
export { FirewallPolicyArgs, FirewallPolicyState } from "./firewallPolicy";
export type FirewallPolicy = import("./firewallPolicy").FirewallPolicy;
export declare const FirewallPolicy: typeof import("./firewallPolicy").FirewallPolicy;
export { FirewallPolicyAssociationArgs, FirewallPolicyAssociationState } from "./firewallPolicyAssociation";
export type FirewallPolicyAssociation = import("./firewallPolicyAssociation").FirewallPolicyAssociation;
export declare const FirewallPolicyAssociation: typeof import("./firewallPolicyAssociation").FirewallPolicyAssociation;
export { FirewallPolicyRuleArgs, FirewallPolicyRuleState } from "./firewallPolicyRule";
export type FirewallPolicyRule = import("./firewallPolicyRule").FirewallPolicyRule;
export declare const FirewallPolicyRule: typeof import("./firewallPolicyRule").FirewallPolicyRule;
export { ForwardingRuleArgs, ForwardingRuleState } from "./forwardingRule";
export type ForwardingRule = import("./forwardingRule").ForwardingRule;
export declare const ForwardingRule: typeof import("./forwardingRule").ForwardingRule;
export { GetAddressArgs, GetAddressResult, GetAddressOutputArgs } from "./getAddress";
export declare const getAddress: typeof import("./getAddress").getAddress;
export declare const getAddressOutput: typeof import("./getAddress").getAddressOutput;
export { GetAddressesArgs, GetAddressesResult, GetAddressesOutputArgs } from "./getAddresses";
export declare const getAddresses: typeof import("./getAddresses").getAddresses;
export declare const getAddressesOutput: typeof import("./getAddresses").getAddressesOutput;
export { GetBackendBucketArgs, GetBackendBucketResult, GetBackendBucketOutputArgs } from "./getBackendBucket";
export declare const getBackendBucket: typeof import("./getBackendBucket").getBackendBucket;
export declare const getBackendBucketOutput: typeof import("./getBackendBucket").getBackendBucketOutput;
export { GetBackendServiceArgs, GetBackendServiceResult, GetBackendServiceOutputArgs } from "./getBackendService";
export declare const getBackendService: typeof import("./getBackendService").getBackendService;
export declare const getBackendServiceOutput: typeof import("./getBackendService").getBackendServiceOutput;
export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export declare const getCertificate: typeof import("./getCertificate").getCertificate;
export declare const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput;
export { GetDefaultServiceAccountArgs, GetDefaultServiceAccountResult, GetDefaultServiceAccountOutputArgs } from "./getDefaultServiceAccount";
export declare const getDefaultServiceAccount: typeof import("./getDefaultServiceAccount").getDefaultServiceAccount;
export declare const getDefaultServiceAccountOutput: typeof import("./getDefaultServiceAccount").getDefaultServiceAccountOutput;
export { GetDiskArgs, GetDiskResult, GetDiskOutputArgs } from "./getDisk";
export declare const getDisk: typeof import("./getDisk").getDisk;
export declare const getDiskOutput: typeof import("./getDisk").getDiskOutput;
export { GetForwardingRuleArgs, GetForwardingRuleResult, GetForwardingRuleOutputArgs } from "./getForwardingRule";
export declare const getForwardingRule: typeof import("./getForwardingRule").getForwardingRule;
export declare const getForwardingRuleOutput: typeof import("./getForwardingRule").getForwardingRuleOutput;
export { GetGlobalAddressArgs, GetGlobalAddressResult, GetGlobalAddressOutputArgs } from "./getGlobalAddress";
export declare const getGlobalAddress: typeof import("./getGlobalAddress").getGlobalAddress;
export declare const getGlobalAddressOutput: typeof import("./getGlobalAddress").getGlobalAddressOutput;
export { GetGlobalForwardingRuleArgs, GetGlobalForwardingRuleResult, GetGlobalForwardingRuleOutputArgs } from "./getGlobalForwardingRule";
export declare const getGlobalForwardingRule: typeof import("./getGlobalForwardingRule").getGlobalForwardingRule;
export declare const getGlobalForwardingRuleOutput: typeof import("./getGlobalForwardingRule").getGlobalForwardingRuleOutput;
export { GetHcVpnGatewayArgs, GetHcVpnGatewayResult, GetHcVpnGatewayOutputArgs } from "./getHcVpnGateway";
export declare const getHcVpnGateway: typeof import("./getHcVpnGateway").getHcVpnGateway;
export declare const getHcVpnGatewayOutput: typeof import("./getHcVpnGateway").getHcVpnGatewayOutput;
export { GetHealthCheckArgs, GetHealthCheckResult, GetHealthCheckOutputArgs } from "./getHealthCheck";
export declare const getHealthCheck: typeof import("./getHealthCheck").getHealthCheck;
export declare const getHealthCheckOutput: typeof import("./getHealthCheck").getHealthCheckOutput;
export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export declare const getImage: typeof import("./getImage").getImage;
export declare const getImageOutput: typeof import("./getImage").getImageOutput;
export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export declare const getInstance: typeof import("./getInstance").getInstance;
export declare const getInstanceOutput: typeof import("./getInstance").getInstanceOutput;
export { GetInstanceGroupArgs, GetInstanceGroupResult, GetInstanceGroupOutputArgs } from "./getInstanceGroup";
export declare const getInstanceGroup: typeof import("./getInstanceGroup").getInstanceGroup;
export declare const getInstanceGroupOutput: typeof import("./getInstanceGroup").getInstanceGroupOutput;
export { GetInstanceGroupManagerArgs, GetInstanceGroupManagerResult, GetInstanceGroupManagerOutputArgs } from "./getInstanceGroupManager";
export declare const getInstanceGroupManager: typeof import("./getInstanceGroupManager").getInstanceGroupManager;
export declare const getInstanceGroupManagerOutput: typeof import("./getInstanceGroupManager").getInstanceGroupManagerOutput;
export { GetInstanceSerialPortArgs, GetInstanceSerialPortResult, GetInstanceSerialPortOutputArgs } from "./getInstanceSerialPort";
export declare const getInstanceSerialPort: typeof import("./getInstanceSerialPort").getInstanceSerialPort;
export declare const getInstanceSerialPortOutput: typeof import("./getInstanceSerialPort").getInstanceSerialPortOutput;
export { GetInstanceTemplateArgs, GetInstanceTemplateResult, GetInstanceTemplateOutputArgs } from "./getInstanceTemplate";
export declare const getInstanceTemplate: typeof import("./getInstanceTemplate").getInstanceTemplate;
export declare const getInstanceTemplateOutput: typeof import("./getInstanceTemplate").getInstanceTemplateOutput;
export { GetLBIPRangesResult } from "./getLBIPRanges";
export declare const getLBIPRanges: typeof import("./getLBIPRanges").getLBIPRanges;
export { GetNetblockIPRangesArgs, GetNetblockIPRangesResult, GetNetblockIPRangesOutputArgs } from "./getNetblockIPRanges";
export declare const getNetblockIPRanges: typeof import("./getNetblockIPRanges").getNetblockIPRanges;
export declare const getNetblockIPRangesOutput: typeof import("./getNetblockIPRanges").getNetblockIPRangesOutput;
export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export declare const getNetwork: typeof import("./getNetwork").getNetwork;
export declare const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput;
export { GetNetworkEndpointGroupArgs, GetNetworkEndpointGroupResult, GetNetworkEndpointGroupOutputArgs } from "./getNetworkEndpointGroup";
export declare const getNetworkEndpointGroup: typeof import("./getNetworkEndpointGroup").getNetworkEndpointGroup;
export declare const getNetworkEndpointGroupOutput: typeof import("./getNetworkEndpointGroup").getNetworkEndpointGroupOutput;
export { GetNetworkPeeringArgs, GetNetworkPeeringResult, GetNetworkPeeringOutputArgs } from "./getNetworkPeering";
export declare const getNetworkPeering: typeof import("./getNetworkPeering").getNetworkPeering;
export declare const getNetworkPeeringOutput: typeof import("./getNetworkPeering").getNetworkPeeringOutput;
export { GetNodeTypesArgs, GetNodeTypesResult, GetNodeTypesOutputArgs } from "./getNodeTypes";
export declare const getNodeTypes: typeof import("./getNodeTypes").getNodeTypes;
export declare const getNodeTypesOutput: typeof import("./getNodeTypes").getNodeTypesOutput;
export { GetRegionInstanceGroupArgs, GetRegionInstanceGroupResult, GetRegionInstanceGroupOutputArgs } from "./getRegionInstanceGroup";
export declare const getRegionInstanceGroup: typeof import("./getRegionInstanceGroup").getRegionInstanceGroup;
export declare const getRegionInstanceGroupOutput: typeof import("./getRegionInstanceGroup").getRegionInstanceGroupOutput;
export { GetRegionInstanceTemplateArgs, GetRegionInstanceTemplateResult, GetRegionInstanceTemplateOutputArgs } from "./getRegionInstanceTemplate";
export declare const getRegionInstanceTemplate: typeof import("./getRegionInstanceTemplate").getRegionInstanceTemplate;
export declare const getRegionInstanceTemplateOutput: typeof import("./getRegionInstanceTemplate").getRegionInstanceTemplateOutput;
export { GetRegionNetworkEndpointGroupArgs, GetRegionNetworkEndpointGroupResult, GetRegionNetworkEndpointGroupOutputArgs } from "./getRegionNetworkEndpointGroup";
export declare const getRegionNetworkEndpointGroup: typeof import("./getRegionNetworkEndpointGroup").getRegionNetworkEndpointGroup;
export declare const getRegionNetworkEndpointGroupOutput: typeof import("./getRegionNetworkEndpointGroup").getRegionNetworkEndpointGroupOutput;
export { GetRegionSslCertificateArgs, GetRegionSslCertificateResult, GetRegionSslCertificateOutputArgs } from "./getRegionSslCertificate";
export declare const getRegionSslCertificate: typeof import("./getRegionSslCertificate").getRegionSslCertificate;
export declare const getRegionSslCertificateOutput: typeof import("./getRegionSslCertificate").getRegionSslCertificateOutput;
export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export declare const getRegions: typeof import("./getRegions").getRegions;
export declare const getRegionsOutput: typeof import("./getRegions").getRegionsOutput;
export { GetResourcePolicyArgs, GetResourcePolicyResult, GetResourcePolicyOutputArgs } from "./getResourcePolicy";
export declare const getResourcePolicy: typeof import("./getResourcePolicy").getResourcePolicy;
export declare const getResourcePolicyOutput: typeof import("./getResourcePolicy").getResourcePolicyOutput;
export { GetRouterArgs, GetRouterResult, GetRouterOutputArgs } from "./getRouter";
export declare const getRouter: typeof import("./getRouter").getRouter;
export declare const getRouterOutput: typeof import("./getRouter").getRouterOutput;
export { GetRouterNatArgs, GetRouterNatResult, GetRouterNatOutputArgs } from "./getRouterNat";
export declare const getRouterNat: typeof import("./getRouterNat").getRouterNat;
export declare const getRouterNatOutput: typeof import("./getRouterNat").getRouterNatOutput;
export { GetRouterStatusArgs, GetRouterStatusResult, GetRouterStatusOutputArgs } from "./getRouterStatus";
export declare const getRouterStatus: typeof import("./getRouterStatus").getRouterStatus;
export declare const getRouterStatusOutput: typeof import("./getRouterStatus").getRouterStatusOutput;
export { GetSSLPolicyArgs, GetSSLPolicyResult, GetSSLPolicyOutputArgs } from "./getSSLPolicy";
export declare const getSSLPolicy: typeof import("./getSSLPolicy").getSSLPolicy;
export declare const getSSLPolicyOutput: typeof import("./getSSLPolicy").getSSLPolicyOutput;
export { GetSnapshotArgs, GetSnapshotResult, GetSnapshotOutputArgs } from "./getSnapshot";
export declare const getSnapshot: typeof import("./getSnapshot").getSnapshot;
export declare const getSnapshotOutput: typeof import("./getSnapshot").getSnapshotOutput;
export { GetSubnetworkArgs, GetSubnetworkResult, GetSubnetworkOutputArgs } from "./getSubnetwork";
export declare const getSubnetwork: typeof import("./getSubnetwork").getSubnetwork;
export declare const getSubnetworkOutput: typeof import("./getSubnetwork").getSubnetworkOutput;
export { GetVPNGatewayArgs, GetVPNGatewayResult, GetVPNGatewayOutputArgs } from "./getVPNGateway";
export declare const getVPNGateway: typeof import("./getVPNGateway").getVPNGateway;
export declare const getVPNGatewayOutput: typeof import("./getVPNGateway").getVPNGatewayOutput;
export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export declare const getZones: typeof import("./getZones").getZones;
export declare const getZonesOutput: typeof import("./getZones").getZonesOutput;
export { GlobalAddressArgs, GlobalAddressState } from "./globalAddress";
export type GlobalAddress = import("./globalAddress").GlobalAddress;
export declare const GlobalAddress: typeof import("./globalAddress").GlobalAddress;
export { GlobalForwardingRuleArgs, GlobalForwardingRuleState } from "./globalForwardingRule";
export type GlobalForwardingRule = import("./globalForwardingRule").GlobalForwardingRule;
export declare const GlobalForwardingRule: typeof import("./globalForwardingRule").GlobalForwardingRule;
export { GlobalNetworkEndpointArgs, GlobalNetworkEndpointState } from "./globalNetworkEndpoint";
export type GlobalNetworkEndpoint = import("./globalNetworkEndpoint").GlobalNetworkEndpoint;
export declare const GlobalNetworkEndpoint: typeof import("./globalNetworkEndpoint").GlobalNetworkEndpoint;
export { GlobalNetworkEndpointGroupArgs, GlobalNetworkEndpointGroupState } from "./globalNetworkEndpointGroup";
export type GlobalNetworkEndpointGroup = import("./globalNetworkEndpointGroup").GlobalNetworkEndpointGroup;
export declare const GlobalNetworkEndpointGroup: typeof import("./globalNetworkEndpointGroup").GlobalNetworkEndpointGroup;
export { HaVpnGatewayArgs, HaVpnGatewayState } from "./haVpnGateway";
export type HaVpnGateway = import("./haVpnGateway").HaVpnGateway;
export declare const HaVpnGateway: typeof import("./haVpnGateway").HaVpnGateway;
export { HealthCheckArgs, HealthCheckState } from "./healthCheck";
export type HealthCheck = import("./healthCheck").HealthCheck;
export declare const HealthCheck: typeof import("./healthCheck").HealthCheck;
export { HttpHealthCheckArgs, HttpHealthCheckState } from "./httpHealthCheck";
export type HttpHealthCheck = import("./httpHealthCheck").HttpHealthCheck;
export declare const HttpHealthCheck: typeof import("./httpHealthCheck").HttpHealthCheck;
export { HttpsHealthCheckArgs, HttpsHealthCheckState } from "./httpsHealthCheck";
export type HttpsHealthCheck = import("./httpsHealthCheck").HttpsHealthCheck;
export declare const HttpsHealthCheck: typeof import("./httpsHealthCheck").HttpsHealthCheck;
export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export declare const Image: typeof import("./image").Image;
export { ImageIamBindingArgs, ImageIamBindingState } from "./imageIamBinding";
export type ImageIamBinding = import("./imageIamBinding").ImageIamBinding;
export declare const ImageIamBinding: typeof import("./imageIamBinding").ImageIamBinding;
export { ImageIamMemberArgs, ImageIamMemberState } from "./imageIamMember";
export type ImageIamMember = import("./imageIamMember").ImageIamMember;
export declare const ImageIamMember: typeof import("./imageIamMember").ImageIamMember;
export { ImageIamPolicyArgs, ImageIamPolicyState } from "./imageIamPolicy";
export type ImageIamPolicy = import("./imageIamPolicy").ImageIamPolicy;
export declare const ImageIamPolicy: typeof import("./imageIamPolicy").ImageIamPolicy;
export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export declare const Instance: typeof import("./instance").Instance;
export { InstanceFromMachineImageArgs, InstanceFromMachineImageState } from "./instanceFromMachineImage";
export type InstanceFromMachineImage = import("./instanceFromMachineImage").InstanceFromMachineImage;
export declare const InstanceFromMachineImage: typeof import("./instanceFromMachineImage").InstanceFromMachineImage;
export { InstanceFromTemplateArgs, InstanceFromTemplateState } from "./instanceFromTemplate";
export type InstanceFromTemplate = import("./instanceFromTemplate").InstanceFromTemplate;
export declare const InstanceFromTemplate: typeof import("./instanceFromTemplate").InstanceFromTemplate;
export { InstanceGroupArgs, InstanceGroupState } from "./instanceGroup";
export type InstanceGroup = import("./instanceGroup").InstanceGroup;
export declare const InstanceGroup: typeof import("./instanceGroup").InstanceGroup;
export { InstanceGroupManagerArgs, InstanceGroupManagerState } from "./instanceGroupManager";
export type InstanceGroupManager = import("./instanceGroupManager").InstanceGroupManager;
export declare const InstanceGroupManager: typeof import("./instanceGroupManager").InstanceGroupManager;
export { InstanceGroupNamedPortArgs, InstanceGroupNamedPortState } from "./instanceGroupNamedPort";
export type InstanceGroupNamedPort = import("./instanceGroupNamedPort").InstanceGroupNamedPort;
export declare const InstanceGroupNamedPort: typeof import("./instanceGroupNamedPort").InstanceGroupNamedPort;
export { InstanceIAMBindingArgs, InstanceIAMBindingState } from "./instanceIAMBinding";
export type InstanceIAMBinding = import("./instanceIAMBinding").InstanceIAMBinding;
export declare const InstanceIAMBinding: typeof import("./instanceIAMBinding").InstanceIAMBinding;
export { InstanceIAMMemberArgs, InstanceIAMMemberState } from "./instanceIAMMember";
export type InstanceIAMMember = import("./instanceIAMMember").InstanceIAMMember;
export declare const InstanceIAMMember: typeof import("./instanceIAMMember").InstanceIAMMember;
export { InstanceIAMPolicyArgs, InstanceIAMPolicyState } from "./instanceIAMPolicy";
export type InstanceIAMPolicy = import("./instanceIAMPolicy").InstanceIAMPolicy;
export declare const InstanceIAMPolicy: typeof import("./instanceIAMPolicy").InstanceIAMPolicy;
export { InstanceTemplateArgs, InstanceTemplateState } from "./instanceTemplate";
export type InstanceTemplate = import("./instanceTemplate").InstanceTemplate;
export declare const InstanceTemplate: typeof import("./instanceTemplate").InstanceTemplate;
export { InterconnectAttachmentArgs, InterconnectAttachmentState } from "./interconnectAttachment";
export type InterconnectAttachment = import("./interconnectAttachment").InterconnectAttachment;
export declare const InterconnectAttachment: typeof import("./interconnectAttachment").InterconnectAttachment;
export { MachineImageArgs, MachineImageState } from "./machineImage";
export type MachineImage = import("./machineImage").MachineImage;
export declare const MachineImage: typeof import("./machineImage").MachineImage;
export { MachineImageIamBindingArgs, MachineImageIamBindingState } from "./machineImageIamBinding";
export type MachineImageIamBinding = import("./machineImageIamBinding").MachineImageIamBinding;
export declare const MachineImageIamBinding: typeof import("./machineImageIamBinding").MachineImageIamBinding;
export { MachineImageIamMemberArgs, MachineImageIamMemberState } from "./machineImageIamMember";
export type MachineImageIamMember = import("./machineImageIamMember").MachineImageIamMember;
export declare const MachineImageIamMember: typeof import("./machineImageIamMember").MachineImageIamMember;
export { MachineImageIamPolicyArgs, MachineImageIamPolicyState } from "./machineImageIamPolicy";
export type MachineImageIamPolicy = import("./machineImageIamPolicy").MachineImageIamPolicy;
export declare const MachineImageIamPolicy: typeof import("./machineImageIamPolicy").MachineImageIamPolicy;
export { ManagedSslCertificateArgs, ManagedSslCertificateState } from "./managedSslCertificate";
export type ManagedSslCertificate = import("./managedSslCertificate").ManagedSslCertificate;
export declare const ManagedSslCertificate: typeof import("./managedSslCertificate").ManagedSslCertificate;
export { MangedSslCertificateArgs, MangedSslCertificateState } from "./mangedSslCertificate";
export type MangedSslCertificate = import("./mangedSslCertificate").MangedSslCertificate;
export declare const MangedSslCertificate: typeof import("./mangedSslCertificate").MangedSslCertificate;
export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export declare const Network: typeof import("./network").Network;
export { NetworkEndpointArgs, NetworkEndpointState } from "./networkEndpoint";
export type NetworkEndpoint = import("./networkEndpoint").NetworkEndpoint;
export declare const NetworkEndpoint: typeof import("./networkEndpoint").NetworkEndpoint;
export { NetworkEndpointGroupArgs, NetworkEndpointGroupState } from "./networkEndpointGroup";
export type NetworkEndpointGroup = import("./networkEndpointGroup").NetworkEndpointGroup;
export declare const NetworkEndpointGroup: typeof import("./networkEndpointGroup").NetworkEndpointGroup;
export { NetworkFirewallPolicyArgs, NetworkFirewallPolicyState } from "./networkFirewallPolicy";
export type NetworkFirewallPolicy = import("./networkFirewallPolicy").NetworkFirewallPolicy;
export declare const NetworkFirewallPolicy: typeof import("./networkFirewallPolicy").NetworkFirewallPolicy;
export { NetworkFirewallPolicyAssociationArgs, NetworkFirewallPolicyAssociationState } from "./networkFirewallPolicyAssociation";
export type NetworkFirewallPolicyAssociation = import("./networkFirewallPolicyAssociation").NetworkFirewallPolicyAssociation;
export declare const NetworkFirewallPolicyAssociation: typeof import("./networkFirewallPolicyAssociation").NetworkFirewallPolicyAssociation;
export { NetworkFirewallPolicyRuleArgs, NetworkFirewallPolicyRuleState } from "./networkFirewallPolicyRule";
export type NetworkFirewallPolicyRule = import("./networkFirewallPolicyRule").NetworkFirewallPolicyRule;
export declare const NetworkFirewallPolicyRule: typeof import("./networkFirewallPolicyRule").NetworkFirewallPolicyRule;
export { NetworkPeeringArgs, NetworkPeeringState } from "./networkPeering";
export type NetworkPeering = import("./networkPeering").NetworkPeering;
export declare const NetworkPeering: typeof import("./networkPeering").NetworkPeering;
export { NetworkPeeringRoutesConfigArgs, NetworkPeeringRoutesConfigState } from "./networkPeeringRoutesConfig";
export type NetworkPeeringRoutesConfig = import("./networkPeeringRoutesConfig").NetworkPeeringRoutesConfig;
export declare const NetworkPeeringRoutesConfig: typeof import("./networkPeeringRoutesConfig").NetworkPeeringRoutesConfig;
export { NodeGroupArgs, NodeGroupState } from "./nodeGroup";
export type NodeGroup = import("./nodeGroup").NodeGroup;
export declare const NodeGroup: typeof import("./nodeGroup").NodeGroup;
export { NodeTemplateArgs, NodeTemplateState } from "./nodeTemplate";
export type NodeTemplate = import("./nodeTemplate").NodeTemplate;
export declare const NodeTemplate: typeof import("./nodeTemplate").NodeTemplate;
export { OrganizationSecurityPolicyArgs, OrganizationSecurityPolicyState } from "./organizationSecurityPolicy";
export type OrganizationSecurityPolicy = import("./organizationSecurityPolicy").OrganizationSecurityPolicy;
export declare const OrganizationSecurityPolicy: typeof import("./organizationSecurityPolicy").OrganizationSecurityPolicy;
export { OrganizationSecurityPolicyAssociationArgs, OrganizationSecurityPolicyAssociationState } from "./organizationSecurityPolicyAssociation";
export type OrganizationSecurityPolicyAssociation = import("./organizationSecurityPolicyAssociation").OrganizationSecurityPolicyAssociation;
export declare const OrganizationSecurityPolicyAssociation: typeof import("./organizationSecurityPolicyAssociation").OrganizationSecurityPolicyAssociation;
export { OrganizationSecurityPolicyRuleArgs, OrganizationSecurityPolicyRuleState } from "./organizationSecurityPolicyRule";
export type OrganizationSecurityPolicyRule = import("./organizationSecurityPolicyRule").OrganizationSecurityPolicyRule;
export declare const OrganizationSecurityPolicyRule: typeof import("./organizationSecurityPolicyRule").OrganizationSecurityPolicyRule;
export { PacketMirroringArgs, PacketMirroringState } from "./packetMirroring";
export type PacketMirroring = import("./packetMirroring").PacketMirroring;
export declare const PacketMirroring: typeof import("./packetMirroring").PacketMirroring;
export { PerInstanceConfigArgs, PerInstanceConfigState } from "./perInstanceConfig";
export type PerInstanceConfig = import("./perInstanceConfig").PerInstanceConfig;
export declare const PerInstanceConfig: typeof import("./perInstanceConfig").PerInstanceConfig;
export { ProjectDefaultNetworkTierArgs, ProjectDefaultNetworkTierState } from "./projectDefaultNetworkTier";
export type ProjectDefaultNetworkTier = import("./projectDefaultNetworkTier").ProjectDefaultNetworkTier;
export declare const ProjectDefaultNetworkTier: typeof import("./projectDefaultNetworkTier").ProjectDefaultNetworkTier;
export { ProjectMetadataArgs, ProjectMetadataState } from "./projectMetadata";
export type ProjectMetadata = import("./projectMetadata").ProjectMetadata;
export declare const ProjectMetadata: typeof import("./projectMetadata").ProjectMetadata;
export { ProjectMetadataItemArgs, ProjectMetadataItemState } from "./projectMetadataItem";
export type ProjectMetadataItem = import("./projectMetadataItem").ProjectMetadataItem;
export declare const ProjectMetadataItem: typeof import("./projectMetadataItem").ProjectMetadataItem;
export { PublicAdvertisedPrefixArgs, PublicAdvertisedPrefixState } from "./publicAdvertisedPrefix";
export type PublicAdvertisedPrefix = import("./publicAdvertisedPrefix").PublicAdvertisedPrefix;
export declare const PublicAdvertisedPrefix: typeof import("./publicAdvertisedPrefix").PublicAdvertisedPrefix;
export { PublicDelegatedPrefixArgs, PublicDelegatedPrefixState } from "./publicDelegatedPrefix";
export type PublicDelegatedPrefix = import("./publicDelegatedPrefix").PublicDelegatedPrefix;
export declare const PublicDelegatedPrefix: typeof import("./publicDelegatedPrefix").PublicDelegatedPrefix;
export { RegionAutoscalerArgs, RegionAutoscalerState } from "./regionAutoscaler";
export type RegionAutoscaler = import("./regionAutoscaler").RegionAutoscaler;
export declare const RegionAutoscaler: typeof import("./regionAutoscaler").RegionAutoscaler;
export { RegionBackendServiceArgs, RegionBackendServiceState } from "./regionBackendService";
export type RegionBackendService = import("./regionBackendService").RegionBackendService;
export declare const RegionBackendService: typeof import("./regionBackendService").RegionBackendService;
export { RegionBackendServiceIamBindingArgs, RegionBackendServiceIamBindingState } from "./regionBackendServiceIamBinding";
export type RegionBackendServiceIamBinding = import("./regionBackendServiceIamBinding").RegionBackendServiceIamBinding;
export declare const RegionBackendServiceIamBinding: typeof import("./regionBackendServiceIamBinding").RegionBackendServiceIamBinding;
export { RegionBackendServiceIamMemberArgs, RegionBackendServiceIamMemberState } from "./regionBackendServiceIamMember";
export type RegionBackendServiceIamMember = import("./regionBackendServiceIamMember").RegionBackendServiceIamMember;
export declare const RegionBackendServiceIamMember: typeof import("./regionBackendServiceIamMember").RegionBackendServiceIamMember;
export { RegionBackendServiceIamPolicyArgs, RegionBackendServiceIamPolicyState } from "./regionBackendServiceIamPolicy";
export type RegionBackendServiceIamPolicy = import("./regionBackendServiceIamPolicy").RegionBackendServiceIamPolicy;
export declare const RegionBackendServiceIamPolicy: typeof import("./regionBackendServiceIamPolicy").RegionBackendServiceIamPolicy;
export { RegionCommitmentArgs, RegionCommitmentState } from "./regionCommitment";
export type RegionCommitment = import("./regionCommitment").RegionCommitment;
export declare const RegionCommitment: typeof import("./regionCommitment").RegionCommitment;
export { RegionDiskArgs, RegionDiskState } from "./regionDisk";
export type RegionDisk = import("./regionDisk").RegionDisk;
export declare const RegionDisk: typeof import("./regionDisk").RegionDisk;
export { RegionDiskIamBindingArgs, RegionDiskIamBindingState } from "./regionDiskIamBinding";
export type RegionDiskIamBinding = import("./regionDiskIamBinding").RegionDiskIamBinding;
export declare const RegionDiskIamBinding: typeof import("./regionDiskIamBinding").RegionDiskIamBinding;
export { RegionDiskIamMemberArgs, RegionDiskIamMemberState } from "./regionDiskIamMember";
export type RegionDiskIamMember = import("./regionDiskIamMember").RegionDiskIamMember;
export declare const RegionDiskIamMember: typeof import("./regionDiskIamMember").RegionDiskIamMember;
export { RegionDiskIamPolicyArgs, RegionDiskIamPolicyState } from "./regionDiskIamPolicy";
export type RegionDiskIamPolicy = import("./regionDiskIamPolicy").RegionDiskIamPolicy;
export declare const RegionDiskIamPolicy: typeof import("./regionDiskIamPolicy").RegionDiskIamPolicy;
export { RegionDiskResourcePolicyAttachmentArgs, RegionDiskResourcePolicyAttachmentState } from "./regionDiskResourcePolicyAttachment";
export type RegionDiskResourcePolicyAttachment = import("./regionDiskResourcePolicyAttachment").RegionDiskResourcePolicyAttachment;
export declare const RegionDiskResourcePolicyAttachment: typeof import("./regionDiskResourcePolicyAttachment").RegionDiskResourcePolicyAttachment;
export { RegionHealthCheckArgs, RegionHealthCheckState } from "./regionHealthCheck";
export type RegionHealthCheck = import("./regionHealthCheck").RegionHealthCheck;
export declare const RegionHealthCheck: typeof import("./regionHealthCheck").RegionHealthCheck;
export { RegionInstanceGroupManagerArgs, RegionInstanceGroupManagerState } from "./regionInstanceGroupManager";
export type RegionInstanceGroupManager = import("./regionInstanceGroupManager").RegionInstanceGroupManager;
export declare const RegionInstanceGroupManager: typeof import("./regionInstanceGroupManager").RegionInstanceGroupManager;
export { RegionInstanceTemplateArgs, RegionInstanceTemplateState } from "./regionInstanceTemplate";
export type RegionInstanceTemplate = import("./regionInstanceTemplate").RegionInstanceTemplate;
export declare const RegionInstanceTemplate: typeof import("./regionInstanceTemplate").RegionInstanceTemplate;
export { RegionNetworkEndpointGroupArgs, RegionNetworkEndpointGroupState } from "./regionNetworkEndpointGroup";
export type RegionNetworkEndpointGroup = import("./regionNetworkEndpointGroup").RegionNetworkEndpointGroup;
export declare const RegionNetworkEndpointGroup: typeof import("./regionNetworkEndpointGroup").RegionNetworkEndpointGroup;
export { RegionNetworkFirewallPolicyArgs, RegionNetworkFirewallPolicyState } from "./regionNetworkFirewallPolicy";
export type RegionNetworkFirewallPolicy = import("./regionNetworkFirewallPolicy").RegionNetworkFirewallPolicy;
export declare const RegionNetworkFirewallPolicy: typeof import("./regionNetworkFirewallPolicy").RegionNetworkFirewallPolicy;
export { RegionNetworkFirewallPolicyAssociationArgs, RegionNetworkFirewallPolicyAssociationState } from "./regionNetworkFirewallPolicyAssociation";
export type RegionNetworkFirewallPolicyAssociation = import("./regionNetworkFirewallPolicyAssociation").RegionNetworkFirewallPolicyAssociation;
export declare const RegionNetworkFirewallPolicyAssociation: typeof import("./regionNetworkFirewallPolicyAssociation").RegionNetworkFirewallPolicyAssociation;
export { RegionNetworkFirewallPolicyRuleArgs, RegionNetworkFirewallPolicyRuleState } from "./regionNetworkFirewallPolicyRule";
export type RegionNetworkFirewallPolicyRule = import("./regionNetworkFirewallPolicyRule").RegionNetworkFirewallPolicyRule;
export declare const RegionNetworkFirewallPolicyRule: typeof import("./regionNetworkFirewallPolicyRule").RegionNetworkFirewallPolicyRule;
export { RegionPerInstanceConfigArgs, RegionPerInstanceConfigState } from "./regionPerInstanceConfig";
export type RegionPerInstanceConfig = import("./regionPerInstanceConfig").RegionPerInstanceConfig;
export declare const RegionPerInstanceConfig: typeof import("./regionPerInstanceConfig").RegionPerInstanceConfig;
export { RegionSslCertificateArgs, RegionSslCertificateState } from "./regionSslCertificate";
export type RegionSslCertificate = import("./regionSslCertificate").RegionSslCertificate;
export declare const RegionSslCertificate: typeof import("./regionSslCertificate").RegionSslCertificate;
export { RegionSslPolicyArgs, RegionSslPolicyState } from "./regionSslPolicy";
export type RegionSslPolicy = import("./regionSslPolicy").RegionSslPolicy;
export declare const RegionSslPolicy: typeof import("./regionSslPolicy").RegionSslPolicy;
export { RegionTargetHttpProxyArgs, RegionTargetHttpProxyState } from "./regionTargetHttpProxy";
export type RegionTargetHttpProxy = import("./regionTargetHttpProxy").RegionTargetHttpProxy;
export declare const RegionTargetHttpProxy: typeof import("./regionTargetHttpProxy").RegionTargetHttpProxy;
export { RegionTargetHttpsProxyArgs, RegionTargetHttpsProxyState } from "./regionTargetHttpsProxy";
export type RegionTargetHttpsProxy = import("./regionTargetHttpsProxy").RegionTargetHttpsProxy;
export declare const RegionTargetHttpsProxy: typeof import("./regionTargetHttpsProxy").RegionTargetHttpsProxy;
export { RegionTargetTcpProxyArgs, RegionTargetTcpProxyState } from "./regionTargetTcpProxy";
export type RegionTargetTcpProxy = import("./regionTargetTcpProxy").RegionTargetTcpProxy;
export declare const RegionTargetTcpProxy: typeof import("./regionTargetTcpProxy").RegionTargetTcpProxy;
export { RegionUrlMapArgs, RegionUrlMapState } from "./regionUrlMap";
export type RegionUrlMap = import("./regionUrlMap").RegionUrlMap;
export declare const RegionUrlMap: typeof import("./regionUrlMap").RegionUrlMap;
export { ReservationArgs, ReservationState } from "./reservation";
export type Reservation = import("./reservation").Reservation;
export declare const Reservation: typeof import("./reservation").Reservation;
export { ResourcePolicyArgs, ResourcePolicyState } from "./resourcePolicy";
export type ResourcePolicy = import("./resourcePolicy").ResourcePolicy;
export declare const ResourcePolicy: typeof import("./resourcePolicy").ResourcePolicy;
export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export declare const Route: typeof import("./route").Route;
export { RouterArgs, RouterState } from "./router";
export type Router = import("./router").Router;
export declare const Router: typeof import("./router").Router;
export { RouterInterfaceArgs, RouterInterfaceState } from "./routerInterface";
export type RouterInterface = import("./routerInterface").RouterInterface;
export declare const RouterInterface: typeof import("./routerInterface").RouterInterface;
export { RouterNatArgs, RouterNatState } from "./routerNat";
export type RouterNat = import("./routerNat").RouterNat;
export declare const RouterNat: typeof import("./routerNat").RouterNat;
export { RouterPeerArgs, RouterPeerState } from "./routerPeer";
export type RouterPeer = import("./routerPeer").RouterPeer;
export declare const RouterPeer: typeof import("./routerPeer").RouterPeer;
export { RouterStatusArgs, RouterStatusResult, RouterStatusOutputArgs } from "./routerStatus";
export declare const routerStatus: typeof import("./routerStatus").routerStatus;
export declare const routerStatusOutput: typeof import("./routerStatus").routerStatusOutput;
export { SecurityPolicyArgs, SecurityPolicyState } from "./securityPolicy";
export type SecurityPolicy = import("./securityPolicy").SecurityPolicy;
export declare const SecurityPolicy: typeof import("./securityPolicy").SecurityPolicy;
export { SecurityScanConfigArgs, SecurityScanConfigState } from "./securityScanConfig";
export type SecurityScanConfig = import("./securityScanConfig").SecurityScanConfig;
export declare const SecurityScanConfig: typeof import("./securityScanConfig").SecurityScanConfig;
export { ServiceAttachmentArgs, ServiceAttachmentState } from "./serviceAttachment";
export type ServiceAttachment = import("./serviceAttachment").ServiceAttachment;
export declare const ServiceAttachment: typeof import("./serviceAttachment").ServiceAttachment;
export { SharedVPCHostProjectArgs, SharedVPCHostProjectState } from "./sharedVPCHostProject";
export type SharedVPCHostProject = import("./sharedVPCHostProject").SharedVPCHostProject;
export declare const SharedVPCHostProject: typeof import("./sharedVPCHostProject").SharedVPCHostProject;
export { SharedVPCServiceProjectArgs, SharedVPCServiceProjectState } from "./sharedVPCServiceProject";
export type SharedVPCServiceProject = import("./sharedVPCServiceProject").SharedVPCServiceProject;
export declare const SharedVPCServiceProject: typeof import("./sharedVPCServiceProject").SharedVPCServiceProject;
export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export declare const Snapshot: typeof import("./snapshot").Snapshot;
export { SnapshotIamBindingArgs, SnapshotIamBindingState } from "./snapshotIamBinding";
export type SnapshotIamBinding = import("./snapshotIamBinding").SnapshotIamBinding;
export declare const SnapshotIamBinding: typeof import("./snapshotIamBinding").SnapshotIamBinding;
export { SnapshotIamMemberArgs, SnapshotIamMemberState } from "./snapshotIamMember";
export type SnapshotIamMember = import("./snapshotIamMember").SnapshotIamMember;
export declare const SnapshotIamMember: typeof import("./snapshotIamMember").SnapshotIamMember;
export { SnapshotIamPolicyArgs, SnapshotIamPolicyState } from "./snapshotIamPolicy";
export type SnapshotIamPolicy = import("./snapshotIamPolicy").SnapshotIamPolicy;
export declare const SnapshotIamPolicy: typeof import("./snapshotIamPolicy").SnapshotIamPolicy;
export { SSLCertificateArgs, SSLCertificateState } from "./sslcertificate";
export type SSLCertificate = import("./sslcertificate").SSLCertificate;
export declare const SSLCertificate: typeof import("./sslcertificate").SSLCertificate;
export { SSLPolicyArgs, SSLPolicyState } from "./sslpolicy";
export type SSLPolicy = import("./sslpolicy").SSLPolicy;
export declare const SSLPolicy: typeof import("./sslpolicy").SSLPolicy;
export { SubnetworkArgs, SubnetworkState } from "./subnetwork";
export type Subnetwork = import("./subnetwork").Subnetwork;
export declare const Subnetwork: typeof import("./subnetwork").Subnetwork;
export { SubnetworkIAMBindingArgs, SubnetworkIAMBindingState } from "./subnetworkIAMBinding";
export type SubnetworkIAMBinding = import("./subnetworkIAMBinding").SubnetworkIAMBinding;
export declare const SubnetworkIAMBinding: typeof import("./subnetworkIAMBinding").SubnetworkIAMBinding;
export { SubnetworkIAMMemberArgs, SubnetworkIAMMemberState } from "./subnetworkIAMMember";
export type SubnetworkIAMMember = import("./subnetworkIAMMember").SubnetworkIAMMember;
export declare const SubnetworkIAMMember: typeof import("./subnetworkIAMMember").SubnetworkIAMMember;
export { SubnetworkIAMPolicyArgs, SubnetworkIAMPolicyState } from "./subnetworkIAMPolicy";
export type SubnetworkIAMPolicy = import("./subnetworkIAMPolicy").SubnetworkIAMPolicy;
export declare const SubnetworkIAMPolicy: typeof import("./subnetworkIAMPolicy").SubnetworkIAMPolicy;
export { TargetGrpcProxyArgs, TargetGrpcProxyState } from "./targetGrpcProxy";
export type TargetGrpcProxy = import("./targetGrpcProxy").TargetGrpcProxy;
export declare const TargetGrpcProxy: typeof import("./targetGrpcProxy").TargetGrpcProxy;
export { TargetHttpProxyArgs, TargetHttpProxyState } from "./targetHttpProxy";
export type TargetHttpProxy = import("./targetHttpProxy").TargetHttpProxy;
export declare const TargetHttpProxy: typeof import("./targetHttpProxy").TargetHttpProxy;
export { TargetHttpsProxyArgs, TargetHttpsProxyState } from "./targetHttpsProxy";
export type TargetHttpsProxy = import("./targetHttpsProxy").TargetHttpsProxy;
export declare const TargetHttpsProxy: typeof import("./targetHttpsProxy").TargetHttpsProxy;
export { TargetInstanceArgs, TargetInstanceState } from "./targetInstance";
export type TargetInstance = import("./targetInstance").TargetInstance;
export declare const TargetInstance: typeof import("./targetInstance").TargetInstance;
export { TargetPoolArgs, TargetPoolState } from "./targetPool";
export type TargetPool = import("./targetPool").TargetPool;
export declare const TargetPool: typeof import("./targetPool").TargetPool;
export { TargetSSLProxyArgs, TargetSSLProxyState } from "./targetSSLProxy";
export type TargetSSLProxy = import("./targetSSLProxy").TargetSSLProxy;
export declare const TargetSSLProxy: typeof import("./targetSSLProxy").TargetSSLProxy;
export { TargetTCPProxyArgs, TargetTCPProxyState } from "./targetTCPProxy";
export type TargetTCPProxy = import("./targetTCPProxy").TargetTCPProxy;
export declare const TargetTCPProxy: typeof import("./targetTCPProxy").TargetTCPProxy;
export { URLMapArgs, URLMapState } from "./urlmap";
export type URLMap = import("./urlmap").URLMap;
export declare const URLMap: typeof import("./urlmap").URLMap;
export { VPNGatewayArgs, VPNGatewayState } from "./vpngateway";
export type VPNGateway = import("./vpngateway").VPNGateway;
export declare const VPNGateway: typeof import("./vpngateway").VPNGateway;
export { VPNTunnelArgs, VPNTunnelState } from "./vpntunnel";
export type VPNTunnel = import("./vpntunnel").VPNTunnel;
export declare const VPNTunnel: typeof import("./vpntunnel").VPNTunnel;
