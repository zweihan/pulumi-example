"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackendServiceSignedUrlKey = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A key for signing Cloud CDN signed URLs for Backend Services.
 *
 * To get more information about BackendServiceSignedUrlKey, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices)
 * * How-to Guides
 *     * [Using Signed URLs](https://cloud.google.com/cdn/docs/using-signed-urls/)
 *
 * > **Warning:** All arguments including `keyValue` will be stored in the raw
 * state as plain-text.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * This resource does not support import.
 */
class BackendServiceSignedUrlKey extends pulumi.CustomResource {
    /**
     * Get an existing BackendServiceSignedUrlKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BackendServiceSignedUrlKey(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of BackendServiceSignedUrlKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackendServiceSignedUrlKey.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["backendService"] = state ? state.backendService : undefined;
            resourceInputs["keyValue"] = state ? state.keyValue : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.backendService === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendService'");
            }
            if ((!args || args.keyValue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyValue'");
            }
            resourceInputs["backendService"] = args ? args.backendService : undefined;
            resourceInputs["keyValue"] = (args === null || args === void 0 ? void 0 : args.keyValue) ? pulumi.secret(args.keyValue) : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["keyValue"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BackendServiceSignedUrlKey.__pulumiType, name, resourceInputs, opts);
    }
}
exports.BackendServiceSignedUrlKey = BackendServiceSignedUrlKey;
/** @internal */
BackendServiceSignedUrlKey.__pulumiType = 'gcp:compute/backendServiceSignedUrlKey:BackendServiceSignedUrlKey';
//# sourceMappingURL=backendServiceSignedUrlKey.js.map