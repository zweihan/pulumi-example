"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackendBucket = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Backend buckets allow you to use Google Cloud Storage buckets with HTTP(S)
 * load balancing.
 *
 * An HTTP(S) load balancer can direct traffic to specified URLs to a
 * backend bucket rather than a backend service. It can send requests for
 * static content to a Cloud Storage bucket and requests for dynamic content
 * to a virtual machine instance.
 *
 * To get more information about BackendBucket, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/v1/backendBuckets)
 * * How-to Guides
 *     * [Using a Cloud Storage bucket as a load balancer backend](https://cloud.google.com/compute/docs/load-balancing/http/backend-bucket)
 *
 * ## Example Usage
 * ### Backend Bucket Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const imageBucket = new gcp.storage.Bucket("imageBucket", {location: "EU"});
 * const imageBackend = new gcp.compute.BackendBucket("imageBackend", {
 *     description: "Contains beautiful images",
 *     bucketName: imageBucket.name,
 *     enableCdn: true,
 * });
 * ```
 * ### Backend Bucket Security Policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const imageBackendBucket = new gcp.storage.Bucket("imageBackendBucket", {location: "EU"});
 * const policy = new gcp.compute.SecurityPolicy("policy", {
 *     description: "basic security policy",
 *     type: "CLOUD_ARMOR_EDGE",
 * });
 * const imageBackendBackendBucket = new gcp.compute.BackendBucket("imageBackendBackendBucket", {
 *     description: "Contains beautiful images",
 *     bucketName: imageBackendBucket.name,
 *     enableCdn: true,
 *     edgeSecurityPolicy: policy.id,
 * });
 * ```
 * ### Backend Bucket Query String Whitelist
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const imageBucket = new gcp.storage.Bucket("imageBucket", {location: "EU"});
 * const imageBackend = new gcp.compute.BackendBucket("imageBackend", {
 *     description: "Contains beautiful images",
 *     bucketName: imageBucket.name,
 *     enableCdn: true,
 *     cdnPolicy: {
 *         cacheKeyPolicy: {
 *             queryStringWhitelists: ["image-version"],
 *         },
 *     },
 * });
 * ```
 * ### Backend Bucket Include Http Headers
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const imageBucket = new gcp.storage.Bucket("imageBucket", {location: "EU"});
 * const imageBackend = new gcp.compute.BackendBucket("imageBackend", {
 *     description: "Contains beautiful images",
 *     bucketName: imageBucket.name,
 *     enableCdn: true,
 *     cdnPolicy: {
 *         cacheKeyPolicy: {
 *             includeHttpHeaders: ["X-My-Header-Field"],
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * BackendBucket can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:compute/backendBucket:BackendBucket default projects/{{project}}/global/backendBuckets/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/backendBucket:BackendBucket default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/backendBucket:BackendBucket default {{name}}
 * ```
 */
class BackendBucket extends pulumi.CustomResource {
    /**
     * Get an existing BackendBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BackendBucket(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of BackendBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackendBucket.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["cdnPolicy"] = state ? state.cdnPolicy : undefined;
            resourceInputs["compressionMode"] = state ? state.compressionMode : undefined;
            resourceInputs["creationTimestamp"] = state ? state.creationTimestamp : undefined;
            resourceInputs["customResponseHeaders"] = state ? state.customResponseHeaders : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["edgeSecurityPolicy"] = state ? state.edgeSecurityPolicy : undefined;
            resourceInputs["enableCdn"] = state ? state.enableCdn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["cdnPolicy"] = args ? args.cdnPolicy : undefined;
            resourceInputs["compressionMode"] = args ? args.compressionMode : undefined;
            resourceInputs["customResponseHeaders"] = args ? args.customResponseHeaders : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["edgeSecurityPolicy"] = args ? args.edgeSecurityPolicy : undefined;
            resourceInputs["enableCdn"] = args ? args.enableCdn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackendBucket.__pulumiType, name, resourceInputs, opts);
    }
}
exports.BackendBucket = BackendBucket;
/** @internal */
BackendBucket.__pulumiType = 'gcp:compute/backendBucket:BackendBucket';
//# sourceMappingURL=backendBucket.js.map