"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationSecurityPolicyAssociation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * An association for the OrganizationSecurityPolicy.
 *
 * To get more information about OrganizationSecurityPolicyAssociation, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/organizationSecurityPolicies/addAssociation)
 * * How-to Guides
 *     * [Associating a policy with the organization or folder](https://cloud.google.com/vpc/docs/using-firewall-policies#associate)
 *
 * ## Example Usage
 * ### Organization Security Policy Association Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const securityPolicyTarget = new gcp.organizations.Folder("securityPolicyTarget", {
 *     displayName: "tf-test-secpol",
 *     parent: "organizations/123456789",
 * }, {
 *     provider: google_beta,
 * });
 * const policyOrganizationSecurityPolicy = new gcp.compute.OrganizationSecurityPolicy("policyOrganizationSecurityPolicy", {
 *     displayName: "tf-test",
 *     parent: securityPolicyTarget.name,
 * }, {
 *     provider: google_beta,
 * });
 * const policyOrganizationSecurityPolicyRule = new gcp.compute.OrganizationSecurityPolicyRule("policyOrganizationSecurityPolicyRule", {
 *     policyId: policyOrganizationSecurityPolicy.id,
 *     action: "allow",
 *     direction: "INGRESS",
 *     enableLogging: true,
 *     match: {
 *         config: {
 *             srcIpRanges: [
 *                 "192.168.0.0/16",
 *                 "10.0.0.0/8",
 *             ],
 *             layer4Configs: [
 *                 {
 *                     ipProtocol: "tcp",
 *                     ports: ["22"],
 *                 },
 *                 {
 *                     ipProtocol: "icmp",
 *                 },
 *             ],
 *         },
 *     },
 *     priority: 100,
 * }, {
 *     provider: google_beta,
 * });
 * const policyOrganizationSecurityPolicyAssociation = new gcp.compute.OrganizationSecurityPolicyAssociation("policyOrganizationSecurityPolicyAssociation", {
 *     attachmentId: policyOrganizationSecurityPolicy.parent,
 *     policyId: policyOrganizationSecurityPolicy.id,
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * OrganizationSecurityPolicyAssociation can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:compute/organizationSecurityPolicyAssociation:OrganizationSecurityPolicyAssociation default {{policy_id}}/association/{{name}}
 * ```
 */
class OrganizationSecurityPolicyAssociation extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationSecurityPolicyAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new OrganizationSecurityPolicyAssociation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of OrganizationSecurityPolicyAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationSecurityPolicyAssociation.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["attachmentId"] = state ? state.attachmentId : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.attachmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attachmentId'");
            }
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["attachmentId"] = args ? args.attachmentId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["displayName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationSecurityPolicyAssociation.__pulumiType, name, resourceInputs, opts);
    }
}
exports.OrganizationSecurityPolicyAssociation = OrganizationSecurityPolicyAssociation;
/** @internal */
OrganizationSecurityPolicyAssociation.__pulumiType = 'gcp:compute/organizationSecurityPolicyAssociation:OrganizationSecurityPolicyAssociation';
//# sourceMappingURL=organizationSecurityPolicyAssociation.js.map