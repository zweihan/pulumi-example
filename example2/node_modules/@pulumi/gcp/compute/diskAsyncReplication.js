"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiskAsyncReplication = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Starts and stops asynchronous persistent disk replication. For more information
 * see [the official documentation](https://cloud.google.com/compute/docs/disks/async-pd/about)
 * and the [API](https://cloud.google.com/compute/docs/reference/rest/beta/disks).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary_disk = new gcp.compute.Disk("primary-disk", {
 *     type: "pd-ssd",
 *     zone: "europe-west4-a",
 *     physicalBlockSizeBytes: 4096,
 * });
 * const secondary_disk = new gcp.compute.Disk("secondary-disk", {
 *     type: "pd-ssd",
 *     zone: "europe-west3-a",
 *     asyncPrimaryDisk: {
 *         disk: primary_disk.id,
 *     },
 *     physicalBlockSizeBytes: 4096,
 * });
 * const replication = new gcp.compute.DiskAsyncReplication("replication", {
 *     primaryDisk: primary_disk.id,
 *     secondaryDisk: {
 *         disk: secondary_disk.id,
 *     },
 * });
 * ```
 */
class DiskAsyncReplication extends pulumi.CustomResource {
    /**
     * Get an existing DiskAsyncReplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DiskAsyncReplication(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DiskAsyncReplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DiskAsyncReplication.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["primaryDisk"] = state ? state.primaryDisk : undefined;
            resourceInputs["secondaryDisk"] = state ? state.secondaryDisk : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.primaryDisk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryDisk'");
            }
            if ((!args || args.secondaryDisk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secondaryDisk'");
            }
            resourceInputs["primaryDisk"] = args ? args.primaryDisk : undefined;
            resourceInputs["secondaryDisk"] = args ? args.secondaryDisk : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DiskAsyncReplication.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DiskAsyncReplication = DiskAsyncReplication;
/** @internal */
DiskAsyncReplication.__pulumiType = 'gcp:compute/diskAsyncReplication:DiskAsyncReplication';
//# sourceMappingURL=diskAsyncReplication.js.map