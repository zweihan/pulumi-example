"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.URLMap = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * UrlMaps are used to route requests to a backend service based on rules
 * that you define for the host and path of an incoming URL.
 *
 * To get more information about UrlMap, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/urlMaps)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * UrlMap can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:compute/uRLMap:URLMap default projects/{{project}}/global/urlMaps/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/uRLMap:URLMap default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/uRLMap:URLMap default {{name}}
 * ```
 */
class URLMap extends pulumi.CustomResource {
    /**
     * Get an existing URLMap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new URLMap(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of URLMap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === URLMap.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["creationTimestamp"] = state ? state.creationTimestamp : undefined;
            resourceInputs["defaultRouteAction"] = state ? state.defaultRouteAction : undefined;
            resourceInputs["defaultService"] = state ? state.defaultService : undefined;
            resourceInputs["defaultUrlRedirect"] = state ? state.defaultUrlRedirect : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["headerAction"] = state ? state.headerAction : undefined;
            resourceInputs["hostRules"] = state ? state.hostRules : undefined;
            resourceInputs["mapId"] = state ? state.mapId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pathMatchers"] = state ? state.pathMatchers : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["tests"] = state ? state.tests : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["defaultRouteAction"] = args ? args.defaultRouteAction : undefined;
            resourceInputs["defaultService"] = args ? args.defaultService : undefined;
            resourceInputs["defaultUrlRedirect"] = args ? args.defaultUrlRedirect : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["headerAction"] = args ? args.headerAction : undefined;
            resourceInputs["hostRules"] = args ? args.hostRules : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pathMatchers"] = args ? args.pathMatchers : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["tests"] = args ? args.tests : undefined;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["fingerprint"] = undefined /*out*/;
            resourceInputs["mapId"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(URLMap.__pulumiType, name, resourceInputs, opts);
    }
}
exports.URLMap = URLMap;
/** @internal */
URLMap.__pulumiType = 'gcp:compute/uRLMap:URLMap';
//# sourceMappingURL=urlmap.js.map