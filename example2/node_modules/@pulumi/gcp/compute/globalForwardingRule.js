"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalForwardingRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Represents a GlobalForwardingRule resource. Global forwarding rules are
 * used to forward traffic to the correct load balancer for HTTP load
 * balancing. Global forwarding rules can only be used for HTTP load
 * balancing.
 *
 * For more information, see
 * https://cloud.google.com/compute/docs/load-balancing/http/
 *
 * ## Example Usage
 * ### Global Forwarding Rule External Managed
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultBackendService = new gcp.compute.BackendService("defaultBackendService", {
 *     portName: "http",
 *     protocol: "HTTP",
 *     timeoutSec: 10,
 *     loadBalancingScheme: "EXTERNAL_MANAGED",
 * });
 * const defaultURLMap = new gcp.compute.URLMap("defaultURLMap", {
 *     description: "a description",
 *     defaultService: defaultBackendService.id,
 *     hostRules: [{
 *         hosts: ["mysite.com"],
 *         pathMatcher: "allpaths",
 *     }],
 *     pathMatchers: [{
 *         name: "allpaths",
 *         defaultService: defaultBackendService.id,
 *         pathRules: [{
 *             paths: ["/*"],
 *             service: defaultBackendService.id,
 *         }],
 *     }],
 * });
 * const defaultTargetHttpProxy = new gcp.compute.TargetHttpProxy("defaultTargetHttpProxy", {
 *     description: "a description",
 *     urlMap: defaultURLMap.id,
 * });
 * const defaultGlobalForwardingRule = new gcp.compute.GlobalForwardingRule("defaultGlobalForwardingRule", {
 *     target: defaultTargetHttpProxy.id,
 *     portRange: "80",
 *     loadBalancingScheme: "EXTERNAL_MANAGED",
 * });
 * ```
 * ### Private Service Connect Google Apis
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network = new gcp.compute.Network("network", {
 *     project: "my-project-name",
 *     autoCreateSubnetworks: false,
 * }, {
 *     provider: google_beta,
 * });
 * const vpcSubnetwork = new gcp.compute.Subnetwork("vpcSubnetwork", {
 *     project: network.project,
 *     ipCidrRange: "10.2.0.0/16",
 *     region: "us-central1",
 *     network: network.id,
 *     privateIpGoogleAccess: true,
 * }, {
 *     provider: google_beta,
 * });
 * const defaultGlobalAddress = new gcp.compute.GlobalAddress("defaultGlobalAddress", {
 *     project: network.project,
 *     addressType: "INTERNAL",
 *     purpose: "PRIVATE_SERVICE_CONNECT",
 *     network: network.id,
 *     address: "100.100.100.106",
 * }, {
 *     provider: google_beta,
 * });
 * const defaultGlobalForwardingRule = new gcp.compute.GlobalForwardingRule("defaultGlobalForwardingRule", {
 *     project: network.project,
 *     target: "all-apis",
 *     network: network.id,
 *     ipAddress: defaultGlobalAddress.id,
 *     loadBalancingScheme: "",
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * GlobalForwardingRule can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:compute/globalForwardingRule:GlobalForwardingRule default projects/{{project}}/global/forwardingRules/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/globalForwardingRule:GlobalForwardingRule default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/globalForwardingRule:GlobalForwardingRule default {{name}}
 * ```
 */
class GlobalForwardingRule extends pulumi.CustomResource {
    /**
     * Get an existing GlobalForwardingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GlobalForwardingRule(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GlobalForwardingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalForwardingRule.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["allowPscGlobalAccess"] = state ? state.allowPscGlobalAccess : undefined;
            resourceInputs["baseForwardingRule"] = state ? state.baseForwardingRule : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["ipProtocol"] = state ? state.ipProtocol : undefined;
            resourceInputs["ipVersion"] = state ? state.ipVersion : undefined;
            resourceInputs["labelFingerprint"] = state ? state.labelFingerprint : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["loadBalancingScheme"] = state ? state.loadBalancingScheme : undefined;
            resourceInputs["metadataFilters"] = state ? state.metadataFilters : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["portRange"] = state ? state.portRange : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["pscConnectionId"] = state ? state.pscConnectionId : undefined;
            resourceInputs["pscConnectionStatus"] = state ? state.pscConnectionStatus : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["sourceIpRanges"] = state ? state.sourceIpRanges : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["allowPscGlobalAccess"] = args ? args.allowPscGlobalAccess : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["ipProtocol"] = args ? args.ipProtocol : undefined;
            resourceInputs["ipVersion"] = args ? args.ipVersion : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["loadBalancingScheme"] = args ? args.loadBalancingScheme : undefined;
            resourceInputs["metadataFilters"] = args ? args.metadataFilters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["portRange"] = args ? args.portRange : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["sourceIpRanges"] = args ? args.sourceIpRanges : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["baseForwardingRule"] = undefined /*out*/;
            resourceInputs["labelFingerprint"] = undefined /*out*/;
            resourceInputs["pscConnectionId"] = undefined /*out*/;
            resourceInputs["pscConnectionStatus"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalForwardingRule.__pulumiType, name, resourceInputs, opts);
    }
}
exports.GlobalForwardingRule = GlobalForwardingRule;
/** @internal */
GlobalForwardingRule.__pulumiType = 'gcp:compute/globalForwardingRule:GlobalForwardingRule';
//# sourceMappingURL=globalForwardingRule.js.map