"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MachineImage = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Represents a Machine Image resource. Machine images store all the configuration,
 * metadata, permissions, and data from one or more disks required to create a
 * Virtual machine (VM) instance.
 *
 * To get more information about MachineImage, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/machineImages)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/compute/docs/machine-images)
 *
 * ## Example Usage
 * ### Machine Image Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const vm = new gcp.compute.Instance("vm", {
 *     machineType: "e2-medium",
 *     bootDisk: {
 *         initializeParams: {
 *             image: "debian-cloud/debian-11",
 *         },
 *     },
 *     networkInterfaces: [{
 *         network: "default",
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * const image = new gcp.compute.MachineImage("image", {sourceInstance: vm.selfLink}, {
 *     provider: google_beta,
 * });
 * ```
 * ### Compute Machine Image Kms
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const vm = new gcp.compute.Instance("vm", {
 *     machineType: "e2-medium",
 *     bootDisk: {
 *         initializeParams: {
 *             image: "debian-cloud/debian-11",
 *         },
 *     },
 *     networkInterfaces: [{
 *         network: "default",
 *     }],
 * }, {
 *     provider: google_beta,
 * });
 * const keyRing = new gcp.kms.KeyRing("keyRing", {location: "us"}, {
 *     provider: google_beta,
 * });
 * const cryptoKey = new gcp.kms.CryptoKey("cryptoKey", {keyRing: keyRing.id}, {
 *     provider: google_beta,
 * });
 * const image = new gcp.compute.MachineImage("image", {
 *     sourceInstance: vm.selfLink,
 *     machineImageEncryptionKey: {
 *         kmsKeyName: cryptoKey.id,
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * MachineImage can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:compute/machineImage:MachineImage default projects/{{project}}/global/machineImages/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/machineImage:MachineImage default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:compute/machineImage:MachineImage default {{name}}
 * ```
 */
class MachineImage extends pulumi.CustomResource {
    /**
     * Get an existing MachineImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MachineImage(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MachineImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MachineImage.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["guestFlush"] = state ? state.guestFlush : undefined;
            resourceInputs["machineImageEncryptionKey"] = state ? state.machineImageEncryptionKey : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["sourceInstance"] = state ? state.sourceInstance : undefined;
            resourceInputs["storageLocations"] = state ? state.storageLocations : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.sourceInstance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceInstance'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["guestFlush"] = args ? args.guestFlush : undefined;
            resourceInputs["machineImageEncryptionKey"] = args ? args.machineImageEncryptionKey : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["sourceInstance"] = args ? args.sourceInstance : undefined;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["storageLocations"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MachineImage.__pulumiType, name, resourceInputs, opts);
    }
}
exports.MachineImage = MachineImage;
/** @internal */
MachineImage.__pulumiType = 'gcp:compute/machineImage:MachineImage';
//# sourceMappingURL=machineImage.js.map