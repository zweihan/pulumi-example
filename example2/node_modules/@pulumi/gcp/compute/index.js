"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHealthCheckOutput = exports.getHealthCheck = exports.getHcVpnGatewayOutput = exports.getHcVpnGateway = exports.getGlobalForwardingRuleOutput = exports.getGlobalForwardingRule = exports.getGlobalAddressOutput = exports.getGlobalAddress = exports.getForwardingRuleOutput = exports.getForwardingRule = exports.getDiskOutput = exports.getDisk = exports.getDefaultServiceAccountOutput = exports.getDefaultServiceAccount = exports.getCertificateOutput = exports.getCertificate = exports.getBackendServiceOutput = exports.getBackendService = exports.getBackendBucketOutput = exports.getBackendBucket = exports.getAddressesOutput = exports.getAddresses = exports.getAddressOutput = exports.getAddress = exports.ForwardingRule = exports.FirewallPolicyRule = exports.FirewallPolicyAssociation = exports.FirewallPolicy = exports.Firewall = exports.ExternalVpnGateway = exports.DiskResourcePolicyAttachment = exports.DiskIamPolicy = exports.DiskIamMember = exports.DiskIamBinding = exports.DiskAsyncReplication = exports.Disk = exports.BackendServiceSignedUrlKey = exports.BackendServiceIamPolicy = exports.BackendServiceIamMember = exports.BackendServiceIamBinding = exports.BackendService = exports.BackendBucketSignedUrlKey = exports.BackendBucketIamPolicy = exports.BackendBucketIamMember = exports.BackendBucketIamBinding = exports.BackendBucket = exports.Autoscaler = exports.Autoscalar = exports.AttachedDisk = exports.Address = void 0;
exports.getZones = exports.getVPNGatewayOutput = exports.getVPNGateway = exports.getSubnetworkOutput = exports.getSubnetwork = exports.getSnapshotOutput = exports.getSnapshot = exports.getSSLPolicyOutput = exports.getSSLPolicy = exports.getRouterStatusOutput = exports.getRouterStatus = exports.getRouterNatOutput = exports.getRouterNat = exports.getRouterOutput = exports.getRouter = exports.getResourcePolicyOutput = exports.getResourcePolicy = exports.getRegionsOutput = exports.getRegions = exports.getRegionSslCertificateOutput = exports.getRegionSslCertificate = exports.getRegionNetworkEndpointGroupOutput = exports.getRegionNetworkEndpointGroup = exports.getRegionInstanceTemplateOutput = exports.getRegionInstanceTemplate = exports.getRegionInstanceGroupOutput = exports.getRegionInstanceGroup = exports.getNodeTypesOutput = exports.getNodeTypes = exports.getNetworkPeeringOutput = exports.getNetworkPeering = exports.getNetworkEndpointGroupOutput = exports.getNetworkEndpointGroup = exports.getNetworkOutput = exports.getNetwork = exports.getNetblockIPRangesOutput = exports.getNetblockIPRanges = exports.getLBIPRanges = exports.getInstanceTemplateOutput = exports.getInstanceTemplate = exports.getInstanceSerialPortOutput = exports.getInstanceSerialPort = exports.getInstanceGroupManagerOutput = exports.getInstanceGroupManager = exports.getInstanceGroupOutput = exports.getInstanceGroup = exports.getInstanceOutput = exports.getInstance = exports.getImageOutput = exports.getImage = void 0;
exports.PublicDelegatedPrefix = exports.PublicAdvertisedPrefix = exports.ProjectMetadataItem = exports.ProjectMetadata = exports.ProjectDefaultNetworkTier = exports.PerInstanceConfig = exports.PacketMirroring = exports.OrganizationSecurityPolicyRule = exports.OrganizationSecurityPolicyAssociation = exports.OrganizationSecurityPolicy = exports.NodeTemplate = exports.NodeGroup = exports.NetworkPeeringRoutesConfig = exports.NetworkPeering = exports.NetworkFirewallPolicyRule = exports.NetworkFirewallPolicyAssociation = exports.NetworkFirewallPolicy = exports.NetworkEndpointGroup = exports.NetworkEndpoint = exports.Network = exports.MangedSslCertificate = exports.ManagedSslCertificate = exports.MachineImageIamPolicy = exports.MachineImageIamMember = exports.MachineImageIamBinding = exports.MachineImage = exports.InterconnectAttachment = exports.InstanceTemplate = exports.InstanceIAMPolicy = exports.InstanceIAMMember = exports.InstanceIAMBinding = exports.InstanceGroupNamedPort = exports.InstanceGroupManager = exports.InstanceGroup = exports.InstanceFromTemplate = exports.InstanceFromMachineImage = exports.Instance = exports.ImageIamPolicy = exports.ImageIamMember = exports.ImageIamBinding = exports.Image = exports.HttpsHealthCheck = exports.HttpHealthCheck = exports.HealthCheck = exports.HaVpnGateway = exports.GlobalNetworkEndpointGroup = exports.GlobalNetworkEndpoint = exports.GlobalForwardingRule = exports.GlobalAddress = exports.getZonesOutput = void 0;
exports.TargetGrpcProxy = exports.SubnetworkIAMPolicy = exports.SubnetworkIAMMember = exports.SubnetworkIAMBinding = exports.Subnetwork = exports.SSLPolicy = exports.SSLCertificate = exports.SnapshotIamPolicy = exports.SnapshotIamMember = exports.SnapshotIamBinding = exports.Snapshot = exports.SharedVPCServiceProject = exports.SharedVPCHostProject = exports.ServiceAttachment = exports.SecurityScanConfig = exports.SecurityPolicy = exports.routerStatusOutput = exports.routerStatus = exports.RouterPeer = exports.RouterNat = exports.RouterInterface = exports.Router = exports.Route = exports.ResourcePolicy = exports.Reservation = exports.RegionUrlMap = exports.RegionTargetTcpProxy = exports.RegionTargetHttpsProxy = exports.RegionTargetHttpProxy = exports.RegionSslPolicy = exports.RegionSslCertificate = exports.RegionPerInstanceConfig = exports.RegionNetworkFirewallPolicyRule = exports.RegionNetworkFirewallPolicyAssociation = exports.RegionNetworkFirewallPolicy = exports.RegionNetworkEndpointGroup = exports.RegionInstanceTemplate = exports.RegionInstanceGroupManager = exports.RegionHealthCheck = exports.RegionDiskResourcePolicyAttachment = exports.RegionDiskIamPolicy = exports.RegionDiskIamMember = exports.RegionDiskIamBinding = exports.RegionDisk = exports.RegionCommitment = exports.RegionBackendServiceIamPolicy = exports.RegionBackendServiceIamMember = exports.RegionBackendServiceIamBinding = exports.RegionBackendService = exports.RegionAutoscaler = void 0;
exports.VPNTunnel = exports.VPNGateway = exports.URLMap = exports.TargetTCPProxy = exports.TargetSSLProxy = exports.TargetPool = exports.TargetInstance = exports.TargetHttpsProxy = exports.TargetHttpProxy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Address = null;
utilities.lazyLoad(exports, ["Address"], () => require("./address"));
exports.AttachedDisk = null;
utilities.lazyLoad(exports, ["AttachedDisk"], () => require("./attachedDisk"));
exports.Autoscalar = null;
utilities.lazyLoad(exports, ["Autoscalar"], () => require("./autoscalar"));
exports.Autoscaler = null;
utilities.lazyLoad(exports, ["Autoscaler"], () => require("./autoscaler"));
exports.BackendBucket = null;
utilities.lazyLoad(exports, ["BackendBucket"], () => require("./backendBucket"));
exports.BackendBucketIamBinding = null;
utilities.lazyLoad(exports, ["BackendBucketIamBinding"], () => require("./backendBucketIamBinding"));
exports.BackendBucketIamMember = null;
utilities.lazyLoad(exports, ["BackendBucketIamMember"], () => require("./backendBucketIamMember"));
exports.BackendBucketIamPolicy = null;
utilities.lazyLoad(exports, ["BackendBucketIamPolicy"], () => require("./backendBucketIamPolicy"));
exports.BackendBucketSignedUrlKey = null;
utilities.lazyLoad(exports, ["BackendBucketSignedUrlKey"], () => require("./backendBucketSignedUrlKey"));
exports.BackendService = null;
utilities.lazyLoad(exports, ["BackendService"], () => require("./backendService"));
exports.BackendServiceIamBinding = null;
utilities.lazyLoad(exports, ["BackendServiceIamBinding"], () => require("./backendServiceIamBinding"));
exports.BackendServiceIamMember = null;
utilities.lazyLoad(exports, ["BackendServiceIamMember"], () => require("./backendServiceIamMember"));
exports.BackendServiceIamPolicy = null;
utilities.lazyLoad(exports, ["BackendServiceIamPolicy"], () => require("./backendServiceIamPolicy"));
exports.BackendServiceSignedUrlKey = null;
utilities.lazyLoad(exports, ["BackendServiceSignedUrlKey"], () => require("./backendServiceSignedUrlKey"));
exports.Disk = null;
utilities.lazyLoad(exports, ["Disk"], () => require("./disk"));
exports.DiskAsyncReplication = null;
utilities.lazyLoad(exports, ["DiskAsyncReplication"], () => require("./diskAsyncReplication"));
exports.DiskIamBinding = null;
utilities.lazyLoad(exports, ["DiskIamBinding"], () => require("./diskIamBinding"));
exports.DiskIamMember = null;
utilities.lazyLoad(exports, ["DiskIamMember"], () => require("./diskIamMember"));
exports.DiskIamPolicy = null;
utilities.lazyLoad(exports, ["DiskIamPolicy"], () => require("./diskIamPolicy"));
exports.DiskResourcePolicyAttachment = null;
utilities.lazyLoad(exports, ["DiskResourcePolicyAttachment"], () => require("./diskResourcePolicyAttachment"));
exports.ExternalVpnGateway = null;
utilities.lazyLoad(exports, ["ExternalVpnGateway"], () => require("./externalVpnGateway"));
exports.Firewall = null;
utilities.lazyLoad(exports, ["Firewall"], () => require("./firewall"));
exports.FirewallPolicy = null;
utilities.lazyLoad(exports, ["FirewallPolicy"], () => require("./firewallPolicy"));
exports.FirewallPolicyAssociation = null;
utilities.lazyLoad(exports, ["FirewallPolicyAssociation"], () => require("./firewallPolicyAssociation"));
exports.FirewallPolicyRule = null;
utilities.lazyLoad(exports, ["FirewallPolicyRule"], () => require("./firewallPolicyRule"));
exports.ForwardingRule = null;
utilities.lazyLoad(exports, ["ForwardingRule"], () => require("./forwardingRule"));
exports.getAddress = null;
exports.getAddressOutput = null;
utilities.lazyLoad(exports, ["getAddress", "getAddressOutput"], () => require("./getAddress"));
exports.getAddresses = null;
exports.getAddressesOutput = null;
utilities.lazyLoad(exports, ["getAddresses", "getAddressesOutput"], () => require("./getAddresses"));
exports.getBackendBucket = null;
exports.getBackendBucketOutput = null;
utilities.lazyLoad(exports, ["getBackendBucket", "getBackendBucketOutput"], () => require("./getBackendBucket"));
exports.getBackendService = null;
exports.getBackendServiceOutput = null;
utilities.lazyLoad(exports, ["getBackendService", "getBackendServiceOutput"], () => require("./getBackendService"));
exports.getCertificate = null;
exports.getCertificateOutput = null;
utilities.lazyLoad(exports, ["getCertificate", "getCertificateOutput"], () => require("./getCertificate"));
exports.getDefaultServiceAccount = null;
exports.getDefaultServiceAccountOutput = null;
utilities.lazyLoad(exports, ["getDefaultServiceAccount", "getDefaultServiceAccountOutput"], () => require("./getDefaultServiceAccount"));
exports.getDisk = null;
exports.getDiskOutput = null;
utilities.lazyLoad(exports, ["getDisk", "getDiskOutput"], () => require("./getDisk"));
exports.getForwardingRule = null;
exports.getForwardingRuleOutput = null;
utilities.lazyLoad(exports, ["getForwardingRule", "getForwardingRuleOutput"], () => require("./getForwardingRule"));
exports.getGlobalAddress = null;
exports.getGlobalAddressOutput = null;
utilities.lazyLoad(exports, ["getGlobalAddress", "getGlobalAddressOutput"], () => require("./getGlobalAddress"));
exports.getGlobalForwardingRule = null;
exports.getGlobalForwardingRuleOutput = null;
utilities.lazyLoad(exports, ["getGlobalForwardingRule", "getGlobalForwardingRuleOutput"], () => require("./getGlobalForwardingRule"));
exports.getHcVpnGateway = null;
exports.getHcVpnGatewayOutput = null;
utilities.lazyLoad(exports, ["getHcVpnGateway", "getHcVpnGatewayOutput"], () => require("./getHcVpnGateway"));
exports.getHealthCheck = null;
exports.getHealthCheckOutput = null;
utilities.lazyLoad(exports, ["getHealthCheck", "getHealthCheckOutput"], () => require("./getHealthCheck"));
exports.getImage = null;
exports.getImageOutput = null;
utilities.lazyLoad(exports, ["getImage", "getImageOutput"], () => require("./getImage"));
exports.getInstance = null;
exports.getInstanceOutput = null;
utilities.lazyLoad(exports, ["getInstance", "getInstanceOutput"], () => require("./getInstance"));
exports.getInstanceGroup = null;
exports.getInstanceGroupOutput = null;
utilities.lazyLoad(exports, ["getInstanceGroup", "getInstanceGroupOutput"], () => require("./getInstanceGroup"));
exports.getInstanceGroupManager = null;
exports.getInstanceGroupManagerOutput = null;
utilities.lazyLoad(exports, ["getInstanceGroupManager", "getInstanceGroupManagerOutput"], () => require("./getInstanceGroupManager"));
exports.getInstanceSerialPort = null;
exports.getInstanceSerialPortOutput = null;
utilities.lazyLoad(exports, ["getInstanceSerialPort", "getInstanceSerialPortOutput"], () => require("./getInstanceSerialPort"));
exports.getInstanceTemplate = null;
exports.getInstanceTemplateOutput = null;
utilities.lazyLoad(exports, ["getInstanceTemplate", "getInstanceTemplateOutput"], () => require("./getInstanceTemplate"));
exports.getLBIPRanges = null;
utilities.lazyLoad(exports, ["getLBIPRanges"], () => require("./getLBIPRanges"));
exports.getNetblockIPRanges = null;
exports.getNetblockIPRangesOutput = null;
utilities.lazyLoad(exports, ["getNetblockIPRanges", "getNetblockIPRangesOutput"], () => require("./getNetblockIPRanges"));
exports.getNetwork = null;
exports.getNetworkOutput = null;
utilities.lazyLoad(exports, ["getNetwork", "getNetworkOutput"], () => require("./getNetwork"));
exports.getNetworkEndpointGroup = null;
exports.getNetworkEndpointGroupOutput = null;
utilities.lazyLoad(exports, ["getNetworkEndpointGroup", "getNetworkEndpointGroupOutput"], () => require("./getNetworkEndpointGroup"));
exports.getNetworkPeering = null;
exports.getNetworkPeeringOutput = null;
utilities.lazyLoad(exports, ["getNetworkPeering", "getNetworkPeeringOutput"], () => require("./getNetworkPeering"));
exports.getNodeTypes = null;
exports.getNodeTypesOutput = null;
utilities.lazyLoad(exports, ["getNodeTypes", "getNodeTypesOutput"], () => require("./getNodeTypes"));
exports.getRegionInstanceGroup = null;
exports.getRegionInstanceGroupOutput = null;
utilities.lazyLoad(exports, ["getRegionInstanceGroup", "getRegionInstanceGroupOutput"], () => require("./getRegionInstanceGroup"));
exports.getRegionInstanceTemplate = null;
exports.getRegionInstanceTemplateOutput = null;
utilities.lazyLoad(exports, ["getRegionInstanceTemplate", "getRegionInstanceTemplateOutput"], () => require("./getRegionInstanceTemplate"));
exports.getRegionNetworkEndpointGroup = null;
exports.getRegionNetworkEndpointGroupOutput = null;
utilities.lazyLoad(exports, ["getRegionNetworkEndpointGroup", "getRegionNetworkEndpointGroupOutput"], () => require("./getRegionNetworkEndpointGroup"));
exports.getRegionSslCertificate = null;
exports.getRegionSslCertificateOutput = null;
utilities.lazyLoad(exports, ["getRegionSslCertificate", "getRegionSslCertificateOutput"], () => require("./getRegionSslCertificate"));
exports.getRegions = null;
exports.getRegionsOutput = null;
utilities.lazyLoad(exports, ["getRegions", "getRegionsOutput"], () => require("./getRegions"));
exports.getResourcePolicy = null;
exports.getResourcePolicyOutput = null;
utilities.lazyLoad(exports, ["getResourcePolicy", "getResourcePolicyOutput"], () => require("./getResourcePolicy"));
exports.getRouter = null;
exports.getRouterOutput = null;
utilities.lazyLoad(exports, ["getRouter", "getRouterOutput"], () => require("./getRouter"));
exports.getRouterNat = null;
exports.getRouterNatOutput = null;
utilities.lazyLoad(exports, ["getRouterNat", "getRouterNatOutput"], () => require("./getRouterNat"));
exports.getRouterStatus = null;
exports.getRouterStatusOutput = null;
utilities.lazyLoad(exports, ["getRouterStatus", "getRouterStatusOutput"], () => require("./getRouterStatus"));
exports.getSSLPolicy = null;
exports.getSSLPolicyOutput = null;
utilities.lazyLoad(exports, ["getSSLPolicy", "getSSLPolicyOutput"], () => require("./getSSLPolicy"));
exports.getSnapshot = null;
exports.getSnapshotOutput = null;
utilities.lazyLoad(exports, ["getSnapshot", "getSnapshotOutput"], () => require("./getSnapshot"));
exports.getSubnetwork = null;
exports.getSubnetworkOutput = null;
utilities.lazyLoad(exports, ["getSubnetwork", "getSubnetworkOutput"], () => require("./getSubnetwork"));
exports.getVPNGateway = null;
exports.getVPNGatewayOutput = null;
utilities.lazyLoad(exports, ["getVPNGateway", "getVPNGatewayOutput"], () => require("./getVPNGateway"));
exports.getZones = null;
exports.getZonesOutput = null;
utilities.lazyLoad(exports, ["getZones", "getZonesOutput"], () => require("./getZones"));
exports.GlobalAddress = null;
utilities.lazyLoad(exports, ["GlobalAddress"], () => require("./globalAddress"));
exports.GlobalForwardingRule = null;
utilities.lazyLoad(exports, ["GlobalForwardingRule"], () => require("./globalForwardingRule"));
exports.GlobalNetworkEndpoint = null;
utilities.lazyLoad(exports, ["GlobalNetworkEndpoint"], () => require("./globalNetworkEndpoint"));
exports.GlobalNetworkEndpointGroup = null;
utilities.lazyLoad(exports, ["GlobalNetworkEndpointGroup"], () => require("./globalNetworkEndpointGroup"));
exports.HaVpnGateway = null;
utilities.lazyLoad(exports, ["HaVpnGateway"], () => require("./haVpnGateway"));
exports.HealthCheck = null;
utilities.lazyLoad(exports, ["HealthCheck"], () => require("./healthCheck"));
exports.HttpHealthCheck = null;
utilities.lazyLoad(exports, ["HttpHealthCheck"], () => require("./httpHealthCheck"));
exports.HttpsHealthCheck = null;
utilities.lazyLoad(exports, ["HttpsHealthCheck"], () => require("./httpsHealthCheck"));
exports.Image = null;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));
exports.ImageIamBinding = null;
utilities.lazyLoad(exports, ["ImageIamBinding"], () => require("./imageIamBinding"));
exports.ImageIamMember = null;
utilities.lazyLoad(exports, ["ImageIamMember"], () => require("./imageIamMember"));
exports.ImageIamPolicy = null;
utilities.lazyLoad(exports, ["ImageIamPolicy"], () => require("./imageIamPolicy"));
exports.Instance = null;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));
exports.InstanceFromMachineImage = null;
utilities.lazyLoad(exports, ["InstanceFromMachineImage"], () => require("./instanceFromMachineImage"));
exports.InstanceFromTemplate = null;
utilities.lazyLoad(exports, ["InstanceFromTemplate"], () => require("./instanceFromTemplate"));
exports.InstanceGroup = null;
utilities.lazyLoad(exports, ["InstanceGroup"], () => require("./instanceGroup"));
exports.InstanceGroupManager = null;
utilities.lazyLoad(exports, ["InstanceGroupManager"], () => require("./instanceGroupManager"));
exports.InstanceGroupNamedPort = null;
utilities.lazyLoad(exports, ["InstanceGroupNamedPort"], () => require("./instanceGroupNamedPort"));
exports.InstanceIAMBinding = null;
utilities.lazyLoad(exports, ["InstanceIAMBinding"], () => require("./instanceIAMBinding"));
exports.InstanceIAMMember = null;
utilities.lazyLoad(exports, ["InstanceIAMMember"], () => require("./instanceIAMMember"));
exports.InstanceIAMPolicy = null;
utilities.lazyLoad(exports, ["InstanceIAMPolicy"], () => require("./instanceIAMPolicy"));
exports.InstanceTemplate = null;
utilities.lazyLoad(exports, ["InstanceTemplate"], () => require("./instanceTemplate"));
exports.InterconnectAttachment = null;
utilities.lazyLoad(exports, ["InterconnectAttachment"], () => require("./interconnectAttachment"));
exports.MachineImage = null;
utilities.lazyLoad(exports, ["MachineImage"], () => require("./machineImage"));
exports.MachineImageIamBinding = null;
utilities.lazyLoad(exports, ["MachineImageIamBinding"], () => require("./machineImageIamBinding"));
exports.MachineImageIamMember = null;
utilities.lazyLoad(exports, ["MachineImageIamMember"], () => require("./machineImageIamMember"));
exports.MachineImageIamPolicy = null;
utilities.lazyLoad(exports, ["MachineImageIamPolicy"], () => require("./machineImageIamPolicy"));
exports.ManagedSslCertificate = null;
utilities.lazyLoad(exports, ["ManagedSslCertificate"], () => require("./managedSslCertificate"));
exports.MangedSslCertificate = null;
utilities.lazyLoad(exports, ["MangedSslCertificate"], () => require("./mangedSslCertificate"));
exports.Network = null;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));
exports.NetworkEndpoint = null;
utilities.lazyLoad(exports, ["NetworkEndpoint"], () => require("./networkEndpoint"));
exports.NetworkEndpointGroup = null;
utilities.lazyLoad(exports, ["NetworkEndpointGroup"], () => require("./networkEndpointGroup"));
exports.NetworkFirewallPolicy = null;
utilities.lazyLoad(exports, ["NetworkFirewallPolicy"], () => require("./networkFirewallPolicy"));
exports.NetworkFirewallPolicyAssociation = null;
utilities.lazyLoad(exports, ["NetworkFirewallPolicyAssociation"], () => require("./networkFirewallPolicyAssociation"));
exports.NetworkFirewallPolicyRule = null;
utilities.lazyLoad(exports, ["NetworkFirewallPolicyRule"], () => require("./networkFirewallPolicyRule"));
exports.NetworkPeering = null;
utilities.lazyLoad(exports, ["NetworkPeering"], () => require("./networkPeering"));
exports.NetworkPeeringRoutesConfig = null;
utilities.lazyLoad(exports, ["NetworkPeeringRoutesConfig"], () => require("./networkPeeringRoutesConfig"));
exports.NodeGroup = null;
utilities.lazyLoad(exports, ["NodeGroup"], () => require("./nodeGroup"));
exports.NodeTemplate = null;
utilities.lazyLoad(exports, ["NodeTemplate"], () => require("./nodeTemplate"));
exports.OrganizationSecurityPolicy = null;
utilities.lazyLoad(exports, ["OrganizationSecurityPolicy"], () => require("./organizationSecurityPolicy"));
exports.OrganizationSecurityPolicyAssociation = null;
utilities.lazyLoad(exports, ["OrganizationSecurityPolicyAssociation"], () => require("./organizationSecurityPolicyAssociation"));
exports.OrganizationSecurityPolicyRule = null;
utilities.lazyLoad(exports, ["OrganizationSecurityPolicyRule"], () => require("./organizationSecurityPolicyRule"));
exports.PacketMirroring = null;
utilities.lazyLoad(exports, ["PacketMirroring"], () => require("./packetMirroring"));
exports.PerInstanceConfig = null;
utilities.lazyLoad(exports, ["PerInstanceConfig"], () => require("./perInstanceConfig"));
exports.ProjectDefaultNetworkTier = null;
utilities.lazyLoad(exports, ["ProjectDefaultNetworkTier"], () => require("./projectDefaultNetworkTier"));
exports.ProjectMetadata = null;
utilities.lazyLoad(exports, ["ProjectMetadata"], () => require("./projectMetadata"));
exports.ProjectMetadataItem = null;
utilities.lazyLoad(exports, ["ProjectMetadataItem"], () => require("./projectMetadataItem"));
exports.PublicAdvertisedPrefix = null;
utilities.lazyLoad(exports, ["PublicAdvertisedPrefix"], () => require("./publicAdvertisedPrefix"));
exports.PublicDelegatedPrefix = null;
utilities.lazyLoad(exports, ["PublicDelegatedPrefix"], () => require("./publicDelegatedPrefix"));
exports.RegionAutoscaler = null;
utilities.lazyLoad(exports, ["RegionAutoscaler"], () => require("./regionAutoscaler"));
exports.RegionBackendService = null;
utilities.lazyLoad(exports, ["RegionBackendService"], () => require("./regionBackendService"));
exports.RegionBackendServiceIamBinding = null;
utilities.lazyLoad(exports, ["RegionBackendServiceIamBinding"], () => require("./regionBackendServiceIamBinding"));
exports.RegionBackendServiceIamMember = null;
utilities.lazyLoad(exports, ["RegionBackendServiceIamMember"], () => require("./regionBackendServiceIamMember"));
exports.RegionBackendServiceIamPolicy = null;
utilities.lazyLoad(exports, ["RegionBackendServiceIamPolicy"], () => require("./regionBackendServiceIamPolicy"));
exports.RegionCommitment = null;
utilities.lazyLoad(exports, ["RegionCommitment"], () => require("./regionCommitment"));
exports.RegionDisk = null;
utilities.lazyLoad(exports, ["RegionDisk"], () => require("./regionDisk"));
exports.RegionDiskIamBinding = null;
utilities.lazyLoad(exports, ["RegionDiskIamBinding"], () => require("./regionDiskIamBinding"));
exports.RegionDiskIamMember = null;
utilities.lazyLoad(exports, ["RegionDiskIamMember"], () => require("./regionDiskIamMember"));
exports.RegionDiskIamPolicy = null;
utilities.lazyLoad(exports, ["RegionDiskIamPolicy"], () => require("./regionDiskIamPolicy"));
exports.RegionDiskResourcePolicyAttachment = null;
utilities.lazyLoad(exports, ["RegionDiskResourcePolicyAttachment"], () => require("./regionDiskResourcePolicyAttachment"));
exports.RegionHealthCheck = null;
utilities.lazyLoad(exports, ["RegionHealthCheck"], () => require("./regionHealthCheck"));
exports.RegionInstanceGroupManager = null;
utilities.lazyLoad(exports, ["RegionInstanceGroupManager"], () => require("./regionInstanceGroupManager"));
exports.RegionInstanceTemplate = null;
utilities.lazyLoad(exports, ["RegionInstanceTemplate"], () => require("./regionInstanceTemplate"));
exports.RegionNetworkEndpointGroup = null;
utilities.lazyLoad(exports, ["RegionNetworkEndpointGroup"], () => require("./regionNetworkEndpointGroup"));
exports.RegionNetworkFirewallPolicy = null;
utilities.lazyLoad(exports, ["RegionNetworkFirewallPolicy"], () => require("./regionNetworkFirewallPolicy"));
exports.RegionNetworkFirewallPolicyAssociation = null;
utilities.lazyLoad(exports, ["RegionNetworkFirewallPolicyAssociation"], () => require("./regionNetworkFirewallPolicyAssociation"));
exports.RegionNetworkFirewallPolicyRule = null;
utilities.lazyLoad(exports, ["RegionNetworkFirewallPolicyRule"], () => require("./regionNetworkFirewallPolicyRule"));
exports.RegionPerInstanceConfig = null;
utilities.lazyLoad(exports, ["RegionPerInstanceConfig"], () => require("./regionPerInstanceConfig"));
exports.RegionSslCertificate = null;
utilities.lazyLoad(exports, ["RegionSslCertificate"], () => require("./regionSslCertificate"));
exports.RegionSslPolicy = null;
utilities.lazyLoad(exports, ["RegionSslPolicy"], () => require("./regionSslPolicy"));
exports.RegionTargetHttpProxy = null;
utilities.lazyLoad(exports, ["RegionTargetHttpProxy"], () => require("./regionTargetHttpProxy"));
exports.RegionTargetHttpsProxy = null;
utilities.lazyLoad(exports, ["RegionTargetHttpsProxy"], () => require("./regionTargetHttpsProxy"));
exports.RegionTargetTcpProxy = null;
utilities.lazyLoad(exports, ["RegionTargetTcpProxy"], () => require("./regionTargetTcpProxy"));
exports.RegionUrlMap = null;
utilities.lazyLoad(exports, ["RegionUrlMap"], () => require("./regionUrlMap"));
exports.Reservation = null;
utilities.lazyLoad(exports, ["Reservation"], () => require("./reservation"));
exports.ResourcePolicy = null;
utilities.lazyLoad(exports, ["ResourcePolicy"], () => require("./resourcePolicy"));
exports.Route = null;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));
exports.Router = null;
utilities.lazyLoad(exports, ["Router"], () => require("./router"));
exports.RouterInterface = null;
utilities.lazyLoad(exports, ["RouterInterface"], () => require("./routerInterface"));
exports.RouterNat = null;
utilities.lazyLoad(exports, ["RouterNat"], () => require("./routerNat"));
exports.RouterPeer = null;
utilities.lazyLoad(exports, ["RouterPeer"], () => require("./routerPeer"));
exports.routerStatus = null;
exports.routerStatusOutput = null;
utilities.lazyLoad(exports, ["routerStatus", "routerStatusOutput"], () => require("./routerStatus"));
exports.SecurityPolicy = null;
utilities.lazyLoad(exports, ["SecurityPolicy"], () => require("./securityPolicy"));
exports.SecurityScanConfig = null;
utilities.lazyLoad(exports, ["SecurityScanConfig"], () => require("./securityScanConfig"));
exports.ServiceAttachment = null;
utilities.lazyLoad(exports, ["ServiceAttachment"], () => require("./serviceAttachment"));
exports.SharedVPCHostProject = null;
utilities.lazyLoad(exports, ["SharedVPCHostProject"], () => require("./sharedVPCHostProject"));
exports.SharedVPCServiceProject = null;
utilities.lazyLoad(exports, ["SharedVPCServiceProject"], () => require("./sharedVPCServiceProject"));
exports.Snapshot = null;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));
exports.SnapshotIamBinding = null;
utilities.lazyLoad(exports, ["SnapshotIamBinding"], () => require("./snapshotIamBinding"));
exports.SnapshotIamMember = null;
utilities.lazyLoad(exports, ["SnapshotIamMember"], () => require("./snapshotIamMember"));
exports.SnapshotIamPolicy = null;
utilities.lazyLoad(exports, ["SnapshotIamPolicy"], () => require("./snapshotIamPolicy"));
exports.SSLCertificate = null;
utilities.lazyLoad(exports, ["SSLCertificate"], () => require("./sslcertificate"));
exports.SSLPolicy = null;
utilities.lazyLoad(exports, ["SSLPolicy"], () => require("./sslpolicy"));
exports.Subnetwork = null;
utilities.lazyLoad(exports, ["Subnetwork"], () => require("./subnetwork"));
exports.SubnetworkIAMBinding = null;
utilities.lazyLoad(exports, ["SubnetworkIAMBinding"], () => require("./subnetworkIAMBinding"));
exports.SubnetworkIAMMember = null;
utilities.lazyLoad(exports, ["SubnetworkIAMMember"], () => require("./subnetworkIAMMember"));
exports.SubnetworkIAMPolicy = null;
utilities.lazyLoad(exports, ["SubnetworkIAMPolicy"], () => require("./subnetworkIAMPolicy"));
exports.TargetGrpcProxy = null;
utilities.lazyLoad(exports, ["TargetGrpcProxy"], () => require("./targetGrpcProxy"));
exports.TargetHttpProxy = null;
utilities.lazyLoad(exports, ["TargetHttpProxy"], () => require("./targetHttpProxy"));
exports.TargetHttpsProxy = null;
utilities.lazyLoad(exports, ["TargetHttpsProxy"], () => require("./targetHttpsProxy"));
exports.TargetInstance = null;
utilities.lazyLoad(exports, ["TargetInstance"], () => require("./targetInstance"));
exports.TargetPool = null;
utilities.lazyLoad(exports, ["TargetPool"], () => require("./targetPool"));
exports.TargetSSLProxy = null;
utilities.lazyLoad(exports, ["TargetSSLProxy"], () => require("./targetSSLProxy"));
exports.TargetTCPProxy = null;
utilities.lazyLoad(exports, ["TargetTCPProxy"], () => require("./targetTCPProxy"));
exports.URLMap = null;
utilities.lazyLoad(exports, ["URLMap"], () => require("./urlmap"));
exports.VPNGateway = null;
utilities.lazyLoad(exports, ["VPNGateway"], () => require("./vpngateway"));
exports.VPNTunnel = null;
utilities.lazyLoad(exports, ["VPNTunnel"], () => require("./vpntunnel"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:compute/address:Address":
                return new exports.Address(name, undefined, { urn });
            case "gcp:compute/attachedDisk:AttachedDisk":
                return new exports.AttachedDisk(name, undefined, { urn });
            case "gcp:compute/autoscalar:Autoscalar":
                return new exports.Autoscalar(name, undefined, { urn });
            case "gcp:compute/autoscaler:Autoscaler":
                return new exports.Autoscaler(name, undefined, { urn });
            case "gcp:compute/backendBucket:BackendBucket":
                return new exports.BackendBucket(name, undefined, { urn });
            case "gcp:compute/backendBucketIamBinding:BackendBucketIamBinding":
                return new exports.BackendBucketIamBinding(name, undefined, { urn });
            case "gcp:compute/backendBucketIamMember:BackendBucketIamMember":
                return new exports.BackendBucketIamMember(name, undefined, { urn });
            case "gcp:compute/backendBucketIamPolicy:BackendBucketIamPolicy":
                return new exports.BackendBucketIamPolicy(name, undefined, { urn });
            case "gcp:compute/backendBucketSignedUrlKey:BackendBucketSignedUrlKey":
                return new exports.BackendBucketSignedUrlKey(name, undefined, { urn });
            case "gcp:compute/backendService:BackendService":
                return new exports.BackendService(name, undefined, { urn });
            case "gcp:compute/backendServiceIamBinding:BackendServiceIamBinding":
                return new exports.BackendServiceIamBinding(name, undefined, { urn });
            case "gcp:compute/backendServiceIamMember:BackendServiceIamMember":
                return new exports.BackendServiceIamMember(name, undefined, { urn });
            case "gcp:compute/backendServiceIamPolicy:BackendServiceIamPolicy":
                return new exports.BackendServiceIamPolicy(name, undefined, { urn });
            case "gcp:compute/backendServiceSignedUrlKey:BackendServiceSignedUrlKey":
                return new exports.BackendServiceSignedUrlKey(name, undefined, { urn });
            case "gcp:compute/disk:Disk":
                return new exports.Disk(name, undefined, { urn });
            case "gcp:compute/diskAsyncReplication:DiskAsyncReplication":
                return new exports.DiskAsyncReplication(name, undefined, { urn });
            case "gcp:compute/diskIamBinding:DiskIamBinding":
                return new exports.DiskIamBinding(name, undefined, { urn });
            case "gcp:compute/diskIamMember:DiskIamMember":
                return new exports.DiskIamMember(name, undefined, { urn });
            case "gcp:compute/diskIamPolicy:DiskIamPolicy":
                return new exports.DiskIamPolicy(name, undefined, { urn });
            case "gcp:compute/diskResourcePolicyAttachment:DiskResourcePolicyAttachment":
                return new exports.DiskResourcePolicyAttachment(name, undefined, { urn });
            case "gcp:compute/externalVpnGateway:ExternalVpnGateway":
                return new exports.ExternalVpnGateway(name, undefined, { urn });
            case "gcp:compute/firewall:Firewall":
                return new exports.Firewall(name, undefined, { urn });
            case "gcp:compute/firewallPolicy:FirewallPolicy":
                return new exports.FirewallPolicy(name, undefined, { urn });
            case "gcp:compute/firewallPolicyAssociation:FirewallPolicyAssociation":
                return new exports.FirewallPolicyAssociation(name, undefined, { urn });
            case "gcp:compute/firewallPolicyRule:FirewallPolicyRule":
                return new exports.FirewallPolicyRule(name, undefined, { urn });
            case "gcp:compute/forwardingRule:ForwardingRule":
                return new exports.ForwardingRule(name, undefined, { urn });
            case "gcp:compute/globalAddress:GlobalAddress":
                return new exports.GlobalAddress(name, undefined, { urn });
            case "gcp:compute/globalForwardingRule:GlobalForwardingRule":
                return new exports.GlobalForwardingRule(name, undefined, { urn });
            case "gcp:compute/globalNetworkEndpoint:GlobalNetworkEndpoint":
                return new exports.GlobalNetworkEndpoint(name, undefined, { urn });
            case "gcp:compute/globalNetworkEndpointGroup:GlobalNetworkEndpointGroup":
                return new exports.GlobalNetworkEndpointGroup(name, undefined, { urn });
            case "gcp:compute/haVpnGateway:HaVpnGateway":
                return new exports.HaVpnGateway(name, undefined, { urn });
            case "gcp:compute/healthCheck:HealthCheck":
                return new exports.HealthCheck(name, undefined, { urn });
            case "gcp:compute/httpHealthCheck:HttpHealthCheck":
                return new exports.HttpHealthCheck(name, undefined, { urn });
            case "gcp:compute/httpsHealthCheck:HttpsHealthCheck":
                return new exports.HttpsHealthCheck(name, undefined, { urn });
            case "gcp:compute/image:Image":
                return new exports.Image(name, undefined, { urn });
            case "gcp:compute/imageIamBinding:ImageIamBinding":
                return new exports.ImageIamBinding(name, undefined, { urn });
            case "gcp:compute/imageIamMember:ImageIamMember":
                return new exports.ImageIamMember(name, undefined, { urn });
            case "gcp:compute/imageIamPolicy:ImageIamPolicy":
                return new exports.ImageIamPolicy(name, undefined, { urn });
            case "gcp:compute/instance:Instance":
                return new exports.Instance(name, undefined, { urn });
            case "gcp:compute/instanceFromMachineImage:InstanceFromMachineImage":
                return new exports.InstanceFromMachineImage(name, undefined, { urn });
            case "gcp:compute/instanceFromTemplate:InstanceFromTemplate":
                return new exports.InstanceFromTemplate(name, undefined, { urn });
            case "gcp:compute/instanceGroup:InstanceGroup":
                return new exports.InstanceGroup(name, undefined, { urn });
            case "gcp:compute/instanceGroupManager:InstanceGroupManager":
                return new exports.InstanceGroupManager(name, undefined, { urn });
            case "gcp:compute/instanceGroupNamedPort:InstanceGroupNamedPort":
                return new exports.InstanceGroupNamedPort(name, undefined, { urn });
            case "gcp:compute/instanceIAMBinding:InstanceIAMBinding":
                return new exports.InstanceIAMBinding(name, undefined, { urn });
            case "gcp:compute/instanceIAMMember:InstanceIAMMember":
                return new exports.InstanceIAMMember(name, undefined, { urn });
            case "gcp:compute/instanceIAMPolicy:InstanceIAMPolicy":
                return new exports.InstanceIAMPolicy(name, undefined, { urn });
            case "gcp:compute/instanceTemplate:InstanceTemplate":
                return new exports.InstanceTemplate(name, undefined, { urn });
            case "gcp:compute/interconnectAttachment:InterconnectAttachment":
                return new exports.InterconnectAttachment(name, undefined, { urn });
            case "gcp:compute/machineImage:MachineImage":
                return new exports.MachineImage(name, undefined, { urn });
            case "gcp:compute/machineImageIamBinding:MachineImageIamBinding":
                return new exports.MachineImageIamBinding(name, undefined, { urn });
            case "gcp:compute/machineImageIamMember:MachineImageIamMember":
                return new exports.MachineImageIamMember(name, undefined, { urn });
            case "gcp:compute/machineImageIamPolicy:MachineImageIamPolicy":
                return new exports.MachineImageIamPolicy(name, undefined, { urn });
            case "gcp:compute/managedSslCertificate:ManagedSslCertificate":
                return new exports.ManagedSslCertificate(name, undefined, { urn });
            case "gcp:compute/mangedSslCertificate:MangedSslCertificate":
                return new exports.MangedSslCertificate(name, undefined, { urn });
            case "gcp:compute/network:Network":
                return new exports.Network(name, undefined, { urn });
            case "gcp:compute/networkEndpoint:NetworkEndpoint":
                return new exports.NetworkEndpoint(name, undefined, { urn });
            case "gcp:compute/networkEndpointGroup:NetworkEndpointGroup":
                return new exports.NetworkEndpointGroup(name, undefined, { urn });
            case "gcp:compute/networkFirewallPolicy:NetworkFirewallPolicy":
                return new exports.NetworkFirewallPolicy(name, undefined, { urn });
            case "gcp:compute/networkFirewallPolicyAssociation:NetworkFirewallPolicyAssociation":
                return new exports.NetworkFirewallPolicyAssociation(name, undefined, { urn });
            case "gcp:compute/networkFirewallPolicyRule:NetworkFirewallPolicyRule":
                return new exports.NetworkFirewallPolicyRule(name, undefined, { urn });
            case "gcp:compute/networkPeering:NetworkPeering":
                return new exports.NetworkPeering(name, undefined, { urn });
            case "gcp:compute/networkPeeringRoutesConfig:NetworkPeeringRoutesConfig":
                return new exports.NetworkPeeringRoutesConfig(name, undefined, { urn });
            case "gcp:compute/nodeGroup:NodeGroup":
                return new exports.NodeGroup(name, undefined, { urn });
            case "gcp:compute/nodeTemplate:NodeTemplate":
                return new exports.NodeTemplate(name, undefined, { urn });
            case "gcp:compute/organizationSecurityPolicy:OrganizationSecurityPolicy":
                return new exports.OrganizationSecurityPolicy(name, undefined, { urn });
            case "gcp:compute/organizationSecurityPolicyAssociation:OrganizationSecurityPolicyAssociation":
                return new exports.OrganizationSecurityPolicyAssociation(name, undefined, { urn });
            case "gcp:compute/organizationSecurityPolicyRule:OrganizationSecurityPolicyRule":
                return new exports.OrganizationSecurityPolicyRule(name, undefined, { urn });
            case "gcp:compute/packetMirroring:PacketMirroring":
                return new exports.PacketMirroring(name, undefined, { urn });
            case "gcp:compute/perInstanceConfig:PerInstanceConfig":
                return new exports.PerInstanceConfig(name, undefined, { urn });
            case "gcp:compute/projectDefaultNetworkTier:ProjectDefaultNetworkTier":
                return new exports.ProjectDefaultNetworkTier(name, undefined, { urn });
            case "gcp:compute/projectMetadata:ProjectMetadata":
                return new exports.ProjectMetadata(name, undefined, { urn });
            case "gcp:compute/projectMetadataItem:ProjectMetadataItem":
                return new exports.ProjectMetadataItem(name, undefined, { urn });
            case "gcp:compute/publicAdvertisedPrefix:PublicAdvertisedPrefix":
                return new exports.PublicAdvertisedPrefix(name, undefined, { urn });
            case "gcp:compute/publicDelegatedPrefix:PublicDelegatedPrefix":
                return new exports.PublicDelegatedPrefix(name, undefined, { urn });
            case "gcp:compute/regionAutoscaler:RegionAutoscaler":
                return new exports.RegionAutoscaler(name, undefined, { urn });
            case "gcp:compute/regionBackendService:RegionBackendService":
                return new exports.RegionBackendService(name, undefined, { urn });
            case "gcp:compute/regionBackendServiceIamBinding:RegionBackendServiceIamBinding":
                return new exports.RegionBackendServiceIamBinding(name, undefined, { urn });
            case "gcp:compute/regionBackendServiceIamMember:RegionBackendServiceIamMember":
                return new exports.RegionBackendServiceIamMember(name, undefined, { urn });
            case "gcp:compute/regionBackendServiceIamPolicy:RegionBackendServiceIamPolicy":
                return new exports.RegionBackendServiceIamPolicy(name, undefined, { urn });
            case "gcp:compute/regionCommitment:RegionCommitment":
                return new exports.RegionCommitment(name, undefined, { urn });
            case "gcp:compute/regionDisk:RegionDisk":
                return new exports.RegionDisk(name, undefined, { urn });
            case "gcp:compute/regionDiskIamBinding:RegionDiskIamBinding":
                return new exports.RegionDiskIamBinding(name, undefined, { urn });
            case "gcp:compute/regionDiskIamMember:RegionDiskIamMember":
                return new exports.RegionDiskIamMember(name, undefined, { urn });
            case "gcp:compute/regionDiskIamPolicy:RegionDiskIamPolicy":
                return new exports.RegionDiskIamPolicy(name, undefined, { urn });
            case "gcp:compute/regionDiskResourcePolicyAttachment:RegionDiskResourcePolicyAttachment":
                return new exports.RegionDiskResourcePolicyAttachment(name, undefined, { urn });
            case "gcp:compute/regionHealthCheck:RegionHealthCheck":
                return new exports.RegionHealthCheck(name, undefined, { urn });
            case "gcp:compute/regionInstanceGroupManager:RegionInstanceGroupManager":
                return new exports.RegionInstanceGroupManager(name, undefined, { urn });
            case "gcp:compute/regionInstanceTemplate:RegionInstanceTemplate":
                return new exports.RegionInstanceTemplate(name, undefined, { urn });
            case "gcp:compute/regionNetworkEndpointGroup:RegionNetworkEndpointGroup":
                return new exports.RegionNetworkEndpointGroup(name, undefined, { urn });
            case "gcp:compute/regionNetworkFirewallPolicy:RegionNetworkFirewallPolicy":
                return new exports.RegionNetworkFirewallPolicy(name, undefined, { urn });
            case "gcp:compute/regionNetworkFirewallPolicyAssociation:RegionNetworkFirewallPolicyAssociation":
                return new exports.RegionNetworkFirewallPolicyAssociation(name, undefined, { urn });
            case "gcp:compute/regionNetworkFirewallPolicyRule:RegionNetworkFirewallPolicyRule":
                return new exports.RegionNetworkFirewallPolicyRule(name, undefined, { urn });
            case "gcp:compute/regionPerInstanceConfig:RegionPerInstanceConfig":
                return new exports.RegionPerInstanceConfig(name, undefined, { urn });
            case "gcp:compute/regionSslCertificate:RegionSslCertificate":
                return new exports.RegionSslCertificate(name, undefined, { urn });
            case "gcp:compute/regionSslPolicy:RegionSslPolicy":
                return new exports.RegionSslPolicy(name, undefined, { urn });
            case "gcp:compute/regionTargetHttpProxy:RegionTargetHttpProxy":
                return new exports.RegionTargetHttpProxy(name, undefined, { urn });
            case "gcp:compute/regionTargetHttpsProxy:RegionTargetHttpsProxy":
                return new exports.RegionTargetHttpsProxy(name, undefined, { urn });
            case "gcp:compute/regionTargetTcpProxy:RegionTargetTcpProxy":
                return new exports.RegionTargetTcpProxy(name, undefined, { urn });
            case "gcp:compute/regionUrlMap:RegionUrlMap":
                return new exports.RegionUrlMap(name, undefined, { urn });
            case "gcp:compute/reservation:Reservation":
                return new exports.Reservation(name, undefined, { urn });
            case "gcp:compute/resourcePolicy:ResourcePolicy":
                return new exports.ResourcePolicy(name, undefined, { urn });
            case "gcp:compute/route:Route":
                return new exports.Route(name, undefined, { urn });
            case "gcp:compute/router:Router":
                return new exports.Router(name, undefined, { urn });
            case "gcp:compute/routerInterface:RouterInterface":
                return new exports.RouterInterface(name, undefined, { urn });
            case "gcp:compute/routerNat:RouterNat":
                return new exports.RouterNat(name, undefined, { urn });
            case "gcp:compute/routerPeer:RouterPeer":
                return new exports.RouterPeer(name, undefined, { urn });
            case "gcp:compute/sSLCertificate:SSLCertificate":
                return new exports.SSLCertificate(name, undefined, { urn });
            case "gcp:compute/sSLPolicy:SSLPolicy":
                return new exports.SSLPolicy(name, undefined, { urn });
            case "gcp:compute/securityPolicy:SecurityPolicy":
                return new exports.SecurityPolicy(name, undefined, { urn });
            case "gcp:compute/securityScanConfig:SecurityScanConfig":
                return new exports.SecurityScanConfig(name, undefined, { urn });
            case "gcp:compute/serviceAttachment:ServiceAttachment":
                return new exports.ServiceAttachment(name, undefined, { urn });
            case "gcp:compute/sharedVPCHostProject:SharedVPCHostProject":
                return new exports.SharedVPCHostProject(name, undefined, { urn });
            case "gcp:compute/sharedVPCServiceProject:SharedVPCServiceProject":
                return new exports.SharedVPCServiceProject(name, undefined, { urn });
            case "gcp:compute/snapshot:Snapshot":
                return new exports.Snapshot(name, undefined, { urn });
            case "gcp:compute/snapshotIamBinding:SnapshotIamBinding":
                return new exports.SnapshotIamBinding(name, undefined, { urn });
            case "gcp:compute/snapshotIamMember:SnapshotIamMember":
                return new exports.SnapshotIamMember(name, undefined, { urn });
            case "gcp:compute/snapshotIamPolicy:SnapshotIamPolicy":
                return new exports.SnapshotIamPolicy(name, undefined, { urn });
            case "gcp:compute/subnetwork:Subnetwork":
                return new exports.Subnetwork(name, undefined, { urn });
            case "gcp:compute/subnetworkIAMBinding:SubnetworkIAMBinding":
                return new exports.SubnetworkIAMBinding(name, undefined, { urn });
            case "gcp:compute/subnetworkIAMMember:SubnetworkIAMMember":
                return new exports.SubnetworkIAMMember(name, undefined, { urn });
            case "gcp:compute/subnetworkIAMPolicy:SubnetworkIAMPolicy":
                return new exports.SubnetworkIAMPolicy(name, undefined, { urn });
            case "gcp:compute/targetGrpcProxy:TargetGrpcProxy":
                return new exports.TargetGrpcProxy(name, undefined, { urn });
            case "gcp:compute/targetHttpProxy:TargetHttpProxy":
                return new exports.TargetHttpProxy(name, undefined, { urn });
            case "gcp:compute/targetHttpsProxy:TargetHttpsProxy":
                return new exports.TargetHttpsProxy(name, undefined, { urn });
            case "gcp:compute/targetInstance:TargetInstance":
                return new exports.TargetInstance(name, undefined, { urn });
            case "gcp:compute/targetPool:TargetPool":
                return new exports.TargetPool(name, undefined, { urn });
            case "gcp:compute/targetSSLProxy:TargetSSLProxy":
                return new exports.TargetSSLProxy(name, undefined, { urn });
            case "gcp:compute/targetTCPProxy:TargetTCPProxy":
                return new exports.TargetTCPProxy(name, undefined, { urn });
            case "gcp:compute/uRLMap:URLMap":
                return new exports.URLMap(name, undefined, { urn });
            case "gcp:compute/vPNGateway:VPNGateway":
                return new exports.VPNGateway(name, undefined, { urn });
            case "gcp:compute/vPNTunnel:VPNTunnel":
                return new exports.VPNTunnel(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "compute/address", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/attachedDisk", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/autoscalar", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/autoscaler", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/backendBucket", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/backendBucketIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/backendBucketIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/backendBucketIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/backendBucketSignedUrlKey", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/backendService", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/backendServiceIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/backendServiceIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/backendServiceIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/backendServiceSignedUrlKey", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/disk", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/diskAsyncReplication", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/diskIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/diskIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/diskIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/diskResourcePolicyAttachment", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/externalVpnGateway", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/firewall", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/firewallPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/firewallPolicyAssociation", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/firewallPolicyRule", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/forwardingRule", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/globalAddress", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/globalForwardingRule", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/globalNetworkEndpoint", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/globalNetworkEndpointGroup", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/haVpnGateway", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/healthCheck", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/httpHealthCheck", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/httpsHealthCheck", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/image", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/imageIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/imageIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/imageIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instance", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceFromMachineImage", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceFromTemplate", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceGroup", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceGroupManager", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceGroupNamedPort", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceIAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceIAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceIAMPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/instanceTemplate", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/interconnectAttachment", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/machineImage", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/machineImageIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/machineImageIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/machineImageIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/managedSslCertificate", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/mangedSslCertificate", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/network", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/networkEndpoint", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/networkEndpointGroup", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/networkFirewallPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/networkFirewallPolicyAssociation", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/networkFirewallPolicyRule", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/networkPeering", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/networkPeeringRoutesConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/nodeGroup", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/nodeTemplate", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/organizationSecurityPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/organizationSecurityPolicyAssociation", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/organizationSecurityPolicyRule", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/packetMirroring", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/perInstanceConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/projectDefaultNetworkTier", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/projectMetadata", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/projectMetadataItem", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/publicAdvertisedPrefix", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/publicDelegatedPrefix", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionAutoscaler", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionBackendService", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionBackendServiceIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionBackendServiceIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionBackendServiceIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionCommitment", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionDisk", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionDiskIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionDiskIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionDiskIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionDiskResourcePolicyAttachment", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionHealthCheck", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionInstanceGroupManager", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionInstanceTemplate", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionNetworkEndpointGroup", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionNetworkFirewallPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionNetworkFirewallPolicyAssociation", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionNetworkFirewallPolicyRule", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionPerInstanceConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionSslCertificate", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionSslPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionTargetHttpProxy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionTargetHttpsProxy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionTargetTcpProxy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/regionUrlMap", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/reservation", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/resourcePolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/route", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/router", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/routerInterface", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/routerNat", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/routerPeer", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/sSLCertificate", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/sSLPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/securityPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/securityScanConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/serviceAttachment", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/sharedVPCHostProject", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/sharedVPCServiceProject", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/snapshot", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/snapshotIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/snapshotIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/snapshotIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/subnetwork", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/subnetworkIAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/subnetworkIAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/subnetworkIAMPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/targetGrpcProxy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/targetHttpProxy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/targetHttpsProxy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/targetInstance", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/targetPool", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/targetSSLProxy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/targetTCPProxy", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/uRLMap", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/vPNGateway", _module);
pulumi.runtime.registerResourceModule("gcp", "compute/vPNTunnel", _module);
//# sourceMappingURL=index.js.map