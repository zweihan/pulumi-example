"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNetworkPeeringOutput = exports.getNetworkPeering = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Get information of a specified compute network peering. For more information see
 * [the official documentation](https://cloud.google.com/compute/docs/vpc/vpc-peering)
 * and
 * [API](https://cloud.google.com/compute/docs/reference/latest/networks).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.compute.Network("default", {autoCreateSubnetworks: false});
 * const other = new gcp.compute.Network("other", {autoCreateSubnetworks: false});
 * const peering1 = new gcp.compute.NetworkPeering("peering1", {
 *     network: _default.selfLink,
 *     peerNetwork: other.selfLink,
 * });
 * const peering2 = new gcp.compute.NetworkPeering("peering2", {
 *     network: other.selfLink,
 *     peerNetwork: _default.selfLink,
 * });
 * const peering1Ds = gcp.compute.getNetworkPeeringOutput({
 *     name: peering1.name,
 *     network: peering1.network,
 * });
 * ```
 */
function getNetworkPeering(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcp:compute/getNetworkPeering:getNetworkPeering", {
        "name": args.name,
        "network": args.network,
    }, opts);
}
exports.getNetworkPeering = getNetworkPeering;
/**
 * Get information of a specified compute network peering. For more information see
 * [the official documentation](https://cloud.google.com/compute/docs/vpc/vpc-peering)
 * and
 * [API](https://cloud.google.com/compute/docs/reference/latest/networks).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.compute.Network("default", {autoCreateSubnetworks: false});
 * const other = new gcp.compute.Network("other", {autoCreateSubnetworks: false});
 * const peering1 = new gcp.compute.NetworkPeering("peering1", {
 *     network: _default.selfLink,
 *     peerNetwork: other.selfLink,
 * });
 * const peering2 = new gcp.compute.NetworkPeering("peering2", {
 *     network: other.selfLink,
 *     peerNetwork: _default.selfLink,
 * });
 * const peering1Ds = gcp.compute.getNetworkPeeringOutput({
 *     name: peering1.name,
 *     network: peering1.network,
 * });
 * ```
 */
function getNetworkPeeringOutput(args, opts) {
    return pulumi.output(args).apply((a) => getNetworkPeering(a, opts));
}
exports.getNetworkPeeringOutput = getNetworkPeeringOutput;
//# sourceMappingURL=getNetworkPeering.js.map