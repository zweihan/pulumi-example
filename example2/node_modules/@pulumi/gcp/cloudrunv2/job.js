"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Job = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Cloud Run Job resource that references a container image which is run to completion.
 *
 * To get more information about Job, see:
 *
 * * [API documentation](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.jobs)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/run/docs/)
 *
 * ## Example Usage
 * ### Cloudrunv2 Job Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.cloudrunv2.Job("default", {
 *     location: "us-central1",
 *     template: {
 *         template: {
 *             containers: [{
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *             }],
 *         },
 *     },
 * });
 * ```
 * ### Cloudrunv2 Job Sql
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const secret = new gcp.secretmanager.Secret("secret", {
 *     secretId: "secret",
 *     replication: {
 *         automatic: true,
 *     },
 * });
 * const instance = new gcp.sql.DatabaseInstance("instance", {
 *     region: "us-central1",
 *     databaseVersion: "MYSQL_5_7",
 *     settings: {
 *         tier: "db-f1-micro",
 *     },
 *     deletionProtection: true,
 * });
 * const _default = new gcp.cloudrunv2.Job("default", {
 *     location: "us-central1",
 *     template: {
 *         template: {
 *             volumes: [{
 *                 name: "cloudsql",
 *                 cloudSqlInstance: {
 *                     instances: [instance.connectionName],
 *                 },
 *             }],
 *             containers: [{
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *                 envs: [
 *                     {
 *                         name: "FOO",
 *                         value: "bar",
 *                     },
 *                     {
 *                         name: "latestdclsecret",
 *                         valueSource: {
 *                             secretKeyRef: {
 *                                 secret: secret.secretId,
 *                                 version: "1",
 *                             },
 *                         },
 *                     },
 *                 ],
 *                 volumeMounts: [{
 *                     name: "cloudsql",
 *                     mountPath: "/cloudsql",
 *                 }],
 *             }],
 *         },
 *     },
 * });
 * const project = gcp.organizations.getProject({});
 * const secret_version_data = new gcp.secretmanager.SecretVersion("secret-version-data", {
 *     secret: secret.name,
 *     secretData: "secret-data",
 * });
 * const secret_access = new gcp.secretmanager.SecretIamMember("secret-access", {
 *     secretId: secret.id,
 *     role: "roles/secretmanager.secretAccessor",
 *     member: project.then(project => `serviceAccount:${project.number}-compute@developer.gserviceaccount.com`),
 * }, {
 *     dependsOn: [secret],
 * });
 * ```
 * ### Cloudrunv2 Job Vpcaccess
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const customTestNetwork = new gcp.compute.Network("customTestNetwork", {autoCreateSubnetworks: false});
 * const customTestSubnetwork = new gcp.compute.Subnetwork("customTestSubnetwork", {
 *     ipCidrRange: "10.2.0.0/28",
 *     region: "us-central1",
 *     network: customTestNetwork.id,
 * });
 * const connector = new gcp.vpcaccess.Connector("connector", {
 *     subnet: {
 *         name: customTestSubnetwork.name,
 *     },
 *     machineType: "e2-standard-4",
 *     minInstances: 2,
 *     maxInstances: 3,
 *     region: "us-central1",
 * });
 * const _default = new gcp.cloudrunv2.Job("default", {
 *     location: "us-central1",
 *     template: {
 *         template: {
 *             containers: [{
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *             }],
 *             vpcAccess: {
 *                 connector: connector.id,
 *                 egress: "ALL_TRAFFIC",
 *             },
 *         },
 *     },
 * });
 * ```
 * ### Cloudrunv2 Job Secret
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const secret = new gcp.secretmanager.Secret("secret", {
 *     secretId: "secret",
 *     replication: {
 *         automatic: true,
 *     },
 * });
 * const _default = new gcp.cloudrunv2.Job("default", {
 *     location: "us-central1",
 *     template: {
 *         template: {
 *             volumes: [{
 *                 name: "a-volume",
 *                 secret: {
 *                     secret: secret.secretId,
 *                     defaultMode: 292,
 *                     items: [{
 *                         version: "1",
 *                         path: "my-secret",
 *                         mode: 256,
 *                     }],
 *                 },
 *             }],
 *             containers: [{
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *                 volumeMounts: [{
 *                     name: "a-volume",
 *                     mountPath: "/secrets",
 *                 }],
 *             }],
 *         },
 *     },
 * });
 * const project = gcp.organizations.getProject({});
 * const secret_version_data = new gcp.secretmanager.SecretVersion("secret-version-data", {
 *     secret: secret.name,
 *     secretData: "secret-data",
 * });
 * const secret_access = new gcp.secretmanager.SecretIamMember("secret-access", {
 *     secretId: secret.id,
 *     role: "roles/secretmanager.secretAccessor",
 *     member: project.then(project => `serviceAccount:${project.number}-compute@developer.gserviceaccount.com`),
 * }, {
 *     dependsOn: [secret],
 * });
 * ```
 * ### Cloudrunv2 Job Emptydir
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.cloudrunv2.Job("default", {
 *     location: "us-central1",
 *     launchStage: "BETA",
 *     template: {
 *         template: {
 *             containers: [{
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *                 volumeMounts: [{
 *                     name: "empty-dir-volume",
 *                     mountPath: "/mnt",
 *                 }],
 *             }],
 *             volumes: [{
 *                 name: "empty-dir-volume",
 *                 emptyDir: {
 *                     medium: "MEMORY",
 *                     sizeLimit: "128Mi",
 *                 },
 *             }],
 *         },
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * Job can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:cloudrunv2/job:Job default projects/{{project}}/locations/{{location}}/jobs/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudrunv2/job:Job default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudrunv2/job:Job default {{location}}/{{name}}
 * ```
 */
class Job extends pulumi.CustomResource {
    /**
     * Get an existing Job resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Job(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Job.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Job.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["binaryAuthorization"] = state ? state.binaryAuthorization : undefined;
            resourceInputs["client"] = state ? state.client : undefined;
            resourceInputs["clientVersion"] = state ? state.clientVersion : undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["executionCount"] = state ? state.executionCount : undefined;
            resourceInputs["generation"] = state ? state.generation : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["latestCreatedExecutions"] = state ? state.latestCreatedExecutions : undefined;
            resourceInputs["launchStage"] = state ? state.launchStage : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["observedGeneration"] = state ? state.observedGeneration : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["terminalConditions"] = state ? state.terminalConditions : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.template === undefined) && !opts.urn) {
                throw new Error("Missing required property 'template'");
            }
            resourceInputs["binaryAuthorization"] = args ? args.binaryAuthorization : undefined;
            resourceInputs["client"] = args ? args.client : undefined;
            resourceInputs["clientVersion"] = args ? args.clientVersion : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["launchStage"] = args ? args.launchStage : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["conditions"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["executionCount"] = undefined /*out*/;
            resourceInputs["generation"] = undefined /*out*/;
            resourceInputs["latestCreatedExecutions"] = undefined /*out*/;
            resourceInputs["observedGeneration"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["terminalConditions"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Job.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Job = Job;
/** @internal */
Job.__pulumiType = 'gcp:cloudrunv2/job:Job';
//# sourceMappingURL=job.js.map