import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Service acts as a top-level container that manages a set of configurations and revision templates which implement a network service. Service exists to provide a singular abstraction which can be access controlled, reasoned about, and which encapsulates software lifecycle decisions such as rollout policy and team resource ownership.
 *
 * To get more information about Service, see:
 *
 * * [API documentation](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/run/docs/)
 *
 * ## Example Usage
 * ### Cloudrunv2 Service Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.cloudrunv2.Service("default", {
 *     ingress: "INGRESS_TRAFFIC_ALL",
 *     location: "us-central1",
 *     template: {
 *         containers: [{
 *             image: "us-docker.pkg.dev/cloudrun/container/hello",
 *         }],
 *     },
 * });
 * ```
 * ### Cloudrunv2 Service Sql
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const secret = new gcp.secretmanager.Secret("secret", {
 *     secretId: "secret-1",
 *     replication: {
 *         automatic: true,
 *     },
 * });
 * const secret_version_data = new gcp.secretmanager.SecretVersion("secret-version-data", {
 *     secret: secret.name,
 *     secretData: "secret-data",
 * });
 * const instance = new gcp.sql.DatabaseInstance("instance", {
 *     region: "us-central1",
 *     databaseVersion: "MYSQL_5_7",
 *     settings: {
 *         tier: "db-f1-micro",
 *     },
 *     deletionProtection: true,
 * });
 * const _default = new gcp.cloudrunv2.Service("default", {
 *     location: "us-central1",
 *     ingress: "INGRESS_TRAFFIC_ALL",
 *     template: {
 *         scaling: {
 *             maxInstanceCount: 2,
 *         },
 *         volumes: [{
 *             name: "cloudsql",
 *             cloudSqlInstance: {
 *                 instances: [instance.connectionName],
 *             },
 *         }],
 *         containers: [{
 *             image: "us-docker.pkg.dev/cloudrun/container/hello",
 *             envs: [
 *                 {
 *                     name: "FOO",
 *                     value: "bar",
 *                 },
 *                 {
 *                     name: "SECRET_ENV_VAR",
 *                     valueSource: {
 *                         secretKeyRef: {
 *                             secret: secret.secretId,
 *                             version: "1",
 *                         },
 *                     },
 *                 },
 *             ],
 *             volumeMounts: [{
 *                 name: "cloudsql",
 *                 mountPath: "/cloudsql",
 *             }],
 *         }],
 *     },
 *     traffics: [{
 *         type: "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST",
 *         percent: 100,
 *     }],
 * }, {
 *     dependsOn: [secret_version_data],
 * });
 * const project = gcp.organizations.getProject({});
 * const secret_access = new gcp.secretmanager.SecretIamMember("secret-access", {
 *     secretId: secret.id,
 *     role: "roles/secretmanager.secretAccessor",
 *     member: project.then(project => `serviceAccount:${project.number}-compute@developer.gserviceaccount.com`),
 * }, {
 *     dependsOn: [secret],
 * });
 * ```
 * ### Cloudrunv2 Service Vpcaccess
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const customTestNetwork = new gcp.compute.Network("customTestNetwork", {autoCreateSubnetworks: false});
 * const customTestSubnetwork = new gcp.compute.Subnetwork("customTestSubnetwork", {
 *     ipCidrRange: "10.2.0.0/28",
 *     region: "us-central1",
 *     network: customTestNetwork.id,
 * });
 * const connector = new gcp.vpcaccess.Connector("connector", {
 *     subnet: {
 *         name: customTestSubnetwork.name,
 *     },
 *     machineType: "e2-standard-4",
 *     minInstances: 2,
 *     maxInstances: 3,
 *     region: "us-central1",
 * });
 * const _default = new gcp.cloudrunv2.Service("default", {
 *     location: "us-central1",
 *     template: {
 *         containers: [{
 *             image: "us-docker.pkg.dev/cloudrun/container/hello",
 *         }],
 *         vpcAccess: {
 *             connector: connector.id,
 *             egress: "ALL_TRAFFIC",
 *         },
 *     },
 * });
 * ```
 * ### Cloudrunv2 Service Probes
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.cloudrunv2.Service("default", {
 *     location: "us-central1",
 *     template: {
 *         containers: [{
 *             image: "us-docker.pkg.dev/cloudrun/container/hello",
 *             livenessProbe: {
 *                 httpGet: {
 *                     path: "/",
 *                 },
 *             },
 *             startupProbe: {
 *                 failureThreshold: 1,
 *                 initialDelaySeconds: 0,
 *                 periodSeconds: 3,
 *                 tcpSocket: {
 *                     port: 8080,
 *                 },
 *                 timeoutSeconds: 1,
 *             },
 *         }],
 *     },
 * });
 * ```
 * ### Cloudrunv2 Service Secret
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const secret = new gcp.secretmanager.Secret("secret", {
 *     secretId: "secret-1",
 *     replication: {
 *         automatic: true,
 *     },
 * });
 * const secret_version_data = new gcp.secretmanager.SecretVersion("secret-version-data", {
 *     secret: secret.name,
 *     secretData: "secret-data",
 * });
 * const _default = new gcp.cloudrunv2.Service("default", {
 *     location: "us-central1",
 *     ingress: "INGRESS_TRAFFIC_ALL",
 *     template: {
 *         volumes: [{
 *             name: "a-volume",
 *             secret: {
 *                 secret: secret.secretId,
 *                 defaultMode: 292,
 *                 items: [{
 *                     version: "1",
 *                     path: "my-secret",
 *                     mode: 256,
 *                 }],
 *             },
 *         }],
 *         containers: [{
 *             image: "us-docker.pkg.dev/cloudrun/container/hello",
 *             volumeMounts: [{
 *                 name: "a-volume",
 *                 mountPath: "/secrets",
 *             }],
 *         }],
 *     },
 * }, {
 *     dependsOn: [secret_version_data],
 * });
 * const project = gcp.organizations.getProject({});
 * const secret_access = new gcp.secretmanager.SecretIamMember("secret-access", {
 *     secretId: secret.id,
 *     role: "roles/secretmanager.secretAccessor",
 *     member: project.then(project => `serviceAccount:${project.number}-compute@developer.gserviceaccount.com`),
 * }, {
 *     dependsOn: [secret],
 * });
 * ```
 * ### Cloudrunv2 Service Multicontainer
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.cloudrunv2.Service("default", {
 *     location: "us-central1",
 *     launchStage: "BETA",
 *     ingress: "INGRESS_TRAFFIC_ALL",
 *     template: {
 *         containers: [
 *             {
 *                 name: "hello-1",
 *                 ports: [{
 *                     containerPort: 8080,
 *                 }],
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *                 dependsOns: ["hello-2"],
 *                 volumeMounts: [{
 *                     name: "empty-dir-volume",
 *                     mountPath: "/mnt",
 *                 }],
 *             },
 *             {
 *                 name: "hello-2",
 *                 image: "us-docker.pkg.dev/cloudrun/container/hello",
 *             },
 *         ],
 *         volumes: [{
 *             name: "empty-dir-volume",
 *             emptyDir: {
 *                 medium: "MEMORY",
 *                 sizeLimit: "256Mi",
 *             },
 *         }],
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * Service can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:cloudrunv2/service:Service default projects/{{project}}/locations/{{location}}/services/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudrunv2/service:Service default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:cloudrunv2/service:Service default {{location}}/{{name}}
 * ```
 */
export declare class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service;
    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Service;
    /**
     * KRM-style annotations for the resource.
     * (Optional)
     * Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using 'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows Kubernetes annotations' namespacing, limits, and rules. More info: https://kubernetes.io/docs/user-guide/annotations
     */
    readonly annotations: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Settings for the Binary Authorization feature.
     * Structure is documented below.
     */
    readonly binaryAuthorization: pulumi.Output<outputs.cloudrunv2.ServiceBinaryAuthorization | undefined>;
    /**
     * Arbitrary identifier for the API client.
     */
    readonly client: pulumi.Output<string | undefined>;
    /**
     * Arbitrary version identifier for the API client.
     */
    readonly clientVersion: pulumi.Output<string | undefined>;
    /**
     * The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     */
    readonly conditions: pulumi.Output<outputs.cloudrunv2.ServiceCondition[]>;
    /**
     * User-provided description of the Service. This field currently has a 512-character limit.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
     */
    readonly etag: pulumi.Output<string>;
    /**
     * A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
     */
    readonly generation: pulumi.Output<string>;
    /**
     * Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
     * Possible values are: `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
     */
    readonly ingress: pulumi.Output<string>;
    /**
     * KRM-style labels for the resource.
     * (Optional)
     * Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     */
    readonly latestCreatedRevision: pulumi.Output<string>;
    /**
     * Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     */
    readonly latestReadyRevision: pulumi.Output<string>;
    /**
     * The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA.
     * If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
     * For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
     * Possible values are: `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, `DEPRECATED`.
     */
    readonly launchStage: pulumi.Output<string>;
    /**
     * The location of the cloud run service
     */
    readonly location: pulumi.Output<string | undefined>;
    /**
     * Name of the Service.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The generation of this Service currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
     */
    readonly observedGeneration: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * Returns true if the Service is currently being acted upon by the system to bring it into the desired state.
     * When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
     * If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
     * If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in terminalCondition and conditions.
     */
    readonly reconciling: pulumi.Output<boolean>;
    /**
     * The template used to create revisions for this Service.
     * Structure is documented below.
     */
    readonly template: pulumi.Output<outputs.cloudrunv2.ServiceTemplate>;
    /**
     * The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     */
    readonly terminalConditions: pulumi.Output<outputs.cloudrunv2.ServiceTerminalCondition[]>;
    /**
     * Detailed status information for corresponding traffic targets. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     */
    readonly trafficStatuses: pulumi.Output<outputs.cloudrunv2.ServiceTrafficStatus[]>;
    /**
     * Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
     * Structure is documented below.
     */
    readonly traffics: pulumi.Output<outputs.cloudrunv2.ServiceTraffic[]>;
    /**
     * Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     */
    readonly uid: pulumi.Output<string>;
    /**
     * (Output)
     * Displays the target URI.
     */
    readonly uri: pulumi.Output<string>;
    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * KRM-style annotations for the resource.
     * (Optional)
     * Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using 'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows Kubernetes annotations' namespacing, limits, and rules. More info: https://kubernetes.io/docs/user-guide/annotations
     */
    annotations?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Settings for the Binary Authorization feature.
     * Structure is documented below.
     */
    binaryAuthorization?: pulumi.Input<inputs.cloudrunv2.ServiceBinaryAuthorization>;
    /**
     * Arbitrary identifier for the API client.
     */
    client?: pulumi.Input<string>;
    /**
     * Arbitrary version identifier for the API client.
     */
    clientVersion?: pulumi.Input<string>;
    /**
     * The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.cloudrunv2.ServiceCondition>[]>;
    /**
     * User-provided description of the Service. This field currently has a 512-character limit.
     */
    description?: pulumi.Input<string>;
    /**
     * A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
     */
    etag?: pulumi.Input<string>;
    /**
     * A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
     */
    generation?: pulumi.Input<string>;
    /**
     * Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
     * Possible values are: `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
     */
    ingress?: pulumi.Input<string>;
    /**
     * KRM-style labels for the resource.
     * (Optional)
     * Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Name of the last created revision. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     */
    latestCreatedRevision?: pulumi.Input<string>;
    /**
     * Name of the latest revision that is serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     */
    latestReadyRevision?: pulumi.Input<string>;
    /**
     * The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA.
     * If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
     * For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
     * Possible values are: `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, `DEPRECATED`.
     */
    launchStage?: pulumi.Input<string>;
    /**
     * The location of the cloud run service
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the Service.
     */
    name?: pulumi.Input<string>;
    /**
     * The generation of this Service currently serving traffic. See comments in reconciling for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
     */
    observedGeneration?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * Returns true if the Service is currently being acted upon by the system to bring it into the desired state.
     * When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
     * If reconciliation succeeded, the following fields will match: traffic and trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision.
     * If reconciliation failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in terminalCondition and conditions.
     */
    reconciling?: pulumi.Input<boolean>;
    /**
     * The template used to create revisions for this Service.
     * Structure is documented below.
     */
    template?: pulumi.Input<inputs.cloudrunv2.ServiceTemplate>;
    /**
     * The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     */
    terminalConditions?: pulumi.Input<pulumi.Input<inputs.cloudrunv2.ServiceTerminalCondition>[]>;
    /**
     * Detailed status information for corresponding traffic targets. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * Structure is documented below.
     */
    trafficStatuses?: pulumi.Input<pulumi.Input<inputs.cloudrunv2.ServiceTrafficStatus>[]>;
    /**
     * Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
     * Structure is documented below.
     */
    traffics?: pulumi.Input<pulumi.Input<inputs.cloudrunv2.ServiceTraffic>[]>;
    /**
     * Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     */
    uid?: pulumi.Input<string>;
    /**
     * (Output)
     * Displays the target URI.
     */
    uri?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * KRM-style annotations for the resource.
     * (Optional)
     * Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using 'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows Kubernetes annotations' namespacing, limits, and rules. More info: https://kubernetes.io/docs/user-guide/annotations
     */
    annotations?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Settings for the Binary Authorization feature.
     * Structure is documented below.
     */
    binaryAuthorization?: pulumi.Input<inputs.cloudrunv2.ServiceBinaryAuthorization>;
    /**
     * Arbitrary identifier for the API client.
     */
    client?: pulumi.Input<string>;
    /**
     * Arbitrary version identifier for the API client.
     */
    clientVersion?: pulumi.Input<string>;
    /**
     * User-provided description of the Service. This field currently has a 512-character limit.
     */
    description?: pulumi.Input<string>;
    /**
     * Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
     * Possible values are: `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
     */
    ingress?: pulumi.Input<string>;
    /**
     * KRM-style labels for the resource.
     * (Optional)
     * Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA.
     * If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
     * For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
     * Possible values are: `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, `DEPRECATED`.
     */
    launchStage?: pulumi.Input<string>;
    /**
     * The location of the cloud run service
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the Service.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The template used to create revisions for this Service.
     * Structure is documented below.
     */
    template: pulumi.Input<inputs.cloudrunv2.ServiceTemplate>;
    /**
     * Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
     * Structure is documented below.
     */
    traffics?: pulumi.Input<pulumi.Input<inputs.cloudrunv2.ServiceTraffic>[]>;
}
