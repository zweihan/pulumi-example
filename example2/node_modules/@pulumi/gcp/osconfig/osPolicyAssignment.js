"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.OsPolicyAssignment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Represents an OSPolicyAssignment resource.
 *
 * ## Example Usage
 * ### Fixed_os_policy_assignment
 * An example of an osconfig os policy assignment with fixed rollout disruption budget
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.osconfig.OsPolicyAssignment("primary", {
 *     description: "A test os policy assignment",
 *     instanceFilter: {
 *         all: false,
 *         exclusionLabels: [{
 *             labels: {
 *                 "label-two": "value-two",
 *             },
 *         }],
 *         inclusionLabels: [{
 *             labels: {
 *                 "label-one": "value-one",
 *             },
 *         }],
 *         inventories: [{
 *             osShortName: "centos",
 *             osVersion: "8.*",
 *         }],
 *     },
 *     location: "us-west1-a",
 *     osPolicies: [{
 *         allowNoResourceGroupMatch: false,
 *         description: "A test os policy",
 *         id: "policy",
 *         mode: "VALIDATION",
 *         resourceGroups: [{
 *             inventoryFilters: [{
 *                 osShortName: "centos",
 *                 osVersion: "8.*",
 *             }],
 *             resources: [{
 *                 id: "apt",
 *                 pkg: {
 *                     apt: {
 *                         name: "bazel",
 *                     },
 *                     desiredState: "INSTALLED",
 *                 },
 *             }],
 *         }],
 *     }],
 *     project: "my-project-name",
 *     rollout: {
 *         disruptionBudget: {
 *             fixed: 1,
 *         },
 *         minWaitDuration: "3.5s",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * OSPolicyAssignment can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:osconfig/osPolicyAssignment:OsPolicyAssignment default projects/{{project}}/locations/{{location}}/osPolicyAssignments/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:osconfig/osPolicyAssignment:OsPolicyAssignment default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:osconfig/osPolicyAssignment:OsPolicyAssignment default {{location}}/{{name}}
 * ```
 */
class OsPolicyAssignment extends pulumi.CustomResource {
    /**
     * Get an existing OsPolicyAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new OsPolicyAssignment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of OsPolicyAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsPolicyAssignment.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["baseline"] = state ? state.baseline : undefined;
            resourceInputs["deleted"] = state ? state.deleted : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["instanceFilter"] = state ? state.instanceFilter : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osPolicies"] = state ? state.osPolicies : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["reconciling"] = state ? state.reconciling : undefined;
            resourceInputs["revisionCreateTime"] = state ? state.revisionCreateTime : undefined;
            resourceInputs["revisionId"] = state ? state.revisionId : undefined;
            resourceInputs["rollout"] = state ? state.rollout : undefined;
            resourceInputs["rolloutState"] = state ? state.rolloutState : undefined;
            resourceInputs["skipAwaitRollout"] = state ? state.skipAwaitRollout : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.instanceFilter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceFilter'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.osPolicies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osPolicies'");
            }
            if ((!args || args.rollout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rollout'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceFilter"] = args ? args.instanceFilter : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osPolicies"] = args ? args.osPolicies : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rollout"] = args ? args.rollout : undefined;
            resourceInputs["skipAwaitRollout"] = args ? args.skipAwaitRollout : undefined;
            resourceInputs["baseline"] = undefined /*out*/;
            resourceInputs["deleted"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["revisionCreateTime"] = undefined /*out*/;
            resourceInputs["revisionId"] = undefined /*out*/;
            resourceInputs["rolloutState"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsPolicyAssignment.__pulumiType, name, resourceInputs, opts);
    }
}
exports.OsPolicyAssignment = OsPolicyAssignment;
/** @internal */
OsPolicyAssignment.__pulumiType = 'gcp:osconfig/osPolicyAssignment:OsPolicyAssignment';
//# sourceMappingURL=osPolicyAssignment.js.map