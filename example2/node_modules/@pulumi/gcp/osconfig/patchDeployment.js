"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PatchDeployment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Patch deployments are configurations that individual patch jobs use to complete a patch.
 * These configurations include instance filter, package repository settings, and a schedule.
 *
 * To get more information about PatchDeployment, see:
 *
 * * [API documentation](https://cloud.google.com/compute/docs/osconfig/rest)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/compute/docs/os-patch-management)
 *
 * ## Example Usage
 * ### Os Config Patch Deployment Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const patch = new gcp.osconfig.PatchDeployment("patch", {
 *     instanceFilter: {
 *         all: true,
 *     },
 *     oneTimeSchedule: {
 *         executeTime: "2999-10-10T10:10:10.045123456Z",
 *     },
 *     patchDeploymentId: "patch-deploy",
 * });
 * ```
 * ### Os Config Patch Deployment Daily
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const patch = new gcp.osconfig.PatchDeployment("patch", {
 *     instanceFilter: {
 *         all: true,
 *     },
 *     patchDeploymentId: "patch-deploy",
 *     recurringSchedule: {
 *         timeOfDay: {
 *             hours: 0,
 *             minutes: 30,
 *             nanos: 20,
 *             seconds: 30,
 *         },
 *         timeZone: {
 *             id: "America/New_York",
 *         },
 *     },
 * });
 * ```
 * ### Os Config Patch Deployment Daily Midnight
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const patch = new gcp.osconfig.PatchDeployment("patch", {
 *     instanceFilter: {
 *         all: true,
 *     },
 *     patchDeploymentId: "patch-deploy",
 *     recurringSchedule: {
 *         timeOfDay: {
 *             hours: 0,
 *             minutes: 0,
 *             nanos: 0,
 *             seconds: 0,
 *         },
 *         timeZone: {
 *             id: "America/New_York",
 *         },
 *     },
 * });
 * ```
 * ### Os Config Patch Deployment Instance
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myImage = gcp.compute.getImage({
 *     family: "debian-11",
 *     project: "debian-cloud",
 * });
 * const foobar = new gcp.compute.Instance("foobar", {
 *     machineType: "e2-medium",
 *     zone: "us-central1-a",
 *     canIpForward: false,
 *     tags: [
 *         "foo",
 *         "bar",
 *     ],
 *     bootDisk: {
 *         initializeParams: {
 *             image: myImage.then(myImage => myImage.selfLink),
 *         },
 *     },
 *     networkInterfaces: [{
 *         network: "default",
 *     }],
 *     metadata: {
 *         foo: "bar",
 *     },
 * });
 * const patch = new gcp.osconfig.PatchDeployment("patch", {
 *     patchDeploymentId: "patch-deploy",
 *     instanceFilter: {
 *         instances: [foobar.id],
 *     },
 *     patchConfig: {
 *         yum: {
 *             security: true,
 *             minimal: true,
 *             excludes: ["bash"],
 *         },
 *     },
 *     recurringSchedule: {
 *         timeZone: {
 *             id: "America/New_York",
 *         },
 *         timeOfDay: {
 *             hours: 0,
 *             minutes: 30,
 *             seconds: 30,
 *             nanos: 20,
 *         },
 *         monthly: {
 *             monthDay: 1,
 *         },
 *     },
 * });
 * ```
 * ### Os Config Patch Deployment Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const patch = new gcp.osconfig.PatchDeployment("patch", {
 *     duration: "10s",
 *     instanceFilter: {
 *         groupLabels: [{
 *             labels: {
 *                 app: "web",
 *                 env: "dev",
 *             },
 *         }],
 *         instanceNamePrefixes: ["test-"],
 *         zones: [
 *             "us-central1-a",
 *             "us-central-1c",
 *         ],
 *     },
 *     patchConfig: {
 *         apt: {
 *             excludes: ["python"],
 *             type: "DIST",
 *         },
 *         goo: {
 *             enabled: true,
 *         },
 *         migInstancesAllowed: true,
 *         postStep: {
 *             linuxExecStepConfig: {
 *                 gcsObject: {
 *                     bucket: "my-patch-scripts",
 *                     generationNumber: "1523477886880",
 *                     object: "linux/post_patch_script",
 *                 },
 *             },
 *             windowsExecStepConfig: {
 *                 gcsObject: {
 *                     bucket: "my-patch-scripts",
 *                     generationNumber: "135920493447",
 *                     object: "windows/post_patch_script.ps1",
 *                 },
 *                 interpreter: "POWERSHELL",
 *             },
 *         },
 *         preStep: {
 *             linuxExecStepConfig: {
 *                 allowedSuccessCodes: [
 *                     0,
 *                     3,
 *                 ],
 *                 localPath: "/tmp/pre_patch_script.sh",
 *             },
 *             windowsExecStepConfig: {
 *                 allowedSuccessCodes: [
 *                     0,
 *                     2,
 *                 ],
 *                 interpreter: "SHELL",
 *                 localPath: "C:\\Users\\user\\pre-patch-script.cmd",
 *             },
 *         },
 *         rebootConfig: "ALWAYS",
 *         windowsUpdate: {
 *             classifications: [
 *                 "CRITICAL",
 *                 "SECURITY",
 *                 "UPDATE",
 *             ],
 *         },
 *         yum: {
 *             excludes: ["bash"],
 *             minimal: true,
 *             security: true,
 *         },
 *         zypper: {
 *             categories: ["security"],
 *         },
 *     },
 *     patchDeploymentId: "patch-deploy",
 *     recurringSchedule: {
 *         monthly: {
 *             weekDayOfMonth: {
 *                 dayOfWeek: "TUESDAY",
 *                 weekOrdinal: -1,
 *             },
 *         },
 *         timeOfDay: {
 *             hours: 0,
 *             minutes: 30,
 *             nanos: 20,
 *             seconds: 30,
 *         },
 *         timeZone: {
 *             id: "America/New_York",
 *         },
 *     },
 *     rollout: {
 *         disruptionBudget: {
 *             fixed: 1,
 *         },
 *         mode: "ZONE_BY_ZONE",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * PatchDeployment can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:osconfig/patchDeployment:PatchDeployment default projects/{{project}}/patchDeployments/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:osconfig/patchDeployment:PatchDeployment default {{project}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:osconfig/patchDeployment:PatchDeployment default {{name}}
 * ```
 */
class PatchDeployment extends pulumi.CustomResource {
    /**
     * Get an existing PatchDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PatchDeployment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PatchDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PatchDeployment.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["instanceFilter"] = state ? state.instanceFilter : undefined;
            resourceInputs["lastExecuteTime"] = state ? state.lastExecuteTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oneTimeSchedule"] = state ? state.oneTimeSchedule : undefined;
            resourceInputs["patchConfig"] = state ? state.patchConfig : undefined;
            resourceInputs["patchDeploymentId"] = state ? state.patchDeploymentId : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["recurringSchedule"] = state ? state.recurringSchedule : undefined;
            resourceInputs["rollout"] = state ? state.rollout : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.instanceFilter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceFilter'");
            }
            if ((!args || args.patchDeploymentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'patchDeploymentId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["instanceFilter"] = args ? args.instanceFilter : undefined;
            resourceInputs["oneTimeSchedule"] = args ? args.oneTimeSchedule : undefined;
            resourceInputs["patchConfig"] = args ? args.patchConfig : undefined;
            resourceInputs["patchDeploymentId"] = args ? args.patchDeploymentId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["recurringSchedule"] = args ? args.recurringSchedule : undefined;
            resourceInputs["rollout"] = args ? args.rollout : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["lastExecuteTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PatchDeployment.__pulumiType, name, resourceInputs, opts);
    }
}
exports.PatchDeployment = PatchDeployment;
/** @internal */
PatchDeployment.__pulumiType = 'gcp:osconfig/patchDeployment:PatchDeployment';
//# sourceMappingURL=patchDeployment.js.map