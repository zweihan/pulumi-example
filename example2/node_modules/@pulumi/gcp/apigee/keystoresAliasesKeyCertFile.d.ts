import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * An alias from a key/certificate pair.
 *
 * To get more information about KeystoresAliasesKeyCertFile, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.keystores.aliases)
 * * How-to Guides
 *     * [Keystores Aliases](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.keystores.aliases)
 *
 * ## Import
 *
 * KeystoresAliasesKeyCertFile can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:apigee/keystoresAliasesKeyCertFile:KeystoresAliasesKeyCertFile default organizations/{{org_id}}/environments/{{environment}}/keystores/{{keystore}}/aliases/{{alias}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:apigee/keystoresAliasesKeyCertFile:KeystoresAliasesKeyCertFile default {{org_id}}/{{environment}}/{{keystore}}/{{alias}}
 * ```
 */
export declare class KeystoresAliasesKeyCertFile extends pulumi.CustomResource {
    /**
     * Get an existing KeystoresAliasesKeyCertFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeystoresAliasesKeyCertFileState, opts?: pulumi.CustomResourceOptions): KeystoresAliasesKeyCertFile;
    /**
     * Returns true if the given object is an instance of KeystoresAliasesKeyCertFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is KeystoresAliasesKeyCertFile;
    /**
     * Alias Name
     */
    readonly alias: pulumi.Output<string>;
    /**
     * Cert content
     */
    readonly cert: pulumi.Output<string>;
    /**
     * Chain of certificates under this alias.
     * Structure is documented below.
     */
    readonly certsInfo: pulumi.Output<outputs.apigee.KeystoresAliasesKeyCertFileCertsInfo>;
    /**
     * Environment associated with the alias
     */
    readonly environment: pulumi.Output<string>;
    /**
     * Private Key content, omit if uploading to truststore
     */
    readonly key: pulumi.Output<string | undefined>;
    /**
     * Keystore Name
     */
    readonly keystore: pulumi.Output<string>;
    /**
     * Organization ID associated with the alias, without organization/ prefix
     */
    readonly orgId: pulumi.Output<string>;
    /**
     * Password for the Private Key if it's encrypted
     */
    readonly password: pulumi.Output<string | undefined>;
    /**
     * Optional.Type of Alias
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a KeystoresAliasesKeyCertFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeystoresAliasesKeyCertFileArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering KeystoresAliasesKeyCertFile resources.
 */
export interface KeystoresAliasesKeyCertFileState {
    /**
     * Alias Name
     */
    alias?: pulumi.Input<string>;
    /**
     * Cert content
     */
    cert?: pulumi.Input<string>;
    /**
     * Chain of certificates under this alias.
     * Structure is documented below.
     */
    certsInfo?: pulumi.Input<inputs.apigee.KeystoresAliasesKeyCertFileCertsInfo>;
    /**
     * Environment associated with the alias
     */
    environment?: pulumi.Input<string>;
    /**
     * Private Key content, omit if uploading to truststore
     */
    key?: pulumi.Input<string>;
    /**
     * Keystore Name
     */
    keystore?: pulumi.Input<string>;
    /**
     * Organization ID associated with the alias, without organization/ prefix
     */
    orgId?: pulumi.Input<string>;
    /**
     * Password for the Private Key if it's encrypted
     */
    password?: pulumi.Input<string>;
    /**
     * Optional.Type of Alias
     */
    type?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a KeystoresAliasesKeyCertFile resource.
 */
export interface KeystoresAliasesKeyCertFileArgs {
    /**
     * Alias Name
     */
    alias: pulumi.Input<string>;
    /**
     * Cert content
     */
    cert: pulumi.Input<string>;
    /**
     * Chain of certificates under this alias.
     * Structure is documented below.
     */
    certsInfo?: pulumi.Input<inputs.apigee.KeystoresAliasesKeyCertFileCertsInfo>;
    /**
     * Environment associated with the alias
     */
    environment: pulumi.Input<string>;
    /**
     * Private Key content, omit if uploading to truststore
     */
    key?: pulumi.Input<string>;
    /**
     * Keystore Name
     */
    keystore: pulumi.Input<string>;
    /**
     * Organization ID associated with the alias, without organization/ prefix
     */
    orgId: pulumi.Input<string>;
    /**
     * Password for the Private Key if it's encrypted
     */
    password?: pulumi.Input<string>;
}
