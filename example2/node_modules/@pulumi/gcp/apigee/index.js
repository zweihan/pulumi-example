"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncAuthorization = exports.SharedflowDeployment = exports.Sharedflow = exports.Organization = exports.NatAddress = exports.KeystoresAliasesSelfSignedCert = exports.KeystoresAliasesPkcs12 = exports.KeystoresAliasesKeyCertFile = exports.InstanceAttachment = exports.Instance = exports.Flowhook = exports.EnvironmentIamPolicy = exports.EnvironmentIamMember = exports.EnvironmentIamBinding = exports.Environment = exports.EnvReferences = exports.EnvKeystore = exports.EnvGroupAttachment = exports.EnvGroup = exports.EndpointAttachment = exports.AddonsConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.AddonsConfig = null;
utilities.lazyLoad(exports, ["AddonsConfig"], () => require("./addonsConfig"));
exports.EndpointAttachment = null;
utilities.lazyLoad(exports, ["EndpointAttachment"], () => require("./endpointAttachment"));
exports.EnvGroup = null;
utilities.lazyLoad(exports, ["EnvGroup"], () => require("./envGroup"));
exports.EnvGroupAttachment = null;
utilities.lazyLoad(exports, ["EnvGroupAttachment"], () => require("./envGroupAttachment"));
exports.EnvKeystore = null;
utilities.lazyLoad(exports, ["EnvKeystore"], () => require("./envKeystore"));
exports.EnvReferences = null;
utilities.lazyLoad(exports, ["EnvReferences"], () => require("./envReferences"));
exports.Environment = null;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));
exports.EnvironmentIamBinding = null;
utilities.lazyLoad(exports, ["EnvironmentIamBinding"], () => require("./environmentIamBinding"));
exports.EnvironmentIamMember = null;
utilities.lazyLoad(exports, ["EnvironmentIamMember"], () => require("./environmentIamMember"));
exports.EnvironmentIamPolicy = null;
utilities.lazyLoad(exports, ["EnvironmentIamPolicy"], () => require("./environmentIamPolicy"));
exports.Flowhook = null;
utilities.lazyLoad(exports, ["Flowhook"], () => require("./flowhook"));
exports.Instance = null;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));
exports.InstanceAttachment = null;
utilities.lazyLoad(exports, ["InstanceAttachment"], () => require("./instanceAttachment"));
exports.KeystoresAliasesKeyCertFile = null;
utilities.lazyLoad(exports, ["KeystoresAliasesKeyCertFile"], () => require("./keystoresAliasesKeyCertFile"));
exports.KeystoresAliasesPkcs12 = null;
utilities.lazyLoad(exports, ["KeystoresAliasesPkcs12"], () => require("./keystoresAliasesPkcs12"));
exports.KeystoresAliasesSelfSignedCert = null;
utilities.lazyLoad(exports, ["KeystoresAliasesSelfSignedCert"], () => require("./keystoresAliasesSelfSignedCert"));
exports.NatAddress = null;
utilities.lazyLoad(exports, ["NatAddress"], () => require("./natAddress"));
exports.Organization = null;
utilities.lazyLoad(exports, ["Organization"], () => require("./organization"));
exports.Sharedflow = null;
utilities.lazyLoad(exports, ["Sharedflow"], () => require("./sharedflow"));
exports.SharedflowDeployment = null;
utilities.lazyLoad(exports, ["SharedflowDeployment"], () => require("./sharedflowDeployment"));
exports.SyncAuthorization = null;
utilities.lazyLoad(exports, ["SyncAuthorization"], () => require("./syncAuthorization"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:apigee/addonsConfig:AddonsConfig":
                return new exports.AddonsConfig(name, undefined, { urn });
            case "gcp:apigee/endpointAttachment:EndpointAttachment":
                return new exports.EndpointAttachment(name, undefined, { urn });
            case "gcp:apigee/envGroup:EnvGroup":
                return new exports.EnvGroup(name, undefined, { urn });
            case "gcp:apigee/envGroupAttachment:EnvGroupAttachment":
                return new exports.EnvGroupAttachment(name, undefined, { urn });
            case "gcp:apigee/envKeystore:EnvKeystore":
                return new exports.EnvKeystore(name, undefined, { urn });
            case "gcp:apigee/envReferences:EnvReferences":
                return new exports.EnvReferences(name, undefined, { urn });
            case "gcp:apigee/environment:Environment":
                return new exports.Environment(name, undefined, { urn });
            case "gcp:apigee/environmentIamBinding:EnvironmentIamBinding":
                return new exports.EnvironmentIamBinding(name, undefined, { urn });
            case "gcp:apigee/environmentIamMember:EnvironmentIamMember":
                return new exports.EnvironmentIamMember(name, undefined, { urn });
            case "gcp:apigee/environmentIamPolicy:EnvironmentIamPolicy":
                return new exports.EnvironmentIamPolicy(name, undefined, { urn });
            case "gcp:apigee/flowhook:Flowhook":
                return new exports.Flowhook(name, undefined, { urn });
            case "gcp:apigee/instance:Instance":
                return new exports.Instance(name, undefined, { urn });
            case "gcp:apigee/instanceAttachment:InstanceAttachment":
                return new exports.InstanceAttachment(name, undefined, { urn });
            case "gcp:apigee/keystoresAliasesKeyCertFile:KeystoresAliasesKeyCertFile":
                return new exports.KeystoresAliasesKeyCertFile(name, undefined, { urn });
            case "gcp:apigee/keystoresAliasesPkcs12:KeystoresAliasesPkcs12":
                return new exports.KeystoresAliasesPkcs12(name, undefined, { urn });
            case "gcp:apigee/keystoresAliasesSelfSignedCert:KeystoresAliasesSelfSignedCert":
                return new exports.KeystoresAliasesSelfSignedCert(name, undefined, { urn });
            case "gcp:apigee/natAddress:NatAddress":
                return new exports.NatAddress(name, undefined, { urn });
            case "gcp:apigee/organization:Organization":
                return new exports.Organization(name, undefined, { urn });
            case "gcp:apigee/sharedflow:Sharedflow":
                return new exports.Sharedflow(name, undefined, { urn });
            case "gcp:apigee/sharedflowDeployment:SharedflowDeployment":
                return new exports.SharedflowDeployment(name, undefined, { urn });
            case "gcp:apigee/syncAuthorization:SyncAuthorization":
                return new exports.SyncAuthorization(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "apigee/addonsConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/endpointAttachment", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/envGroup", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/envGroupAttachment", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/envKeystore", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/envReferences", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/environment", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/environmentIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/environmentIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/environmentIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/flowhook", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/instance", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/instanceAttachment", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/keystoresAliasesKeyCertFile", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/keystoresAliasesPkcs12", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/keystoresAliasesSelfSignedCert", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/natAddress", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/organization", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/sharedflow", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/sharedflowDeployment", _module);
pulumi.runtime.registerResourceModule("gcp", "apigee/syncAuthorization", _module);
//# sourceMappingURL=index.js.map