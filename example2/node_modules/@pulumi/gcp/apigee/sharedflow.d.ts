import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * You can combine policies and resources into a shared flow that you can consume from multiple API proxies, and even from other shared flows. Although it's like a proxy, a shared flow has no endpoint. It can be used only from an API proxy or shared flow that's in the same organization as the shared flow itself.
 *
 * To get more information about SharedFlow, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.sharedflows)
 * * How-to Guides
 *     * [Sharedflows](https://cloud.google.com/apigee/docs/resources)
 *
 * ## Import
 *
 * SharedFlow can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:apigee/sharedflow:Sharedflow default {{org_id}}/sharedflows/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:apigee/sharedflow:Sharedflow default {{org_id}}/{{name}}
 * ```
 */
export declare class Sharedflow extends pulumi.CustomResource {
    /**
     * Get an existing Sharedflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SharedflowState, opts?: pulumi.CustomResourceOptions): Sharedflow;
    /**
     * Returns true if the given object is an instance of Sharedflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Sharedflow;
    /**
     * Path to the config zip bundle.
     */
    readonly configBundle: pulumi.Output<string>;
    /**
     * A hash of local config bundle in string, user needs to use a Terraform Hash function of their choice. A change in hash
     * will trigger an update.
     */
    readonly detectMd5hash: pulumi.Output<string | undefined>;
    /**
     * The id of the most recently created revision for this shared flow.
     */
    readonly latestRevisionId: pulumi.Output<string>;
    /**
     * (Computed) Base 64 MD5 hash of the uploaded data. It is speculative as remote does not return hash of the bundle. Remote changes are detected using returned lastModified timestamp.
     */
    readonly md5hash: pulumi.Output<string>;
    /**
     * Metadata describing the shared flow.
     * Structure is documented below.
     */
    readonly metaDatas: pulumi.Output<outputs.apigee.SharedflowMetaData[]>;
    /**
     * The ID of the shared flow.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The Apigee Organization name associated with the Apigee instance.
     */
    readonly orgId: pulumi.Output<string>;
    /**
     * A list of revisions of this shared flow.
     */
    readonly revisions: pulumi.Output<string[]>;
    /**
     * Create a Sharedflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SharedflowArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Sharedflow resources.
 */
export interface SharedflowState {
    /**
     * Path to the config zip bundle.
     */
    configBundle?: pulumi.Input<string>;
    /**
     * A hash of local config bundle in string, user needs to use a Terraform Hash function of their choice. A change in hash
     * will trigger an update.
     */
    detectMd5hash?: pulumi.Input<string>;
    /**
     * The id of the most recently created revision for this shared flow.
     */
    latestRevisionId?: pulumi.Input<string>;
    /**
     * (Computed) Base 64 MD5 hash of the uploaded data. It is speculative as remote does not return hash of the bundle. Remote changes are detected using returned lastModified timestamp.
     */
    md5hash?: pulumi.Input<string>;
    /**
     * Metadata describing the shared flow.
     * Structure is documented below.
     */
    metaDatas?: pulumi.Input<pulumi.Input<inputs.apigee.SharedflowMetaData>[]>;
    /**
     * The ID of the shared flow.
     */
    name?: pulumi.Input<string>;
    /**
     * The Apigee Organization name associated with the Apigee instance.
     */
    orgId?: pulumi.Input<string>;
    /**
     * A list of revisions of this shared flow.
     */
    revisions?: pulumi.Input<pulumi.Input<string>[]>;
}
/**
 * The set of arguments for constructing a Sharedflow resource.
 */
export interface SharedflowArgs {
    /**
     * Path to the config zip bundle.
     */
    configBundle: pulumi.Input<string>;
    /**
     * A hash of local config bundle in string, user needs to use a Terraform Hash function of their choice. A change in hash
     * will trigger an update.
     */
    detectMd5hash?: pulumi.Input<string>;
    /**
     * The ID of the shared flow.
     */
    name?: pulumi.Input<string>;
    /**
     * The Apigee Organization name associated with the Apigee instance.
     */
    orgId: pulumi.Input<string>;
}
