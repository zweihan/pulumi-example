import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * An alias from a pkcs12 file.
 *
 * To get more information about KeystoresAliasesPkcs12, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.keystores.aliases)
 * * How-to Guides
 *     * [Keystores Aliases](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.keystores.aliases)
 *
 * ## Import
 *
 * KeystoresAliasesPkcs12 can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:apigee/keystoresAliasesPkcs12:KeystoresAliasesPkcs12 default organizations/{{org_id}}/environments/{{environment}}/keystores/{{keystore}}/aliases/{{alias}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:apigee/keystoresAliasesPkcs12:KeystoresAliasesPkcs12 default {{org_id}}/{{environment}}/{{keystore}}/{{alias}}
 * ```
 */
export declare class KeystoresAliasesPkcs12 extends pulumi.CustomResource {
    /**
     * Get an existing KeystoresAliasesPkcs12 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeystoresAliasesPkcs12State, opts?: pulumi.CustomResourceOptions): KeystoresAliasesPkcs12;
    /**
     * Returns true if the given object is an instance of KeystoresAliasesPkcs12.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is KeystoresAliasesPkcs12;
    /**
     * Alias Name
     */
    readonly alias: pulumi.Output<string>;
    /**
     * Chain of certificates under this alias.
     * Structure is documented below.
     */
    readonly certsInfos: pulumi.Output<outputs.apigee.KeystoresAliasesPkcs12CertsInfo[]>;
    /**
     * Environment associated with the alias
     */
    readonly environment: pulumi.Output<string>;
    /**
     * PKCS12 file content
     */
    readonly file: pulumi.Output<string>;
    /**
     * Hash of the pkcs file
     */
    readonly filehash: pulumi.Output<string>;
    /**
     * Keystore Name
     */
    readonly keystore: pulumi.Output<string>;
    /**
     * Organization ID associated with the alias, without organization/ prefix
     */
    readonly orgId: pulumi.Output<string>;
    /**
     * Password for the PKCS12 file if it's encrypted
     */
    readonly password: pulumi.Output<string>;
    /**
     * Optional.Type of Alias
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a KeystoresAliasesPkcs12 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeystoresAliasesPkcs12Args, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering KeystoresAliasesPkcs12 resources.
 */
export interface KeystoresAliasesPkcs12State {
    /**
     * Alias Name
     */
    alias?: pulumi.Input<string>;
    /**
     * Chain of certificates under this alias.
     * Structure is documented below.
     */
    certsInfos?: pulumi.Input<pulumi.Input<inputs.apigee.KeystoresAliasesPkcs12CertsInfo>[]>;
    /**
     * Environment associated with the alias
     */
    environment?: pulumi.Input<string>;
    /**
     * PKCS12 file content
     */
    file?: pulumi.Input<string>;
    /**
     * Hash of the pkcs file
     */
    filehash?: pulumi.Input<string>;
    /**
     * Keystore Name
     */
    keystore?: pulumi.Input<string>;
    /**
     * Organization ID associated with the alias, without organization/ prefix
     */
    orgId?: pulumi.Input<string>;
    /**
     * Password for the PKCS12 file if it's encrypted
     */
    password?: pulumi.Input<string>;
    /**
     * Optional.Type of Alias
     */
    type?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a KeystoresAliasesPkcs12 resource.
 */
export interface KeystoresAliasesPkcs12Args {
    /**
     * Alias Name
     */
    alias: pulumi.Input<string>;
    /**
     * Environment associated with the alias
     */
    environment: pulumi.Input<string>;
    /**
     * PKCS12 file content
     */
    file: pulumi.Input<string>;
    /**
     * Hash of the pkcs file
     */
    filehash: pulumi.Input<string>;
    /**
     * Keystore Name
     */
    keystore: pulumi.Input<string>;
    /**
     * Organization ID associated with the alias, without organization/ prefix
     */
    orgId: pulumi.Input<string>;
    /**
     * Password for the PKCS12 file if it's encrypted
     */
    password?: pulumi.Input<string>;
}
