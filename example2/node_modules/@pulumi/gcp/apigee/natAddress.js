"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NatAddress = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Apigee NAT (network address translation) address. A NAT address is a static external IP address used for Internet egress traffic. This is not avaible for Apigee hybrid.
 * Apigee NAT addresses are not automatically activated because they might require explicit allow entries on the target systems first. See https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances.natAddresses/activate
 *
 * To get more information about NatAddress, see:
 *
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances.natAddresses)
 * * How-to Guides
 *     * [Provisioning NAT IPs](https://cloud.google.com/apigee/docs/api-platform/security/nat-provisioning)
 *
 * ## Example Usage
 * ### Apigee Nat Address Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const current = gcp.organizations.getClientConfig({});
 * const apigeeNetwork = new gcp.compute.Network("apigeeNetwork", {});
 * const apigeeRange = new gcp.compute.GlobalAddress("apigeeRange", {
 *     purpose: "VPC_PEERING",
 *     addressType: "INTERNAL",
 *     prefixLength: 21,
 *     network: apigeeNetwork.id,
 * });
 * const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigeeVpcConnection", {
 *     network: apigeeNetwork.id,
 *     service: "servicenetworking.googleapis.com",
 *     reservedPeeringRanges: [apigeeRange.name],
 * });
 * const apigeeKeyring = new gcp.kms.KeyRing("apigeeKeyring", {location: "us-central1"});
 * const apigeeKey = new gcp.kms.CryptoKey("apigeeKey", {keyRing: apigeeKeyring.id});
 * const apigeeSa = new gcp.projects.ServiceIdentity("apigeeSa", {
 *     project: google_project.project.project_id,
 *     service: google_project_service.apigee.service,
 * }, {
 *     provider: google_beta,
 * });
 * const apigeeSaKeyuser = new gcp.kms.CryptoKeyIAMBinding("apigeeSaKeyuser", {
 *     cryptoKeyId: apigeeKey.id,
 *     role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
 *     members: [pulumi.interpolate`serviceAccount:${apigeeSa.email}`],
 * });
 * const apigeeOrg = new gcp.apigee.Organization("apigeeOrg", {
 *     analyticsRegion: "us-central1",
 *     displayName: "apigee-org",
 *     description: "Terraform-provisioned Apigee Org.",
 *     projectId: current.then(current => current.project),
 *     authorizedNetwork: apigeeNetwork.id,
 *     runtimeDatabaseEncryptionKeyName: apigeeKey.id,
 * }, {
 *     dependsOn: [
 *         apigeeVpcConnection,
 *         apigeeSaKeyuser,
 *     ],
 * });
 * const apigeeInstance = new gcp.apigee.Instance("apigeeInstance", {
 *     location: "us-central1",
 *     description: "Terraform-managed Apigee Runtime Instance",
 *     displayName: "apigee-instance",
 *     orgId: apigeeOrg.id,
 *     diskEncryptionKeyName: apigeeKey.id,
 * });
 * const apigee_nat = new gcp.apigee.NatAddress("apigee-nat", {instanceId: apigeeInstance.id});
 * ```
 *
 * ## Import
 *
 * NatAddress can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:apigee/natAddress:NatAddress default {{instance_id}}/natAddresses/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:apigee/natAddress:NatAddress default {{instance_id}}/{{name}}
 * ```
 */
class NatAddress extends pulumi.CustomResource {
    /**
     * Get an existing NatAddress resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NatAddress(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NatAddress.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NatAddress.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ipAddress"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NatAddress.__pulumiType, name, resourceInputs, opts);
    }
}
exports.NatAddress = NatAddress;
/** @internal */
NatAddress.__pulumiType = 'gcp:apigee/natAddress:NatAddress';
//# sourceMappingURL=natAddress.js.map