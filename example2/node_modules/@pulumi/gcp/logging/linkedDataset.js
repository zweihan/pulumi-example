"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkedDataset = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Describes a BigQuery linked dataset
 *
 * To get more information about LinkedDataset, see:
 *
 * * [API documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/locations.buckets.links)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/logging/docs/apis)
 *
 * ## Example Usage
 * ### Logging Linked Dataset Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const loggingLinkedDatasetProjectBucketConfig = new gcp.logging.ProjectBucketConfig("loggingLinkedDatasetProjectBucketConfig", {
 *     location: "global",
 *     project: "my-project-name",
 *     enableAnalytics: true,
 *     bucketId: "my-bucket",
 * });
 * const loggingLinkedDatasetLinkedDataset = new gcp.logging.LinkedDataset("loggingLinkedDatasetLinkedDataset", {
 *     linkId: "mylink",
 *     bucket: loggingLinkedDatasetProjectBucketConfig.id,
 *     description: "Linked dataset test",
 * });
 * ```
 * ### Logging Linked Dataset All Params
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const loggingLinkedDatasetProjectBucketConfig = new gcp.logging.ProjectBucketConfig("loggingLinkedDatasetProjectBucketConfig", {
 *     bucketId: "my-bucket",
 *     enableAnalytics: true,
 *     location: "global",
 *     project: "my-project-name",
 * });
 * const loggingLinkedDatasetLinkedDataset = new gcp.logging.LinkedDataset("loggingLinkedDatasetLinkedDataset", {
 *     bucket: "my-bucket",
 *     description: "Linked dataset test",
 *     linkId: "mylink",
 *     location: "global",
 *     parent: "projects/my-project-name",
 * }, {
 *     dependsOn: ["google_logging_project_bucket_config.logging_linked_dataset"],
 * });
 * ```
 *
 * ## Import
 *
 * LinkedDataset can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:logging/linkedDataset:LinkedDataset default {{parent}}/locations/{{location}}/buckets/{{bucket}}/links/{{link_id}}
 * ```
 */
class LinkedDataset extends pulumi.CustomResource {
    /**
     * Get an existing LinkedDataset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LinkedDataset(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LinkedDataset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LinkedDataset.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["bigqueryDatasets"] = state ? state.bigqueryDatasets : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lifecycleState"] = state ? state.lifecycleState : undefined;
            resourceInputs["linkId"] = state ? state.linkId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.linkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'linkId'");
            }
            resourceInputs["bigqueryDatasets"] = args ? args.bigqueryDatasets : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["linkId"] = args ? args.linkId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["lifecycleState"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LinkedDataset.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LinkedDataset = LinkedDataset;
/** @internal */
LinkedDataset.__pulumiType = 'gcp:logging/linkedDataset:LinkedDataset';
//# sourceMappingURL=linkedDataset.js.map