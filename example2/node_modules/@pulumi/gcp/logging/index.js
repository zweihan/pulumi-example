"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectSink = exports.ProjectExclusion = exports.ProjectBucketConfig = exports.OrganizationSink = exports.OrganizationExclusion = exports.OrganizationBucketConfig = exports.Metric = exports.LogView = exports.LinkedDataset = exports.getSinkOutput = exports.getSink = exports.getProjectCmekSettingsOutput = exports.getProjectCmekSettings = exports.FolderSink = exports.FolderExclusion = exports.FolderBucketConfig = exports.BillingAccountSink = exports.BillingAccountExclusion = exports.BillingAccountBucketConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.BillingAccountBucketConfig = null;
utilities.lazyLoad(exports, ["BillingAccountBucketConfig"], () => require("./billingAccountBucketConfig"));
exports.BillingAccountExclusion = null;
utilities.lazyLoad(exports, ["BillingAccountExclusion"], () => require("./billingAccountExclusion"));
exports.BillingAccountSink = null;
utilities.lazyLoad(exports, ["BillingAccountSink"], () => require("./billingAccountSink"));
exports.FolderBucketConfig = null;
utilities.lazyLoad(exports, ["FolderBucketConfig"], () => require("./folderBucketConfig"));
exports.FolderExclusion = null;
utilities.lazyLoad(exports, ["FolderExclusion"], () => require("./folderExclusion"));
exports.FolderSink = null;
utilities.lazyLoad(exports, ["FolderSink"], () => require("./folderSink"));
exports.getProjectCmekSettings = null;
exports.getProjectCmekSettingsOutput = null;
utilities.lazyLoad(exports, ["getProjectCmekSettings", "getProjectCmekSettingsOutput"], () => require("./getProjectCmekSettings"));
exports.getSink = null;
exports.getSinkOutput = null;
utilities.lazyLoad(exports, ["getSink", "getSinkOutput"], () => require("./getSink"));
exports.LinkedDataset = null;
utilities.lazyLoad(exports, ["LinkedDataset"], () => require("./linkedDataset"));
exports.LogView = null;
utilities.lazyLoad(exports, ["LogView"], () => require("./logView"));
exports.Metric = null;
utilities.lazyLoad(exports, ["Metric"], () => require("./metric"));
exports.OrganizationBucketConfig = null;
utilities.lazyLoad(exports, ["OrganizationBucketConfig"], () => require("./organizationBucketConfig"));
exports.OrganizationExclusion = null;
utilities.lazyLoad(exports, ["OrganizationExclusion"], () => require("./organizationExclusion"));
exports.OrganizationSink = null;
utilities.lazyLoad(exports, ["OrganizationSink"], () => require("./organizationSink"));
exports.ProjectBucketConfig = null;
utilities.lazyLoad(exports, ["ProjectBucketConfig"], () => require("./projectBucketConfig"));
exports.ProjectExclusion = null;
utilities.lazyLoad(exports, ["ProjectExclusion"], () => require("./projectExclusion"));
exports.ProjectSink = null;
utilities.lazyLoad(exports, ["ProjectSink"], () => require("./projectSink"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:logging/billingAccountBucketConfig:BillingAccountBucketConfig":
                return new exports.BillingAccountBucketConfig(name, undefined, { urn });
            case "gcp:logging/billingAccountExclusion:BillingAccountExclusion":
                return new exports.BillingAccountExclusion(name, undefined, { urn });
            case "gcp:logging/billingAccountSink:BillingAccountSink":
                return new exports.BillingAccountSink(name, undefined, { urn });
            case "gcp:logging/folderBucketConfig:FolderBucketConfig":
                return new exports.FolderBucketConfig(name, undefined, { urn });
            case "gcp:logging/folderExclusion:FolderExclusion":
                return new exports.FolderExclusion(name, undefined, { urn });
            case "gcp:logging/folderSink:FolderSink":
                return new exports.FolderSink(name, undefined, { urn });
            case "gcp:logging/linkedDataset:LinkedDataset":
                return new exports.LinkedDataset(name, undefined, { urn });
            case "gcp:logging/logView:LogView":
                return new exports.LogView(name, undefined, { urn });
            case "gcp:logging/metric:Metric":
                return new exports.Metric(name, undefined, { urn });
            case "gcp:logging/organizationBucketConfig:OrganizationBucketConfig":
                return new exports.OrganizationBucketConfig(name, undefined, { urn });
            case "gcp:logging/organizationExclusion:OrganizationExclusion":
                return new exports.OrganizationExclusion(name, undefined, { urn });
            case "gcp:logging/organizationSink:OrganizationSink":
                return new exports.OrganizationSink(name, undefined, { urn });
            case "gcp:logging/projectBucketConfig:ProjectBucketConfig":
                return new exports.ProjectBucketConfig(name, undefined, { urn });
            case "gcp:logging/projectExclusion:ProjectExclusion":
                return new exports.ProjectExclusion(name, undefined, { urn });
            case "gcp:logging/projectSink:ProjectSink":
                return new exports.ProjectSink(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "logging/billingAccountBucketConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "logging/billingAccountExclusion", _module);
pulumi.runtime.registerResourceModule("gcp", "logging/billingAccountSink", _module);
pulumi.runtime.registerResourceModule("gcp", "logging/folderBucketConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "logging/folderExclusion", _module);
pulumi.runtime.registerResourceModule("gcp", "logging/folderSink", _module);
pulumi.runtime.registerResourceModule("gcp", "logging/linkedDataset", _module);
pulumi.runtime.registerResourceModule("gcp", "logging/logView", _module);
pulumi.runtime.registerResourceModule("gcp", "logging/metric", _module);
pulumi.runtime.registerResourceModule("gcp", "logging/organizationBucketConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "logging/organizationExclusion", _module);
pulumi.runtime.registerResourceModule("gcp", "logging/organizationSink", _module);
pulumi.runtime.registerResourceModule("gcp", "logging/projectBucketConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "logging/projectExclusion", _module);
pulumi.runtime.registerResourceModule("gcp", "logging/projectSink", _module);
//# sourceMappingURL=index.js.map