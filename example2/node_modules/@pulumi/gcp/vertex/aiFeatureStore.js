"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AiFeatureStore = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A collection of DataItems and Annotations on them.
 *
 * To get more information about Featurestore, see:
 *
 * * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/vertex-ai/docs)
 *
 * ## Example Usage
 * ### Vertex Ai Featurestore
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
 *     encryptionSpec: {
 *         kmsKeyName: "kms-name",
 *     },
 *     forceDestroy: true,
 *     labels: {
 *         foo: "bar",
 *     },
 *     onlineServingConfig: {
 *         fixedNodeCount: 2,
 *     },
 *     region: "us-central1",
 * });
 * ```
 * ### Vertex Ai Featurestore With Beta Fields
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     region: "us-central1",
 *     onlineServingConfig: {
 *         fixedNodeCount: 2,
 *     },
 *     encryptionSpec: {
 *         kmsKeyName: "kms-name",
 *     },
 *     onlineStorageTtlDays: 30,
 *     forceDestroy: true,
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Vertex Ai Featurestore Scaling
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
 *     encryptionSpec: {
 *         kmsKeyName: "kms-name",
 *     },
 *     forceDestroy: true,
 *     labels: {
 *         foo: "bar",
 *     },
 *     onlineServingConfig: {
 *         scaling: {
 *             maxNodeCount: 10,
 *             minNodeCount: 2,
 *         },
 *     },
 *     region: "us-central1",
 * });
 * ```
 *
 * ## Import
 *
 * Featurestore can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default projects/{{project}}/locations/{{region}}/featurestores/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default {{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default {{name}}
 * ```
 */
class AiFeatureStore extends pulumi.CustomResource {
    /**
     * Get an existing AiFeatureStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AiFeatureStore(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AiFeatureStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AiFeatureStore.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["encryptionSpec"] = state ? state.encryptionSpec : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["onlineServingConfig"] = state ? state.onlineServingConfig : undefined;
            resourceInputs["onlineStorageTtlDays"] = state ? state.onlineStorageTtlDays : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["encryptionSpec"] = args ? args.encryptionSpec : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["onlineServingConfig"] = args ? args.onlineServingConfig : undefined;
            resourceInputs["onlineStorageTtlDays"] = args ? args.onlineStorageTtlDays : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AiFeatureStore.__pulumiType, name, resourceInputs, opts);
    }
}
exports.AiFeatureStore = AiFeatureStore;
/** @internal */
AiFeatureStore.__pulumiType = 'gcp:vertex/aiFeatureStore:AiFeatureStore';
//# sourceMappingURL=aiFeatureStore.js.map