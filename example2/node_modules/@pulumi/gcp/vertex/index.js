"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AiTensorboard = exports.AiMetadataStore = exports.AiIndex = exports.AiFeatureStoreIamPolicy = exports.AiFeatureStoreIamMember = exports.AiFeatureStoreIamBinding = exports.AiFeatureStoreEntityTypeIamPolicy = exports.AiFeatureStoreEntityTypeIamMember = exports.AiFeatureStoreEntityTypeIamBinding = exports.AiFeatureStoreEntityTypeFeature = exports.AiFeatureStoreEntityType = exports.AiFeatureStore = exports.AiEndpoint = exports.AiDataset = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.AiDataset = null;
utilities.lazyLoad(exports, ["AiDataset"], () => require("./aiDataset"));
exports.AiEndpoint = null;
utilities.lazyLoad(exports, ["AiEndpoint"], () => require("./aiEndpoint"));
exports.AiFeatureStore = null;
utilities.lazyLoad(exports, ["AiFeatureStore"], () => require("./aiFeatureStore"));
exports.AiFeatureStoreEntityType = null;
utilities.lazyLoad(exports, ["AiFeatureStoreEntityType"], () => require("./aiFeatureStoreEntityType"));
exports.AiFeatureStoreEntityTypeFeature = null;
utilities.lazyLoad(exports, ["AiFeatureStoreEntityTypeFeature"], () => require("./aiFeatureStoreEntityTypeFeature"));
exports.AiFeatureStoreEntityTypeIamBinding = null;
utilities.lazyLoad(exports, ["AiFeatureStoreEntityTypeIamBinding"], () => require("./aiFeatureStoreEntityTypeIamBinding"));
exports.AiFeatureStoreEntityTypeIamMember = null;
utilities.lazyLoad(exports, ["AiFeatureStoreEntityTypeIamMember"], () => require("./aiFeatureStoreEntityTypeIamMember"));
exports.AiFeatureStoreEntityTypeIamPolicy = null;
utilities.lazyLoad(exports, ["AiFeatureStoreEntityTypeIamPolicy"], () => require("./aiFeatureStoreEntityTypeIamPolicy"));
exports.AiFeatureStoreIamBinding = null;
utilities.lazyLoad(exports, ["AiFeatureStoreIamBinding"], () => require("./aiFeatureStoreIamBinding"));
exports.AiFeatureStoreIamMember = null;
utilities.lazyLoad(exports, ["AiFeatureStoreIamMember"], () => require("./aiFeatureStoreIamMember"));
exports.AiFeatureStoreIamPolicy = null;
utilities.lazyLoad(exports, ["AiFeatureStoreIamPolicy"], () => require("./aiFeatureStoreIamPolicy"));
exports.AiIndex = null;
utilities.lazyLoad(exports, ["AiIndex"], () => require("./aiIndex"));
exports.AiMetadataStore = null;
utilities.lazyLoad(exports, ["AiMetadataStore"], () => require("./aiMetadataStore"));
exports.AiTensorboard = null;
utilities.lazyLoad(exports, ["AiTensorboard"], () => require("./aiTensorboard"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:vertex/aiDataset:AiDataset":
                return new exports.AiDataset(name, undefined, { urn });
            case "gcp:vertex/aiEndpoint:AiEndpoint":
                return new exports.AiEndpoint(name, undefined, { urn });
            case "gcp:vertex/aiFeatureStore:AiFeatureStore":
                return new exports.AiFeatureStore(name, undefined, { urn });
            case "gcp:vertex/aiFeatureStoreEntityType:AiFeatureStoreEntityType":
                return new exports.AiFeatureStoreEntityType(name, undefined, { urn });
            case "gcp:vertex/aiFeatureStoreEntityTypeFeature:AiFeatureStoreEntityTypeFeature":
                return new exports.AiFeatureStoreEntityTypeFeature(name, undefined, { urn });
            case "gcp:vertex/aiFeatureStoreEntityTypeIamBinding:AiFeatureStoreEntityTypeIamBinding":
                return new exports.AiFeatureStoreEntityTypeIamBinding(name, undefined, { urn });
            case "gcp:vertex/aiFeatureStoreEntityTypeIamMember:AiFeatureStoreEntityTypeIamMember":
                return new exports.AiFeatureStoreEntityTypeIamMember(name, undefined, { urn });
            case "gcp:vertex/aiFeatureStoreEntityTypeIamPolicy:AiFeatureStoreEntityTypeIamPolicy":
                return new exports.AiFeatureStoreEntityTypeIamPolicy(name, undefined, { urn });
            case "gcp:vertex/aiFeatureStoreIamBinding:AiFeatureStoreIamBinding":
                return new exports.AiFeatureStoreIamBinding(name, undefined, { urn });
            case "gcp:vertex/aiFeatureStoreIamMember:AiFeatureStoreIamMember":
                return new exports.AiFeatureStoreIamMember(name, undefined, { urn });
            case "gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy":
                return new exports.AiFeatureStoreIamPolicy(name, undefined, { urn });
            case "gcp:vertex/aiIndex:AiIndex":
                return new exports.AiIndex(name, undefined, { urn });
            case "gcp:vertex/aiMetadataStore:AiMetadataStore":
                return new exports.AiMetadataStore(name, undefined, { urn });
            case "gcp:vertex/aiTensorboard:AiTensorboard":
                return new exports.AiTensorboard(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "vertex/aiDataset", _module);
pulumi.runtime.registerResourceModule("gcp", "vertex/aiEndpoint", _module);
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStore", _module);
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStoreEntityType", _module);
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStoreEntityTypeFeature", _module);
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStoreEntityTypeIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStoreEntityTypeIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStoreEntityTypeIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStoreIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStoreIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "vertex/aiFeatureStoreIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "vertex/aiIndex", _module);
pulumi.runtime.registerResourceModule("gcp", "vertex/aiMetadataStore", _module);
pulumi.runtime.registerResourceModule("gcp", "vertex/aiTensorboard", _module);
//# sourceMappingURL=index.js.map