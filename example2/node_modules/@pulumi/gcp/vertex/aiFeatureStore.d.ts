import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * A collection of DataItems and Annotations on them.
 *
 * To get more information about Featurestore, see:
 *
 * * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/vertex-ai/docs)
 *
 * ## Example Usage
 * ### Vertex Ai Featurestore
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
 *     encryptionSpec: {
 *         kmsKeyName: "kms-name",
 *     },
 *     forceDestroy: true,
 *     labels: {
 *         foo: "bar",
 *     },
 *     onlineServingConfig: {
 *         fixedNodeCount: 2,
 *     },
 *     region: "us-central1",
 * });
 * ```
 * ### Vertex Ai Featurestore With Beta Fields
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     region: "us-central1",
 *     onlineServingConfig: {
 *         fixedNodeCount: 2,
 *     },
 *     encryptionSpec: {
 *         kmsKeyName: "kms-name",
 *     },
 *     onlineStorageTtlDays: 30,
 *     forceDestroy: true,
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Vertex Ai Featurestore Scaling
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
 *     encryptionSpec: {
 *         kmsKeyName: "kms-name",
 *     },
 *     forceDestroy: true,
 *     labels: {
 *         foo: "bar",
 *     },
 *     onlineServingConfig: {
 *         scaling: {
 *             maxNodeCount: 10,
 *             minNodeCount: 2,
 *         },
 *     },
 *     region: "us-central1",
 * });
 * ```
 *
 * ## Import
 *
 * Featurestore can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default projects/{{project}}/locations/{{region}}/featurestores/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default {{project}}/{{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default {{region}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default {{name}}
 * ```
 */
export declare class AiFeatureStore extends pulumi.CustomResource {
    /**
     * Get an existing AiFeatureStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AiFeatureStoreState, opts?: pulumi.CustomResourceOptions): AiFeatureStore;
    /**
     * Returns true if the given object is an instance of AiFeatureStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is AiFeatureStore;
    /**
     * The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     */
    readonly createTime: pulumi.Output<string>;
    /**
     * If set, both of the online and offline data storage will be secured by this key.
     * Structure is documented below.
     */
    readonly encryptionSpec: pulumi.Output<outputs.vertex.AiFeatureStoreEncryptionSpec | undefined>;
    /**
     * Used to perform consistent read-modify-write updates.
     */
    readonly etag: pulumi.Output<string>;
    /**
     * If set to true, any EntityTypes and Features for this Featurestore will also be deleted
     */
    readonly forceDestroy: pulumi.Output<boolean | undefined>;
    /**
     * A set of key/value label pairs to assign to this Featurestore.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The name of the Featurestore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Config for online serving resources.
     * Structure is documented below.
     */
    readonly onlineServingConfig: pulumi.Output<outputs.vertex.AiFeatureStoreOnlineServingConfig | undefined>;
    /**
     * TTL in days for feature values that will be stored in online serving storage. The Feature Store online storage
     * periodically removes obsolete feature values older than onlineStorageTtlDays since the feature generation time. Note
     * that onlineStorageTtlDays should be less than or equal to offlineStorageTtlDays for each EntityType under a
     * featurestore. If not set, default to 4000 days
     */
    readonly onlineStorageTtlDays: pulumi.Output<number | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * The region of the dataset. eg us-central1
     */
    readonly region: pulumi.Output<string>;
    /**
     * The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     */
    readonly updateTime: pulumi.Output<string>;
    /**
     * Create a AiFeatureStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AiFeatureStoreArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering AiFeatureStore resources.
 */
export interface AiFeatureStoreState {
    /**
     * The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     */
    createTime?: pulumi.Input<string>;
    /**
     * If set, both of the online and offline data storage will be secured by this key.
     * Structure is documented below.
     */
    encryptionSpec?: pulumi.Input<inputs.vertex.AiFeatureStoreEncryptionSpec>;
    /**
     * Used to perform consistent read-modify-write updates.
     */
    etag?: pulumi.Input<string>;
    /**
     * If set to true, any EntityTypes and Features for this Featurestore will also be deleted
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * A set of key/value label pairs to assign to this Featurestore.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The name of the Featurestore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
     */
    name?: pulumi.Input<string>;
    /**
     * Config for online serving resources.
     * Structure is documented below.
     */
    onlineServingConfig?: pulumi.Input<inputs.vertex.AiFeatureStoreOnlineServingConfig>;
    /**
     * TTL in days for feature values that will be stored in online serving storage. The Feature Store online storage
     * periodically removes obsolete feature values older than onlineStorageTtlDays since the feature generation time. Note
     * that onlineStorageTtlDays should be less than or equal to offlineStorageTtlDays for each EntityType under a
     * featurestore. If not set, default to 4000 days
     */
    onlineStorageTtlDays?: pulumi.Input<number>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region of the dataset. eg us-central1
     */
    region?: pulumi.Input<string>;
    /**
     * The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     */
    updateTime?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a AiFeatureStore resource.
 */
export interface AiFeatureStoreArgs {
    /**
     * If set, both of the online and offline data storage will be secured by this key.
     * Structure is documented below.
     */
    encryptionSpec?: pulumi.Input<inputs.vertex.AiFeatureStoreEncryptionSpec>;
    /**
     * If set to true, any EntityTypes and Features for this Featurestore will also be deleted
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * A set of key/value label pairs to assign to this Featurestore.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The name of the Featurestore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
     */
    name?: pulumi.Input<string>;
    /**
     * Config for online serving resources.
     * Structure is documented below.
     */
    onlineServingConfig?: pulumi.Input<inputs.vertex.AiFeatureStoreOnlineServingConfig>;
    /**
     * TTL in days for feature values that will be stored in online serving storage. The Feature Store online storage
     * periodically removes obsolete feature values older than onlineStorageTtlDays since the feature generation time. Note
     * that onlineStorageTtlDays should be less than or equal to offlineStorageTtlDays for each EntityType under a
     * featurestore. If not set, default to 4000 days
     */
    onlineStorageTtlDays?: pulumi.Input<number>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * The region of the dataset. eg us-central1
     */
    region?: pulumi.Input<string>;
}
