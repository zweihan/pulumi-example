import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * ## Import
 *
 * For all import syntaxes, the "resource in question" can take any of the following forms* {{featurestore}}/entityTypes/{{name}} * {{name}} Any variables not passed in the import command will be taken from the provider configuration. Vertex AI featurestoreentitytype IAM resources can be imported using the resource identifiers, role, and member. IAM member imports use space-delimited identifiersthe resource in question, the role, and the member identity, e.g.
 *
 * ```sh
 *  $ pulumi import gcp:vertex/aiFeatureStoreEntityTypeIamMember:AiFeatureStoreEntityTypeIamMember editor "{{featurestore}}/entityTypes/{{featurestore_entitytype}} roles/viewer user:jane@example.com"
 * ```
 *
 *  IAM binding imports use space-delimited identifiersthe resource in question and the role, e.g.
 *
 * ```sh
 *  $ pulumi import gcp:vertex/aiFeatureStoreEntityTypeIamMember:AiFeatureStoreEntityTypeIamMember editor "{{featurestore}}/entityTypes/{{featurestore_entitytype}} roles/viewer"
 * ```
 *
 *  IAM policy imports use the identifier of the resource in question, e.g.
 *
 * ```sh
 *  $ pulumi import gcp:vertex/aiFeatureStoreEntityTypeIamMember:AiFeatureStoreEntityTypeIamMember editor {{featurestore}}/entityTypes/{{featurestore_entitytype}}
 * ```
 *
 *  -> **Custom Roles**If you're importing a IAM resource with a custom role, make sure to use the
 *
 * full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
 */
export declare class AiFeatureStoreEntityTypeIamMember extends pulumi.CustomResource {
    /**
     * Get an existing AiFeatureStoreEntityTypeIamMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AiFeatureStoreEntityTypeIamMemberState, opts?: pulumi.CustomResourceOptions): AiFeatureStoreEntityTypeIamMember;
    /**
     * Returns true if the given object is an instance of AiFeatureStoreEntityTypeIamMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is AiFeatureStoreEntityTypeIamMember;
    readonly condition: pulumi.Output<outputs.vertex.AiFeatureStoreEntityTypeIamMemberCondition | undefined>;
    /**
     * Used to find the parent resource to bind the IAM policy to
     */
    readonly entitytype: pulumi.Output<string>;
    /**
     * (Computed) The etag of the IAM policy.
     */
    readonly etag: pulumi.Output<string>;
    /**
     * The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
     */
    readonly featurestore: pulumi.Output<string>;
    readonly member: pulumi.Output<string>;
    /**
     * The role that should be applied. Only one
     * `gcp.vertex.AiFeatureStoreEntityTypeIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     */
    readonly role: pulumi.Output<string>;
    /**
     * Create a AiFeatureStoreEntityTypeIamMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AiFeatureStoreEntityTypeIamMemberArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering AiFeatureStoreEntityTypeIamMember resources.
 */
export interface AiFeatureStoreEntityTypeIamMemberState {
    condition?: pulumi.Input<inputs.vertex.AiFeatureStoreEntityTypeIamMemberCondition>;
    /**
     * Used to find the parent resource to bind the IAM policy to
     */
    entitytype?: pulumi.Input<string>;
    /**
     * (Computed) The etag of the IAM policy.
     */
    etag?: pulumi.Input<string>;
    /**
     * The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
     */
    featurestore?: pulumi.Input<string>;
    member?: pulumi.Input<string>;
    /**
     * The role that should be applied. Only one
     * `gcp.vertex.AiFeatureStoreEntityTypeIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     */
    role?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a AiFeatureStoreEntityTypeIamMember resource.
 */
export interface AiFeatureStoreEntityTypeIamMemberArgs {
    condition?: pulumi.Input<inputs.vertex.AiFeatureStoreEntityTypeIamMemberCondition>;
    /**
     * Used to find the parent resource to bind the IAM policy to
     */
    entitytype: pulumi.Input<string>;
    /**
     * The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
     */
    featurestore: pulumi.Input<string>;
    member: pulumi.Input<string>;
    /**
     * The role that should be applied. Only one
     * `gcp.vertex.AiFeatureStoreEntityTypeIamBinding` can be used per role. Note that custom roles must be of the format
     * `[projects|organizations]/{parent-name}/roles/{role-name}`.
     */
    role: pulumi.Input<string>;
}
