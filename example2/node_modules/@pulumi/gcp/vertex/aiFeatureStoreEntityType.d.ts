import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * An entity type is a type of object in a system that needs to be modeled and have stored information about. For example, driver is an entity type, and driver0 is an instance of an entity type driver.
 *
 * To get more information about FeaturestoreEntitytype, see:
 *
 * * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/vertex-ai/docs)
 *
 * ## Example Usage
 * ### Vertex Ai Featurestore Entitytype
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     region: "us-central1",
 *     onlineServingConfig: {
 *         fixedNodeCount: 2,
 *     },
 *     encryptionSpec: {
 *         kmsKeyName: "kms-name",
 *     },
 * });
 * const entity = new gcp.vertex.AiFeatureStoreEntityType("entity", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     description: "test description",
 *     featurestore: featurestore.id,
 *     monitoringConfig: {
 *         snapshotAnalysis: {
 *             disabled: false,
 *             monitoringIntervalDays: 1,
 *             stalenessDays: 21,
 *         },
 *         numericalThresholdConfig: {
 *             value: 0.8,
 *         },
 *         categoricalThresholdConfig: {
 *             value: 10,
 *         },
 *         importFeaturesAnalysis: {
 *             state: "ENABLED",
 *             anomalyDetectionBaseline: "PREVIOUS_IMPORT_FEATURES_STATS",
 *         },
 *     },
 * });
 * ```
 * ### Vertex Ai Featurestore Entitytype With Beta Fields
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     region: "us-central1",
 *     onlineServingConfig: {
 *         fixedNodeCount: 2,
 *     },
 *     encryptionSpec: {
 *         kmsKeyName: "kms-name",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const entity = new gcp.vertex.AiFeatureStoreEntityType("entity", {
 *     labels: {
 *         foo: "bar",
 *     },
 *     featurestore: featurestore.id,
 *     monitoringConfig: {
 *         snapshotAnalysis: {
 *             disabled: false,
 *             monitoringInterval: "86400s",
 *         },
 *         categoricalThresholdConfig: {
 *             value: 0.3,
 *         },
 *         numericalThresholdConfig: {
 *             value: 0.3,
 *         },
 *     },
 *     offlineStorageTtlDays: 30,
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * FeaturestoreEntitytype can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:vertex/aiFeatureStoreEntityType:AiFeatureStoreEntityType default {{featurestore}}/entityTypes/{{name}}
 * ```
 */
export declare class AiFeatureStoreEntityType extends pulumi.CustomResource {
    /**
     * Get an existing AiFeatureStoreEntityType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AiFeatureStoreEntityTypeState, opts?: pulumi.CustomResourceOptions): AiFeatureStoreEntityType;
    /**
     * Returns true if the given object is an instance of AiFeatureStoreEntityType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is AiFeatureStoreEntityType;
    /**
     * The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     */
    readonly createTime: pulumi.Output<string>;
    /**
     * Optional. Description of the EntityType.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Used to perform consistent read-modify-write updates.
     */
    readonly etag: pulumi.Output<string>;
    /**
     * The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
     */
    readonly featurestore: pulumi.Output<string>;
    /**
     * A set of key/value label pairs to assign to this EntityType.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The default monitoring configuration for all Features under this EntityType.
     * If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
     * Structure is documented below.
     */
    readonly monitoringConfig: pulumi.Output<outputs.vertex.AiFeatureStoreEntityTypeMonitoringConfig | undefined>;
    /**
     * The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Config for data retention policy in offline storage. TTL in days for feature values that will be stored in offline
     * storage. The Feature Store offline storage periodically removes obsolete feature values older than offlineStorageTtlDays
     * since the feature generation time. If unset (or explicitly set to 0), default to 4000 days TTL.
     */
    readonly offlineStorageTtlDays: pulumi.Output<number | undefined>;
    /**
     * The region of the EntityType.
     */
    readonly region: pulumi.Output<string>;
    /**
     * The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     */
    readonly updateTime: pulumi.Output<string>;
    /**
     * Create a AiFeatureStoreEntityType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AiFeatureStoreEntityTypeArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering AiFeatureStoreEntityType resources.
 */
export interface AiFeatureStoreEntityTypeState {
    /**
     * The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Optional. Description of the EntityType.
     */
    description?: pulumi.Input<string>;
    /**
     * Used to perform consistent read-modify-write updates.
     */
    etag?: pulumi.Input<string>;
    /**
     * The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
     */
    featurestore?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs to assign to this EntityType.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The default monitoring configuration for all Features under this EntityType.
     * If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
     * Structure is documented below.
     */
    monitoringConfig?: pulumi.Input<inputs.vertex.AiFeatureStoreEntityTypeMonitoringConfig>;
    /**
     * The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
     */
    name?: pulumi.Input<string>;
    /**
     * Config for data retention policy in offline storage. TTL in days for feature values that will be stored in offline
     * storage. The Feature Store offline storage periodically removes obsolete feature values older than offlineStorageTtlDays
     * since the feature generation time. If unset (or explicitly set to 0), default to 4000 days TTL.
     */
    offlineStorageTtlDays?: pulumi.Input<number>;
    /**
     * The region of the EntityType.
     */
    region?: pulumi.Input<string>;
    /**
     * The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
     */
    updateTime?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a AiFeatureStoreEntityType resource.
 */
export interface AiFeatureStoreEntityTypeArgs {
    /**
     * Optional. Description of the EntityType.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
     */
    featurestore: pulumi.Input<string>;
    /**
     * A set of key/value label pairs to assign to this EntityType.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The default monitoring configuration for all Features under this EntityType.
     * If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
     * Structure is documented below.
     */
    monitoringConfig?: pulumi.Input<inputs.vertex.AiFeatureStoreEntityTypeMonitoringConfig>;
    /**
     * The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
     */
    name?: pulumi.Input<string>;
    /**
     * Config for data retention policy in offline storage. TTL in days for feature values that will be stored in offline
     * storage. The Feature Store offline storage periodically removes obsolete feature values older than offlineStorageTtlDays
     * since the feature generation time. If unset (or explicitly set to 0), default to 4000 days TTL.
     */
    offlineStorageTtlDays?: pulumi.Input<number>;
}
