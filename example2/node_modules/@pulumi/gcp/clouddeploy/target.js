"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Target = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The Cloud Deploy `Target` resource
 *
 * ## Example Usage
 * ### Multi_target
 * tests creating and updating a multi-target
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.clouddeploy.Target("primary", {
 *     location: "us-west1",
 *     annotations: {
 *         my_first_annotation: "example-annotation-1",
 *         my_second_annotation: "example-annotation-2",
 *     },
 *     description: "multi-target description",
 *     executionConfigs: [{
 *         usages: [
 *             "RENDER",
 *             "DEPLOY",
 *         ],
 *         executionTimeout: "3600s",
 *     }],
 *     labels: {
 *         my_first_label: "example-label-1",
 *         my_second_label: "example-label-2",
 *     },
 *     multiTarget: {
 *         targetIds: [
 *             "1",
 *             "2",
 *         ],
 *     },
 *     project: "my-project-name",
 *     requireApproval: false,
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Run_target
 * tests creating and updating a cloud run target
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.clouddeploy.Target("primary", {
 *     location: "us-west1",
 *     annotations: {
 *         my_first_annotation: "example-annotation-1",
 *         my_second_annotation: "example-annotation-2",
 *     },
 *     description: "basic description",
 *     executionConfigs: [{
 *         usages: [
 *             "RENDER",
 *             "DEPLOY",
 *         ],
 *         executionTimeout: "3600s",
 *     }],
 *     labels: {
 *         my_first_label: "example-label-1",
 *         my_second_label: "example-label-2",
 *     },
 *     project: "my-project-name",
 *     requireApproval: false,
 *     run: {
 *         location: "projects/my-project-name/locations/us-west1",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Target
 * Creates a basic Cloud Deploy target
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const primary = new gcp.clouddeploy.Target("primary", {
 *     annotations: {
 *         my_first_annotation: "example-annotation-1",
 *         my_second_annotation: "example-annotation-2",
 *     },
 *     description: "basic description",
 *     gke: {
 *         cluster: "projects/my-project-name/locations/us-west1/clusters/example-cluster-name",
 *     },
 *     labels: {
 *         my_first_label: "example-label-1",
 *         my_second_label: "example-label-2",
 *     },
 *     location: "us-west1",
 *     project: "my-project-name",
 *     requireApproval: false,
 * });
 * ```
 *
 * ## Import
 *
 * Target can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:clouddeploy/target:Target default projects/{{project}}/locations/{{location}}/targets/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:clouddeploy/target:Target default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:clouddeploy/target:Target default {{location}}/{{name}}
 * ```
 */
class Target extends pulumi.CustomResource {
    /**
     * Get an existing Target resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Target(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Target.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Target.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["anthosCluster"] = state ? state.anthosCluster : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["executionConfigs"] = state ? state.executionConfigs : undefined;
            resourceInputs["gke"] = state ? state.gke : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["multiTarget"] = state ? state.multiTarget : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["requireApproval"] = state ? state.requireApproval : undefined;
            resourceInputs["run"] = state ? state.run : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["anthosCluster"] = args ? args.anthosCluster : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["executionConfigs"] = args ? args.executionConfigs : undefined;
            resourceInputs["gke"] = args ? args.gke : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["multiTarget"] = args ? args.multiTarget : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["requireApproval"] = args ? args.requireApproval : undefined;
            resourceInputs["run"] = args ? args.run : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["targetId"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Target.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Target = Target;
/** @internal */
Target.__pulumiType = 'gcp:clouddeploy/target:Target';
//# sourceMappingURL=target.js.map