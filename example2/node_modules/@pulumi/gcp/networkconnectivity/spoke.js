"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Spoke = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The NetworkConnectivity Spoke resource
 *
 * ## Example Usage
 * ### Router_appliance
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network = new gcp.compute.Network("network", {autoCreateSubnetworks: false});
 * const subnetwork = new gcp.compute.Subnetwork("subnetwork", {
 *     ipCidrRange: "10.0.0.0/28",
 *     region: "us-west1",
 *     network: network.selfLink,
 * });
 * const instance = new gcp.compute.Instance("instance", {
 *     machineType: "e2-medium",
 *     canIpForward: true,
 *     zone: "us-west1-a",
 *     bootDisk: {
 *         initializeParams: {
 *             image: "projects/debian-cloud/global/images/debian-10-buster-v20210817",
 *         },
 *     },
 *     networkInterfaces: [{
 *         subnetwork: subnetwork.name,
 *         networkIp: "10.0.0.2",
 *         accessConfigs: [{
 *             networkTier: "PREMIUM",
 *         }],
 *     }],
 * });
 * const basicHub = new gcp.networkconnectivity.Hub("basicHub", {
 *     description: "A sample hub",
 *     labels: {
 *         "label-two": "value-one",
 *     },
 * });
 * const primary = new gcp.networkconnectivity.Spoke("primary", {
 *     location: "us-west1",
 *     description: "A sample spoke with a linked routher appliance instance",
 *     labels: {
 *         "label-one": "value-one",
 *     },
 *     hub: basicHub.id,
 *     linkedRouterApplianceInstances: {
 *         instances: [{
 *             virtualMachine: instance.selfLink,
 *             ipAddress: "10.0.0.2",
 *         }],
 *         siteToSiteDataTransfer: true,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Spoke can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:networkconnectivity/spoke:Spoke default projects/{{project}}/locations/{{location}}/spokes/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:networkconnectivity/spoke:Spoke default {{project}}/{{location}}/{{name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:networkconnectivity/spoke:Spoke default {{location}}/{{name}}
 * ```
 */
class Spoke extends pulumi.CustomResource {
    /**
     * Get an existing Spoke resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Spoke(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Spoke.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Spoke.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hub"] = state ? state.hub : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["linkedInterconnectAttachments"] = state ? state.linkedInterconnectAttachments : undefined;
            resourceInputs["linkedRouterApplianceInstances"] = state ? state.linkedRouterApplianceInstances : undefined;
            resourceInputs["linkedVpnTunnels"] = state ? state.linkedVpnTunnels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["uniqueId"] = state ? state.uniqueId : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.hub === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hub'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hub"] = args ? args.hub : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["linkedInterconnectAttachments"] = args ? args.linkedInterconnectAttachments : undefined;
            resourceInputs["linkedRouterApplianceInstances"] = args ? args.linkedRouterApplianceInstances : undefined;
            resourceInputs["linkedVpnTunnels"] = args ? args.linkedVpnTunnels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uniqueId"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Spoke.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Spoke = Spoke;
/** @internal */
Spoke.__pulumiType = 'gcp:networkconnectivity/spoke:Spoke';
//# sourceMappingURL=spoke.js.map