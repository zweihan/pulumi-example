"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsageExportBucket = exports.ServiceIdentity = exports.Service = exports.OrganizationPolicy = exports.IAMPolicy = exports.IAMMember = exports.IAMCustomRole = exports.IAMBinding = exports.IAMAuditConfig = exports.getProjectServiceOutput = exports.getProjectService = exports.getProjectOutput = exports.getProject = exports.getOrganizationPolicyOutput = exports.getOrganizationPolicy = exports.DefaultServiceAccounts = exports.ApiKey = exports.AccessApprovalSettings = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.AccessApprovalSettings = null;
utilities.lazyLoad(exports, ["AccessApprovalSettings"], () => require("./accessApprovalSettings"));
exports.ApiKey = null;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));
exports.DefaultServiceAccounts = null;
utilities.lazyLoad(exports, ["DefaultServiceAccounts"], () => require("./defaultServiceAccounts"));
exports.getOrganizationPolicy = null;
exports.getOrganizationPolicyOutput = null;
utilities.lazyLoad(exports, ["getOrganizationPolicy", "getOrganizationPolicyOutput"], () => require("./getOrganizationPolicy"));
exports.getProject = null;
exports.getProjectOutput = null;
utilities.lazyLoad(exports, ["getProject", "getProjectOutput"], () => require("./getProject"));
exports.getProjectService = null;
exports.getProjectServiceOutput = null;
utilities.lazyLoad(exports, ["getProjectService", "getProjectServiceOutput"], () => require("./getProjectService"));
exports.IAMAuditConfig = null;
utilities.lazyLoad(exports, ["IAMAuditConfig"], () => require("./iamauditConfig"));
exports.IAMBinding = null;
utilities.lazyLoad(exports, ["IAMBinding"], () => require("./iambinding"));
exports.IAMCustomRole = null;
utilities.lazyLoad(exports, ["IAMCustomRole"], () => require("./iamcustomRole"));
exports.IAMMember = null;
utilities.lazyLoad(exports, ["IAMMember"], () => require("./iammember"));
exports.IAMPolicy = null;
utilities.lazyLoad(exports, ["IAMPolicy"], () => require("./iampolicy"));
exports.OrganizationPolicy = null;
utilities.lazyLoad(exports, ["OrganizationPolicy"], () => require("./organizationPolicy"));
exports.Service = null;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));
exports.ServiceIdentity = null;
utilities.lazyLoad(exports, ["ServiceIdentity"], () => require("./serviceIdentity"));
exports.UsageExportBucket = null;
utilities.lazyLoad(exports, ["UsageExportBucket"], () => require("./usageExportBucket"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:projects/accessApprovalSettings:AccessApprovalSettings":
                return new exports.AccessApprovalSettings(name, undefined, { urn });
            case "gcp:projects/apiKey:ApiKey":
                return new exports.ApiKey(name, undefined, { urn });
            case "gcp:projects/defaultServiceAccounts:DefaultServiceAccounts":
                return new exports.DefaultServiceAccounts(name, undefined, { urn });
            case "gcp:projects/iAMAuditConfig:IAMAuditConfig":
                return new exports.IAMAuditConfig(name, undefined, { urn });
            case "gcp:projects/iAMBinding:IAMBinding":
                return new exports.IAMBinding(name, undefined, { urn });
            case "gcp:projects/iAMCustomRole:IAMCustomRole":
                return new exports.IAMCustomRole(name, undefined, { urn });
            case "gcp:projects/iAMMember:IAMMember":
                return new exports.IAMMember(name, undefined, { urn });
            case "gcp:projects/iAMPolicy:IAMPolicy":
                return new exports.IAMPolicy(name, undefined, { urn });
            case "gcp:projects/organizationPolicy:OrganizationPolicy":
                return new exports.OrganizationPolicy(name, undefined, { urn });
            case "gcp:projects/service:Service":
                return new exports.Service(name, undefined, { urn });
            case "gcp:projects/serviceIdentity:ServiceIdentity":
                return new exports.ServiceIdentity(name, undefined, { urn });
            case "gcp:projects/usageExportBucket:UsageExportBucket":
                return new exports.UsageExportBucket(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "projects/accessApprovalSettings", _module);
pulumi.runtime.registerResourceModule("gcp", "projects/apiKey", _module);
pulumi.runtime.registerResourceModule("gcp", "projects/defaultServiceAccounts", _module);
pulumi.runtime.registerResourceModule("gcp", "projects/iAMAuditConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "projects/iAMBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "projects/iAMCustomRole", _module);
pulumi.runtime.registerResourceModule("gcp", "projects/iAMMember", _module);
pulumi.runtime.registerResourceModule("gcp", "projects/iAMPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "projects/organizationPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "projects/service", _module);
pulumi.runtime.registerResourceModule("gcp", "projects/serviceIdentity", _module);
pulumi.runtime.registerResourceModule("gcp", "projects/usageExportBucket", _module);
//# sourceMappingURL=index.js.map