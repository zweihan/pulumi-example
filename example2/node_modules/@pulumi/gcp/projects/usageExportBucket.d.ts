import * as pulumi from "@pulumi/pulumi";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const myProject = new gcp.organizations.Project("myProject", {
 *     orgId: "1234567",
 *     projectId: "your-project-id",
 * });
 * ```
 *
 * To create a project under a specific folder
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const department1 = new gcp.organizations.Folder("department1", {
 *     displayName: "Department 1",
 *     parent: "organizations/1234567",
 * });
 * const myProject_in_a_folder = new gcp.organizations.Project("myProject-in-a-folder", {
 *     projectId: "your-project-id",
 *     folderId: department1.name,
 * });
 * ```
 *
 * ## Import
 *
 * Projects can be imported using the `project_id`, e.g.
 *
 * ```sh
 *  $ pulumi import gcp:projects/usageExportBucket:UsageExportBucket my_project your-project-id
 * ```
 */
export declare class UsageExportBucket extends pulumi.CustomResource {
    /**
     * Get an existing UsageExportBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UsageExportBucketState, opts?: pulumi.CustomResourceOptions): UsageExportBucket;
    /**
     * Returns true if the given object is an instance of UsageExportBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is UsageExportBucket;
    /**
     * The bucket to store reports in.
     */
    readonly bucketName: pulumi.Output<string>;
    /**
     * A prefix for the reports, for instance, the project name.
     */
    readonly prefix: pulumi.Output<string | undefined>;
    /**
     * The project to set the export bucket on. If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * Create a UsageExportBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UsageExportBucketArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering UsageExportBucket resources.
 */
export interface UsageExportBucketState {
    /**
     * The bucket to store reports in.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * A prefix for the reports, for instance, the project name.
     */
    prefix?: pulumi.Input<string>;
    /**
     * The project to set the export bucket on. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a UsageExportBucket resource.
 */
export interface UsageExportBucketArgs {
    /**
     * The bucket to store reports in.
     */
    bucketName: pulumi.Input<string>;
    /**
     * A prefix for the reports, for instance, the project name.
     */
    prefix?: pulumi.Input<string>;
    /**
     * The project to set the export bucket on. If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
