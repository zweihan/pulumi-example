"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageBucket = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 * ### Firebasestorage Bucket Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultBucket = new gcp.storage.Bucket("defaultBucket", {
 *     location: "US",
 *     uniformBucketLevelAccess: true,
 * }, {
 *     provider: google_beta,
 * });
 * const defaultStorageBucket = new gcp.firebase.StorageBucket("defaultStorageBucket", {
 *     project: "my-project-name",
 *     bucketId: defaultBucket.id,
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * Bucket can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:firebase/storageBucket:StorageBucket default projects/{{project}}/buckets/{{bucket_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:firebase/storageBucket:StorageBucket default {{project}}/{{bucket_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:firebase/storageBucket:StorageBucket default {{bucket_id}}
 * ```
 */
class StorageBucket extends pulumi.CustomResource {
    /**
     * Get an existing StorageBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new StorageBucket(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StorageBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageBucket.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["bucketId"] = state ? state.bucketId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["bucketId"] = args ? args.bucketId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageBucket.__pulumiType, name, resourceInputs, opts);
    }
}
exports.StorageBucket = StorageBucket;
/** @internal */
StorageBucket.__pulumiType = 'gcp:firebase/storageBucket:StorageBucket';
//# sourceMappingURL=storageBucket.js.map