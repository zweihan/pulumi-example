import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * ## Example Usage
 * ### Firebasehosting Version Redirect
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultHostingSite = new gcp.firebase.HostingSite("defaultHostingSite", {
 *     project: "my-project-name",
 *     siteId: "site-id",
 * }, {
 *     provider: google_beta,
 * });
 * const defaultHostingVersion = new gcp.firebase.HostingVersion("defaultHostingVersion", {
 *     siteId: defaultHostingSite.siteId,
 *     config: {
 *         redirects: [{
 *             glob: "/google/**",
 *             statusCode: 302,
 *             location: "https://www.google.com",
 *         }],
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const defaultHostingRelease = new gcp.firebase.HostingRelease("defaultHostingRelease", {
 *     siteId: defaultHostingSite.siteId,
 *     versionName: defaultHostingVersion.name,
 *     message: "Redirect to Google",
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Firebasehosting Version Cloud Run
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultHostingSite = new gcp.firebase.HostingSite("defaultHostingSite", {
 *     project: "my-project-name",
 *     siteId: "site-id",
 * }, {
 *     provider: google_beta,
 * });
 * const defaultService = new gcp.cloudrunv2.Service("defaultService", {
 *     project: "my-project-name",
 *     location: "us-central1",
 *     ingress: "INGRESS_TRAFFIC_ALL",
 *     template: {
 *         containers: [{
 *             image: "us-docker.pkg.dev/cloudrun/container/hello",
 *         }],
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const defaultHostingVersion = new gcp.firebase.HostingVersion("defaultHostingVersion", {
 *     siteId: defaultHostingSite.siteId,
 *     config: {
 *         rewrites: [{
 *             glob: "/hello/**",
 *             run: {
 *                 serviceId: defaultService.name,
 *                 region: defaultService.location,
 *             },
 *         }],
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const defaultHostingRelease = new gcp.firebase.HostingRelease("defaultHostingRelease", {
 *     siteId: defaultHostingSite.siteId,
 *     versionName: defaultHostingVersion.name,
 *     message: "Cloud Run Integration",
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Firebasehosting Version Cloud Functions
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultHostingSite = new gcp.firebase.HostingSite("defaultHostingSite", {
 *     project: "my-project-name",
 *     siteId: "site-id",
 * }, {
 *     provider: google_beta,
 * });
 * const bucket = new gcp.storage.Bucket("bucket", {
 *     project: "my-project-name",
 *     location: "US",
 *     uniformBucketLevelAccess: true,
 * }, {
 *     provider: google_beta,
 * });
 * const object = new gcp.storage.BucketObject("object", {
 *     bucket: bucket.name,
 *     source: new pulumi.asset.FileAsset("function-source.zip"),
 * }, {
 *     provider: google_beta,
 * });
 * // Add path to the zipped function source code
 * const _function = new gcp.cloudfunctions.Function("function", {
 *     project: "my-project-name",
 *     description: "A Cloud Function connected to Firebase Hosing",
 *     runtime: "nodejs16",
 *     availableMemoryMb: 128,
 *     sourceArchiveBucket: bucket.name,
 *     sourceArchiveObject: object.name,
 *     triggerHttp: true,
 *     entryPoint: "helloHttp",
 * }, {
 *     provider: google_beta,
 * });
 * const defaultHostingVersion = new gcp.firebase.HostingVersion("defaultHostingVersion", {
 *     siteId: defaultHostingSite.siteId,
 *     config: {
 *         rewrites: [{
 *             glob: "/hello/**",
 *             "function": _function.name,
 *         }],
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const defaultHostingRelease = new gcp.firebase.HostingRelease("defaultHostingRelease", {
 *     siteId: defaultHostingSite.siteId,
 *     versionName: defaultHostingVersion.name,
 *     message: "Cloud Functions Integration",
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * Version can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:firebase/hostingVersion:HostingVersion default sites/{{site_id}}/versions/{{version_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:firebase/hostingVersion:HostingVersion default {{site_id}}/{{version_id}}
 * ```
 */
export declare class HostingVersion extends pulumi.CustomResource {
    /**
     * Get an existing HostingVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HostingVersionState, opts?: pulumi.CustomResourceOptions): HostingVersion;
    /**
     * Returns true if the given object is an instance of HostingVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is HostingVersion;
    /**
     * The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
     * Structure is documented below.
     */
    readonly config: pulumi.Output<outputs.firebase.HostingVersionConfig | undefined>;
    /**
     * The fully-qualified resource name for the version, in the format:
     * sites/SITE_ID/versions/VERSION_ID
     */
    readonly name: pulumi.Output<string>;
    /**
     * Required. The ID of the site in which to create this Version.
     */
    readonly siteId: pulumi.Output<string>;
    /**
     * The ID for the version as in sites/SITE_ID/versions/VERSION_ID
     */
    readonly versionId: pulumi.Output<string>;
    /**
     * Create a HostingVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HostingVersionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering HostingVersion resources.
 */
export interface HostingVersionState {
    /**
     * The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
     * Structure is documented below.
     */
    config?: pulumi.Input<inputs.firebase.HostingVersionConfig>;
    /**
     * The fully-qualified resource name for the version, in the format:
     * sites/SITE_ID/versions/VERSION_ID
     */
    name?: pulumi.Input<string>;
    /**
     * Required. The ID of the site in which to create this Version.
     */
    siteId?: pulumi.Input<string>;
    /**
     * The ID for the version as in sites/SITE_ID/versions/VERSION_ID
     */
    versionId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a HostingVersion resource.
 */
export interface HostingVersionArgs {
    /**
     * The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
     * Structure is documented below.
     */
    config?: pulumi.Input<inputs.firebase.HostingVersionConfig>;
    /**
     * Required. The ID of the site in which to create this Version.
     */
    siteId: pulumi.Input<string>;
}
