"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseInstance = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 * ### Firebase Database Instance Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const basic = new gcp.firebase.DatabaseInstance("basic", {
 *     project: "my-project-name",
 *     region: "us-central1",
 *     instanceId: "active-db",
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Firebase Database Instance Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const full = new gcp.firebase.DatabaseInstance("full", {
 *     project: "my-project-name",
 *     region: "europe-west1",
 *     instanceId: "disabled-db",
 *     type: "USER_DATABASE",
 *     desiredState: "DISABLED",
 * }, {
 *     provider: google_beta,
 * });
 * ```
 * ### Firebase Database Instance Default Database
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultProject = new gcp.organizations.Project("defaultProject", {
 *     projectId: "rtdb-project",
 *     orgId: "123456789",
 *     labels: {
 *         firebase: "enabled",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const defaultFirebase_projectProject = new gcp.firebase.Project("defaultFirebase/projectProject", {project: defaultProject.projectId}, {
 *     provider: google_beta,
 * });
 * const firebaseDatabase = new gcp.projects.Service("firebaseDatabase", {
 *     project: defaultFirebase / projectProject.project,
 *     service: "firebasedatabase.googleapis.com",
 * }, {
 *     provider: google_beta,
 * });
 * const defaultDatabaseInstance = new gcp.firebase.DatabaseInstance("defaultDatabaseInstance", {
 *     project: defaultFirebase / projectProject.project,
 *     region: "us-central1",
 *     instanceId: "rtdb-project-default-rtdb",
 *     type: "DEFAULT_DATABASE",
 * }, {
 *     provider: google_beta,
 *     dependsOn: [firebaseDatabase],
 * });
 * ```
 *
 * ## Import
 *
 * Instance can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:firebase/databaseInstance:DatabaseInstance default projects/{{project}}/locations/{{region}}/instances/{{instance_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:firebase/databaseInstance:DatabaseInstance default {{project}}/{{region}}/{{instance_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:firebase/databaseInstance:DatabaseInstance default {{region}}/{{instance_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:firebase/databaseInstance:DatabaseInstance default {{instance_id}}
 * ```
 */
class DatabaseInstance extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DatabaseInstance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DatabaseInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseInstance.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["databaseUrl"] = state ? state.databaseUrl : undefined;
            resourceInputs["desiredState"] = state ? state.desiredState : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["desiredState"] = args ? args.desiredState : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["databaseUrl"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseInstance.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DatabaseInstance = DatabaseInstance;
/** @internal */
DatabaseInstance.__pulumiType = 'gcp:firebase/databaseInstance:DatabaseInstance';
//# sourceMappingURL=databaseInstance.js.map