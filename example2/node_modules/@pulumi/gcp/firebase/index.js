"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebApp = exports.StorageBucket = exports.ProjectLocation = exports.Project = exports.HostingVersion = exports.HostingSite = exports.HostingRelease = exports.HostingChannel = exports.getWebAppConfigOutput = exports.getWebAppConfig = exports.getWebAppOutput = exports.getWebApp = exports.getHostingChannelOutput = exports.getHostingChannel = exports.getAppleAppConfigOutput = exports.getAppleAppConfig = exports.getAppleAppOutput = exports.getAppleApp = exports.getAndroidAppOutput = exports.getAndroidApp = exports.DatabaseInstance = exports.AppleApp = exports.AndroidApp = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.AndroidApp = null;
utilities.lazyLoad(exports, ["AndroidApp"], () => require("./androidApp"));
exports.AppleApp = null;
utilities.lazyLoad(exports, ["AppleApp"], () => require("./appleApp"));
exports.DatabaseInstance = null;
utilities.lazyLoad(exports, ["DatabaseInstance"], () => require("./databaseInstance"));
exports.getAndroidApp = null;
exports.getAndroidAppOutput = null;
utilities.lazyLoad(exports, ["getAndroidApp", "getAndroidAppOutput"], () => require("./getAndroidApp"));
exports.getAppleApp = null;
exports.getAppleAppOutput = null;
utilities.lazyLoad(exports, ["getAppleApp", "getAppleAppOutput"], () => require("./getAppleApp"));
exports.getAppleAppConfig = null;
exports.getAppleAppConfigOutput = null;
utilities.lazyLoad(exports, ["getAppleAppConfig", "getAppleAppConfigOutput"], () => require("./getAppleAppConfig"));
exports.getHostingChannel = null;
exports.getHostingChannelOutput = null;
utilities.lazyLoad(exports, ["getHostingChannel", "getHostingChannelOutput"], () => require("./getHostingChannel"));
exports.getWebApp = null;
exports.getWebAppOutput = null;
utilities.lazyLoad(exports, ["getWebApp", "getWebAppOutput"], () => require("./getWebApp"));
exports.getWebAppConfig = null;
exports.getWebAppConfigOutput = null;
utilities.lazyLoad(exports, ["getWebAppConfig", "getWebAppConfigOutput"], () => require("./getWebAppConfig"));
exports.HostingChannel = null;
utilities.lazyLoad(exports, ["HostingChannel"], () => require("./hostingChannel"));
exports.HostingRelease = null;
utilities.lazyLoad(exports, ["HostingRelease"], () => require("./hostingRelease"));
exports.HostingSite = null;
utilities.lazyLoad(exports, ["HostingSite"], () => require("./hostingSite"));
exports.HostingVersion = null;
utilities.lazyLoad(exports, ["HostingVersion"], () => require("./hostingVersion"));
exports.Project = null;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));
exports.ProjectLocation = null;
utilities.lazyLoad(exports, ["ProjectLocation"], () => require("./projectLocation"));
exports.StorageBucket = null;
utilities.lazyLoad(exports, ["StorageBucket"], () => require("./storageBucket"));
exports.WebApp = null;
utilities.lazyLoad(exports, ["WebApp"], () => require("./webApp"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:firebase/androidApp:AndroidApp":
                return new exports.AndroidApp(name, undefined, { urn });
            case "gcp:firebase/appleApp:AppleApp":
                return new exports.AppleApp(name, undefined, { urn });
            case "gcp:firebase/databaseInstance:DatabaseInstance":
                return new exports.DatabaseInstance(name, undefined, { urn });
            case "gcp:firebase/hostingChannel:HostingChannel":
                return new exports.HostingChannel(name, undefined, { urn });
            case "gcp:firebase/hostingRelease:HostingRelease":
                return new exports.HostingRelease(name, undefined, { urn });
            case "gcp:firebase/hostingSite:HostingSite":
                return new exports.HostingSite(name, undefined, { urn });
            case "gcp:firebase/hostingVersion:HostingVersion":
                return new exports.HostingVersion(name, undefined, { urn });
            case "gcp:firebase/project:Project":
                return new exports.Project(name, undefined, { urn });
            case "gcp:firebase/projectLocation:ProjectLocation":
                return new exports.ProjectLocation(name, undefined, { urn });
            case "gcp:firebase/storageBucket:StorageBucket":
                return new exports.StorageBucket(name, undefined, { urn });
            case "gcp:firebase/webApp:WebApp":
                return new exports.WebApp(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "firebase/androidApp", _module);
pulumi.runtime.registerResourceModule("gcp", "firebase/appleApp", _module);
pulumi.runtime.registerResourceModule("gcp", "firebase/databaseInstance", _module);
pulumi.runtime.registerResourceModule("gcp", "firebase/hostingChannel", _module);
pulumi.runtime.registerResourceModule("gcp", "firebase/hostingRelease", _module);
pulumi.runtime.registerResourceModule("gcp", "firebase/hostingSite", _module);
pulumi.runtime.registerResourceModule("gcp", "firebase/hostingVersion", _module);
pulumi.runtime.registerResourceModule("gcp", "firebase/project", _module);
pulumi.runtime.registerResourceModule("gcp", "firebase/projectLocation", _module);
pulumi.runtime.registerResourceModule("gcp", "firebase/storageBucket", _module);
pulumi.runtime.registerResourceModule("gcp", "firebase/webApp", _module);
//# sourceMappingURL=index.js.map