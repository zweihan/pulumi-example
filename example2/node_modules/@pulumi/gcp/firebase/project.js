"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Project = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Google Cloud Firebase instance. This enables Firebase resources on a given google project.
 * Since a FirebaseProject is actually also a GCP Project, a FirebaseProject uses underlying GCP
 * identifiers (most importantly, the projectId) as its own for easy interop with GCP APIs.
 * Once Firebase has been added to a Google Project it cannot be removed.
 *
 * To get more information about Project, see:
 *
 * * [API documentation](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects)
 * * How-to Guides
 *     * [Official Documentation](https://firebase.google.com/)
 *
 * ## Example Usage
 * ### Firebase Project Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultProject = new gcp.organizations.Project("defaultProject", {
 *     projectId: "tf-test",
 *     orgId: "123456789",
 *     labels: {
 *         firebase: "enabled",
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * const defaultFirebase_projectProject = new gcp.firebase.Project("defaultFirebase/projectProject", {project: defaultProject.projectId}, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * Project can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:firebase/project:Project default projects/{{project}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:firebase/project:Project default {{project}}
 * ```
 */
class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Project(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["projectNumber"] = state ? state.projectNumber : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["projectNumber"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Project = Project;
/** @internal */
Project.__pulumiType = 'gcp:firebase/project:Project';
//# sourceMappingURL=project.js.map