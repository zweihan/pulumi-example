"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponsePolicyRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 * ### Dns Response Policy Rule Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const network_1 = new gcp.compute.Network("network-1", {autoCreateSubnetworks: false}, {
 *     provider: google_beta,
 * });
 * const network_2 = new gcp.compute.Network("network-2", {autoCreateSubnetworks: false}, {
 *     provider: google_beta,
 * });
 * const response_policy = new gcp.dns.ResponsePolicy("response-policy", {
 *     responsePolicyName: "example-response-policy",
 *     networks: [
 *         {
 *             networkUrl: network_1.id,
 *         },
 *         {
 *             networkUrl: network_2.id,
 *         },
 *     ],
 * }, {
 *     provider: google_beta,
 * });
 * const example_response_policy_rule = new gcp.dns.ResponsePolicyRule("example-response-policy-rule", {
 *     responsePolicy: response_policy.responsePolicyName,
 *     ruleName: "example-rule",
 *     dnsName: "dns.example.com.",
 *     localData: {
 *         localDatas: [{
 *             name: "dns.example.com.",
 *             type: "A",
 *             ttl: 300,
 *             rrdatas: ["192.0.2.91"],
 *         }],
 *     },
 * }, {
 *     provider: google_beta,
 * });
 * ```
 *
 * ## Import
 *
 * ResponsePolicyRule can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:dns/responsePolicyRule:ResponsePolicyRule default projects/{{project}}/responsePolicies/{{response_policy}}/rules/{{rule_name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:dns/responsePolicyRule:ResponsePolicyRule default {{project}}/{{response_policy}}/{{rule_name}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:dns/responsePolicyRule:ResponsePolicyRule default {{response_policy}}/{{rule_name}}
 * ```
 */
class ResponsePolicyRule extends pulumi.CustomResource {
    /**
     * Get an existing ResponsePolicyRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ResponsePolicyRule(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ResponsePolicyRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResponsePolicyRule.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["behavior"] = state ? state.behavior : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["localData"] = state ? state.localData : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["responsePolicy"] = state ? state.responsePolicy : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.dnsName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsName'");
            }
            if ((!args || args.responsePolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'responsePolicy'");
            }
            if ((!args || args.ruleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            resourceInputs["behavior"] = args ? args.behavior : undefined;
            resourceInputs["dnsName"] = args ? args.dnsName : undefined;
            resourceInputs["localData"] = args ? args.localData : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["responsePolicy"] = args ? args.responsePolicy : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResponsePolicyRule.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ResponsePolicyRule = ResponsePolicyRule;
/** @internal */
ResponsePolicyRule.__pulumiType = 'gcp:dns/responsePolicyRule:ResponsePolicyRule';
//# sourceMappingURL=responsePolicyRule.js.map