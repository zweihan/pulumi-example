"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.UptimeCheckConfig = exports.Slo = exports.NotificationChannel = exports.MonitoredProject = exports.MetricDescriptor = exports.Group = exports.getUptimeCheckIPs = exports.getSecretVersionOutput = exports.getSecretVersion = exports.getNotificationChannelOutput = exports.getNotificationChannel = exports.getMeshIstioServiceOutput = exports.getMeshIstioService = exports.getIstioCanonicalServiceOutput = exports.getIstioCanonicalService = exports.getClusterIstioServiceOutput = exports.getClusterIstioService = exports.getAppEngineServiceOutput = exports.getAppEngineService = exports.GenericService = exports.Dashboard = exports.CustomService = exports.AlertPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.AlertPolicy = null;
utilities.lazyLoad(exports, ["AlertPolicy"], () => require("./alertPolicy"));
exports.CustomService = null;
utilities.lazyLoad(exports, ["CustomService"], () => require("./customService"));
exports.Dashboard = null;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));
exports.GenericService = null;
utilities.lazyLoad(exports, ["GenericService"], () => require("./genericService"));
exports.getAppEngineService = null;
exports.getAppEngineServiceOutput = null;
utilities.lazyLoad(exports, ["getAppEngineService", "getAppEngineServiceOutput"], () => require("./getAppEngineService"));
exports.getClusterIstioService = null;
exports.getClusterIstioServiceOutput = null;
utilities.lazyLoad(exports, ["getClusterIstioService", "getClusterIstioServiceOutput"], () => require("./getClusterIstioService"));
exports.getIstioCanonicalService = null;
exports.getIstioCanonicalServiceOutput = null;
utilities.lazyLoad(exports, ["getIstioCanonicalService", "getIstioCanonicalServiceOutput"], () => require("./getIstioCanonicalService"));
exports.getMeshIstioService = null;
exports.getMeshIstioServiceOutput = null;
utilities.lazyLoad(exports, ["getMeshIstioService", "getMeshIstioServiceOutput"], () => require("./getMeshIstioService"));
exports.getNotificationChannel = null;
exports.getNotificationChannelOutput = null;
utilities.lazyLoad(exports, ["getNotificationChannel", "getNotificationChannelOutput"], () => require("./getNotificationChannel"));
exports.getSecretVersion = null;
exports.getSecretVersionOutput = null;
utilities.lazyLoad(exports, ["getSecretVersion", "getSecretVersionOutput"], () => require("./getSecretVersion"));
exports.getUptimeCheckIPs = null;
utilities.lazyLoad(exports, ["getUptimeCheckIPs"], () => require("./getUptimeCheckIPs"));
exports.Group = null;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));
exports.MetricDescriptor = null;
utilities.lazyLoad(exports, ["MetricDescriptor"], () => require("./metricDescriptor"));
exports.MonitoredProject = null;
utilities.lazyLoad(exports, ["MonitoredProject"], () => require("./monitoredProject"));
exports.NotificationChannel = null;
utilities.lazyLoad(exports, ["NotificationChannel"], () => require("./notificationChannel"));
exports.Slo = null;
utilities.lazyLoad(exports, ["Slo"], () => require("./slo"));
exports.UptimeCheckConfig = null;
utilities.lazyLoad(exports, ["UptimeCheckConfig"], () => require("./uptimeCheckConfig"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:monitoring/alertPolicy:AlertPolicy":
                return new exports.AlertPolicy(name, undefined, { urn });
            case "gcp:monitoring/customService:CustomService":
                return new exports.CustomService(name, undefined, { urn });
            case "gcp:monitoring/dashboard:Dashboard":
                return new exports.Dashboard(name, undefined, { urn });
            case "gcp:monitoring/genericService:GenericService":
                return new exports.GenericService(name, undefined, { urn });
            case "gcp:monitoring/group:Group":
                return new exports.Group(name, undefined, { urn });
            case "gcp:monitoring/metricDescriptor:MetricDescriptor":
                return new exports.MetricDescriptor(name, undefined, { urn });
            case "gcp:monitoring/monitoredProject:MonitoredProject":
                return new exports.MonitoredProject(name, undefined, { urn });
            case "gcp:monitoring/notificationChannel:NotificationChannel":
                return new exports.NotificationChannel(name, undefined, { urn });
            case "gcp:monitoring/slo:Slo":
                return new exports.Slo(name, undefined, { urn });
            case "gcp:monitoring/uptimeCheckConfig:UptimeCheckConfig":
                return new exports.UptimeCheckConfig(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "monitoring/alertPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "monitoring/customService", _module);
pulumi.runtime.registerResourceModule("gcp", "monitoring/dashboard", _module);
pulumi.runtime.registerResourceModule("gcp", "monitoring/genericService", _module);
pulumi.runtime.registerResourceModule("gcp", "monitoring/group", _module);
pulumi.runtime.registerResourceModule("gcp", "monitoring/metricDescriptor", _module);
pulumi.runtime.registerResourceModule("gcp", "monitoring/monitoredProject", _module);
pulumi.runtime.registerResourceModule("gcp", "monitoring/notificationChannel", _module);
pulumi.runtime.registerResourceModule("gcp", "monitoring/slo", _module);
pulumi.runtime.registerResourceModule("gcp", "monitoring/uptimeCheckConfig", _module);
//# sourceMappingURL=index.js.map