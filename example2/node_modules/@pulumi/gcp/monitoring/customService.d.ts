import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * A Service is a discrete, autonomous, and network-accessible unit,
 * designed to solve an individual concern (Wikipedia). In Cloud Monitoring,
 * a Service acts as the root resource under which operational aspects of
 * the service are accessible
 *
 * To get more information about Service, see:
 *
 * * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services)
 * * How-to Guides
 *     * [Service Monitoring](https://cloud.google.com/monitoring/service-monitoring)
 *     * [Monitoring API Documentation](https://cloud.google.com/monitoring/api/v3/)
 *
 * ## Example Usage
 * ### Monitoring Service Custom
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const custom = new gcp.monitoring.CustomService("custom", {
 *     displayName: "My Custom Service custom-srv",
 *     serviceId: "custom-srv",
 *     telemetry: {
 *         resourceName: "//product.googleapis.com/foo/foo/services/test",
 *     },
 *     userLabels: {
 *         my_key: "my_value",
 *         my_other_key: "my_other_value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Service can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:monitoring/customService:CustomService default {{name}}
 * ```
 */
export declare class CustomService extends pulumi.CustomResource {
    /**
     * Get an existing CustomService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomServiceState, opts?: pulumi.CustomResourceOptions): CustomService;
    /**
     * Returns true if the given object is an instance of CustomService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is CustomService;
    /**
     * Name used for UI elements listing this Service.
     */
    readonly displayName: pulumi.Output<string | undefined>;
    /**
     * The full resource name for this service. The syntax is:
     * projects/[PROJECT_ID]/services/[SERVICE_ID].
     */
    readonly name: pulumi.Output<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * An optional service ID to use. If not given, the server will generate a
     * service ID.
     */
    readonly serviceId: pulumi.Output<string>;
    /**
     * Configuration for how to query telemetry on a Service.
     * Structure is documented below.
     */
    readonly telemetry: pulumi.Output<outputs.monitoring.CustomServiceTelemetry | undefined>;
    /**
     * Labels which have been used to annotate the service. Label keys must start
     * with a letter. Label keys and values may contain lowercase letters,
     * numbers, underscores, and dashes. Label keys and values have a maximum
     * length of 63 characters, and must be less than 128 bytes in size. Up to 64
     * label entries may be stored. For labels which do not have a semantic value,
     * the empty string may be supplied for the label value.
     */
    readonly userLabels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Create a CustomService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CustomServiceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering CustomService resources.
 */
export interface CustomServiceState {
    /**
     * Name used for UI elements listing this Service.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The full resource name for this service. The syntax is:
     * projects/[PROJECT_ID]/services/[SERVICE_ID].
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * An optional service ID to use. If not given, the server will generate a
     * service ID.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * Configuration for how to query telemetry on a Service.
     * Structure is documented below.
     */
    telemetry?: pulumi.Input<inputs.monitoring.CustomServiceTelemetry>;
    /**
     * Labels which have been used to annotate the service. Label keys must start
     * with a letter. Label keys and values may contain lowercase letters,
     * numbers, underscores, and dashes. Label keys and values have a maximum
     * length of 63 characters, and must be less than 128 bytes in size. Up to 64
     * label entries may be stored. For labels which do not have a semantic value,
     * the empty string may be supplied for the label value.
     */
    userLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
/**
 * The set of arguments for constructing a CustomService resource.
 */
export interface CustomServiceArgs {
    /**
     * Name used for UI elements listing this Service.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
    /**
     * An optional service ID to use. If not given, the server will generate a
     * service ID.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * Configuration for how to query telemetry on a Service.
     * Structure is documented below.
     */
    telemetry?: pulumi.Input<inputs.monitoring.CustomServiceTelemetry>;
    /**
     * Labels which have been used to annotate the service. Label keys must start
     * with a letter. Label keys and values may contain lowercase letters,
     * numbers, underscores, and dashes. Label keys and values have a maximum
     * length of 63 characters, and must be less than 128 bytes in size. Up to 64
     * label entries may be stored. For labels which do not have a semantic value,
     * the empty string may be supplied for the label value.
     */
    userLabels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
