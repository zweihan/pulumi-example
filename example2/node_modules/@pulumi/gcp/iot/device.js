"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Device = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A Google Cloud IoT Core device.
 *
 * To get more information about Device, see:
 *
 * * [API documentation](https://cloud.google.com/iot/docs/reference/cloudiot/rest/)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/iot/docs/)
 *
 * ## Example Usage
 * ### Cloudiot Device Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const registry = new gcp.iot.Registry("registry", {});
 * const test_device = new gcp.iot.Device("test-device", {registry: registry.id});
 * ```
 * ### Cloudiot Device Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as gcp from "@pulumi/gcp";
 *
 * const registry = new gcp.iot.Registry("registry", {});
 * const test_device = new gcp.iot.Device("test-device", {
 *     registry: registry.id,
 *     credentials: [{
 *         publicKey: {
 *             format: "RSA_PEM",
 *             key: fs.readFileSync("test-fixtures/rsa_public.pem"),
 *         },
 *     }],
 *     blocked: false,
 *     logLevel: "INFO",
 *     metadata: {
 *         test_key_1: "test_value_1",
 *     },
 *     gatewayConfig: {
 *         gatewayType: "NON_GATEWAY",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Device can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:iot/device:Device default {{registry}}/devices/{{name}}
 * ```
 */
class Device extends pulumi.CustomResource {
    /**
     * Get an existing Device resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Device(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Device.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Device.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["blocked"] = state ? state.blocked : undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["gatewayConfig"] = state ? state.gatewayConfig : undefined;
            resourceInputs["lastConfigAckTime"] = state ? state.lastConfigAckTime : undefined;
            resourceInputs["lastConfigSendTime"] = state ? state.lastConfigSendTime : undefined;
            resourceInputs["lastErrorStatuses"] = state ? state.lastErrorStatuses : undefined;
            resourceInputs["lastErrorTime"] = state ? state.lastErrorTime : undefined;
            resourceInputs["lastEventTime"] = state ? state.lastEventTime : undefined;
            resourceInputs["lastHeartbeatTime"] = state ? state.lastHeartbeatTime : undefined;
            resourceInputs["lastStateTime"] = state ? state.lastStateTime : undefined;
            resourceInputs["logLevel"] = state ? state.logLevel : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numId"] = state ? state.numId : undefined;
            resourceInputs["registry"] = state ? state.registry : undefined;
            resourceInputs["states"] = state ? state.states : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.registry === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registry'");
            }
            resourceInputs["blocked"] = args ? args.blocked : undefined;
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["gatewayConfig"] = args ? args.gatewayConfig : undefined;
            resourceInputs["logLevel"] = args ? args.logLevel : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["registry"] = args ? args.registry : undefined;
            resourceInputs["configs"] = undefined /*out*/;
            resourceInputs["lastConfigAckTime"] = undefined /*out*/;
            resourceInputs["lastConfigSendTime"] = undefined /*out*/;
            resourceInputs["lastErrorStatuses"] = undefined /*out*/;
            resourceInputs["lastErrorTime"] = undefined /*out*/;
            resourceInputs["lastEventTime"] = undefined /*out*/;
            resourceInputs["lastHeartbeatTime"] = undefined /*out*/;
            resourceInputs["lastStateTime"] = undefined /*out*/;
            resourceInputs["numId"] = undefined /*out*/;
            resourceInputs["states"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Device.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Device = Device;
/** @internal */
Device.__pulumiType = 'gcp:iot/device:Device';
//# sourceMappingURL=device.js.map