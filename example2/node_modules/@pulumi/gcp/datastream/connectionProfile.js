"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionProfile = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 * ### Datastream Connection Profile Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.datastream.ConnectionProfile("default", {
 *     connectionProfileId: "my-profile",
 *     displayName: "Connection profile",
 *     gcsProfile: {
 *         bucket: "my-bucket",
 *         rootPath: "/path",
 *     },
 *     location: "us-central1",
 * });
 * ```
 * ### Datastream Connection Profile Bigquery Private Connection
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultNetwork = new gcp.compute.Network("defaultNetwork", {});
 * const privateConnection = new gcp.datastream.PrivateConnection("privateConnection", {
 *     displayName: "Connection profile",
 *     location: "us-central1",
 *     privateConnectionId: "my-connection",
 *     labels: {
 *         key: "value",
 *     },
 *     vpcPeeringConfig: {
 *         vpc: defaultNetwork.id,
 *         subnet: "10.0.0.0/29",
 *     },
 * });
 * const defaultConnectionProfile = new gcp.datastream.ConnectionProfile("defaultConnectionProfile", {
 *     displayName: "Connection profile",
 *     location: "us-central1",
 *     connectionProfileId: "my-profile",
 *     bigqueryProfile: {},
 *     privateConnectivity: {
 *         privateConnection: privateConnection.id,
 *     },
 * });
 * ```
 * ### Datastream Connection Profile Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.datastream.ConnectionProfile("default", {
 *     connectionProfileId: "my-profile",
 *     displayName: "Connection profile",
 *     forwardSshConnectivity: {
 *         hostname: "google.com",
 *         password: "swordfish",
 *         port: 8022,
 *         username: "my-user",
 *     },
 *     gcsProfile: {
 *         bucket: "my-bucket",
 *         rootPath: "/path",
 *     },
 *     labels: {
 *         key: "value",
 *     },
 *     location: "us-central1",
 * });
 * ```
 * ### Datastream Connection Profile Postgres
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as random from "@pulumi/random";
 *
 * const instance = new gcp.sql.DatabaseInstance("instance", {
 *     databaseVersion: "POSTGRES_14",
 *     region: "us-central1",
 *     settings: {
 *         tier: "db-f1-micro",
 *         ipConfiguration: {
 *             authorizedNetworks: [
 *                 {
 *                     value: "34.71.242.81",
 *                 },
 *                 {
 *                     value: "34.72.28.29",
 *                 },
 *                 {
 *                     value: "34.67.6.157",
 *                 },
 *                 {
 *                     value: "34.67.234.134",
 *                 },
 *                 {
 *                     value: "34.72.239.218",
 *                 },
 *             ],
 *         },
 *     },
 *     deletionProtection: true,
 * });
 * const db = new gcp.sql.Database("db", {instance: instance.name});
 * const pwd = new random.RandomPassword("pwd", {
 *     length: 16,
 *     special: false,
 * });
 * const user = new gcp.sql.User("user", {
 *     instance: instance.name,
 *     password: pwd.result,
 * });
 * const _default = new gcp.datastream.ConnectionProfile("default", {
 *     displayName: "Connection profile",
 *     location: "us-central1",
 *     connectionProfileId: "my-profile",
 *     postgresqlProfile: {
 *         hostname: instance.publicIpAddress,
 *         username: user.name,
 *         password: user.password,
 *         database: db.name,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ConnectionProfile can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:datastream/connectionProfile:ConnectionProfile default projects/{{project}}/locations/{{location}}/connectionProfiles/{{connection_profile_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:datastream/connectionProfile:ConnectionProfile default {{project}}/{{location}}/{{connection_profile_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:datastream/connectionProfile:ConnectionProfile default {{location}}/{{connection_profile_id}}
 * ```
 */
class ConnectionProfile extends pulumi.CustomResource {
    /**
     * Get an existing ConnectionProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ConnectionProfile(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ConnectionProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectionProfile.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["bigqueryProfile"] = state ? state.bigqueryProfile : undefined;
            resourceInputs["connectionProfileId"] = state ? state.connectionProfileId : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["forwardSshConnectivity"] = state ? state.forwardSshConnectivity : undefined;
            resourceInputs["gcsProfile"] = state ? state.gcsProfile : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mysqlProfile"] = state ? state.mysqlProfile : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oracleProfile"] = state ? state.oracleProfile : undefined;
            resourceInputs["postgresqlProfile"] = state ? state.postgresqlProfile : undefined;
            resourceInputs["privateConnectivity"] = state ? state.privateConnectivity : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.connectionProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionProfileId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["bigqueryProfile"] = args ? args.bigqueryProfile : undefined;
            resourceInputs["connectionProfileId"] = args ? args.connectionProfileId : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["forwardSshConnectivity"] = args ? args.forwardSshConnectivity : undefined;
            resourceInputs["gcsProfile"] = args ? args.gcsProfile : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mysqlProfile"] = args ? args.mysqlProfile : undefined;
            resourceInputs["oracleProfile"] = args ? args.oracleProfile : undefined;
            resourceInputs["postgresqlProfile"] = args ? args.postgresqlProfile : undefined;
            resourceInputs["privateConnectivity"] = args ? args.privateConnectivity : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectionProfile.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ConnectionProfile = ConnectionProfile;
/** @internal */
ConnectionProfile.__pulumiType = 'gcp:datastream/connectionProfile:ConnectionProfile';
//# sourceMappingURL=connectionProfile.js.map