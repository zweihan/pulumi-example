import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * ## Example Usage
 * ### Datastream Connection Profile Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.datastream.ConnectionProfile("default", {
 *     connectionProfileId: "my-profile",
 *     displayName: "Connection profile",
 *     gcsProfile: {
 *         bucket: "my-bucket",
 *         rootPath: "/path",
 *     },
 *     location: "us-central1",
 * });
 * ```
 * ### Datastream Connection Profile Bigquery Private Connection
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const defaultNetwork = new gcp.compute.Network("defaultNetwork", {});
 * const privateConnection = new gcp.datastream.PrivateConnection("privateConnection", {
 *     displayName: "Connection profile",
 *     location: "us-central1",
 *     privateConnectionId: "my-connection",
 *     labels: {
 *         key: "value",
 *     },
 *     vpcPeeringConfig: {
 *         vpc: defaultNetwork.id,
 *         subnet: "10.0.0.0/29",
 *     },
 * });
 * const defaultConnectionProfile = new gcp.datastream.ConnectionProfile("defaultConnectionProfile", {
 *     displayName: "Connection profile",
 *     location: "us-central1",
 *     connectionProfileId: "my-profile",
 *     bigqueryProfile: {},
 *     privateConnectivity: {
 *         privateConnection: privateConnection.id,
 *     },
 * });
 * ```
 * ### Datastream Connection Profile Full
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 *
 * const _default = new gcp.datastream.ConnectionProfile("default", {
 *     connectionProfileId: "my-profile",
 *     displayName: "Connection profile",
 *     forwardSshConnectivity: {
 *         hostname: "google.com",
 *         password: "swordfish",
 *         port: 8022,
 *         username: "my-user",
 *     },
 *     gcsProfile: {
 *         bucket: "my-bucket",
 *         rootPath: "/path",
 *     },
 *     labels: {
 *         key: "value",
 *     },
 *     location: "us-central1",
 * });
 * ```
 * ### Datastream Connection Profile Postgres
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as random from "@pulumi/random";
 *
 * const instance = new gcp.sql.DatabaseInstance("instance", {
 *     databaseVersion: "POSTGRES_14",
 *     region: "us-central1",
 *     settings: {
 *         tier: "db-f1-micro",
 *         ipConfiguration: {
 *             authorizedNetworks: [
 *                 {
 *                     value: "34.71.242.81",
 *                 },
 *                 {
 *                     value: "34.72.28.29",
 *                 },
 *                 {
 *                     value: "34.67.6.157",
 *                 },
 *                 {
 *                     value: "34.67.234.134",
 *                 },
 *                 {
 *                     value: "34.72.239.218",
 *                 },
 *             ],
 *         },
 *     },
 *     deletionProtection: true,
 * });
 * const db = new gcp.sql.Database("db", {instance: instance.name});
 * const pwd = new random.RandomPassword("pwd", {
 *     length: 16,
 *     special: false,
 * });
 * const user = new gcp.sql.User("user", {
 *     instance: instance.name,
 *     password: pwd.result,
 * });
 * const _default = new gcp.datastream.ConnectionProfile("default", {
 *     displayName: "Connection profile",
 *     location: "us-central1",
 *     connectionProfileId: "my-profile",
 *     postgresqlProfile: {
 *         hostname: instance.publicIpAddress,
 *         username: user.name,
 *         password: user.password,
 *         database: db.name,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ConnectionProfile can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import gcp:datastream/connectionProfile:ConnectionProfile default projects/{{project}}/locations/{{location}}/connectionProfiles/{{connection_profile_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:datastream/connectionProfile:ConnectionProfile default {{project}}/{{location}}/{{connection_profile_id}}
 * ```
 *
 * ```sh
 *  $ pulumi import gcp:datastream/connectionProfile:ConnectionProfile default {{location}}/{{connection_profile_id}}
 * ```
 */
export declare class ConnectionProfile extends pulumi.CustomResource {
    /**
     * Get an existing ConnectionProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionProfileState, opts?: pulumi.CustomResourceOptions): ConnectionProfile;
    /**
     * Returns true if the given object is an instance of ConnectionProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ConnectionProfile;
    /**
     * BigQuery warehouse profile.
     */
    readonly bigqueryProfile: pulumi.Output<outputs.datastream.ConnectionProfileBigqueryProfile | undefined>;
    /**
     * The connection profile identifier.
     */
    readonly connectionProfileId: pulumi.Output<string>;
    /**
     * Display name.
     */
    readonly displayName: pulumi.Output<string>;
    /**
     * Forward SSH tunnel connectivity.
     * Structure is documented below.
     */
    readonly forwardSshConnectivity: pulumi.Output<outputs.datastream.ConnectionProfileForwardSshConnectivity | undefined>;
    /**
     * Cloud Storage bucket profile.
     * Structure is documented below.
     */
    readonly gcsProfile: pulumi.Output<outputs.datastream.ConnectionProfileGcsProfile | undefined>;
    /**
     * Labels.
     */
    readonly labels: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The name of the location this connection profile is located in.
     */
    readonly location: pulumi.Output<string>;
    /**
     * MySQL database profile.
     * Structure is documented below.
     */
    readonly mysqlProfile: pulumi.Output<outputs.datastream.ConnectionProfileMysqlProfile | undefined>;
    /**
     * The resource's name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Oracle database profile.
     * Structure is documented below.
     */
    readonly oracleProfile: pulumi.Output<outputs.datastream.ConnectionProfileOracleProfile | undefined>;
    /**
     * PostgreSQL database profile.
     * Structure is documented below.
     */
    readonly postgresqlProfile: pulumi.Output<outputs.datastream.ConnectionProfilePostgresqlProfile | undefined>;
    /**
     * Private connectivity.
     * Structure is documented below.
     */
    readonly privateConnectivity: pulumi.Output<outputs.datastream.ConnectionProfilePrivateConnectivity | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project: pulumi.Output<string>;
    /**
     * Create a ConnectionProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionProfileArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ConnectionProfile resources.
 */
export interface ConnectionProfileState {
    /**
     * BigQuery warehouse profile.
     */
    bigqueryProfile?: pulumi.Input<inputs.datastream.ConnectionProfileBigqueryProfile>;
    /**
     * The connection profile identifier.
     */
    connectionProfileId?: pulumi.Input<string>;
    /**
     * Display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Forward SSH tunnel connectivity.
     * Structure is documented below.
     */
    forwardSshConnectivity?: pulumi.Input<inputs.datastream.ConnectionProfileForwardSshConnectivity>;
    /**
     * Cloud Storage bucket profile.
     * Structure is documented below.
     */
    gcsProfile?: pulumi.Input<inputs.datastream.ConnectionProfileGcsProfile>;
    /**
     * Labels.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The name of the location this connection profile is located in.
     */
    location?: pulumi.Input<string>;
    /**
     * MySQL database profile.
     * Structure is documented below.
     */
    mysqlProfile?: pulumi.Input<inputs.datastream.ConnectionProfileMysqlProfile>;
    /**
     * The resource's name.
     */
    name?: pulumi.Input<string>;
    /**
     * Oracle database profile.
     * Structure is documented below.
     */
    oracleProfile?: pulumi.Input<inputs.datastream.ConnectionProfileOracleProfile>;
    /**
     * PostgreSQL database profile.
     * Structure is documented below.
     */
    postgresqlProfile?: pulumi.Input<inputs.datastream.ConnectionProfilePostgresqlProfile>;
    /**
     * Private connectivity.
     * Structure is documented below.
     */
    privateConnectivity?: pulumi.Input<inputs.datastream.ConnectionProfilePrivateConnectivity>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ConnectionProfile resource.
 */
export interface ConnectionProfileArgs {
    /**
     * BigQuery warehouse profile.
     */
    bigqueryProfile?: pulumi.Input<inputs.datastream.ConnectionProfileBigqueryProfile>;
    /**
     * The connection profile identifier.
     */
    connectionProfileId: pulumi.Input<string>;
    /**
     * Display name.
     */
    displayName: pulumi.Input<string>;
    /**
     * Forward SSH tunnel connectivity.
     * Structure is documented below.
     */
    forwardSshConnectivity?: pulumi.Input<inputs.datastream.ConnectionProfileForwardSshConnectivity>;
    /**
     * Cloud Storage bucket profile.
     * Structure is documented below.
     */
    gcsProfile?: pulumi.Input<inputs.datastream.ConnectionProfileGcsProfile>;
    /**
     * Labels.
     */
    labels?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The name of the location this connection profile is located in.
     */
    location: pulumi.Input<string>;
    /**
     * MySQL database profile.
     * Structure is documented below.
     */
    mysqlProfile?: pulumi.Input<inputs.datastream.ConnectionProfileMysqlProfile>;
    /**
     * Oracle database profile.
     * Structure is documented below.
     */
    oracleProfile?: pulumi.Input<inputs.datastream.ConnectionProfileOracleProfile>;
    /**
     * PostgreSQL database profile.
     * Structure is documented below.
     */
    postgresqlProfile?: pulumi.Input<inputs.datastream.ConnectionProfilePostgresqlProfile>;
    /**
     * Private connectivity.
     * Structure is documented below.
     */
    privateConnectivity?: pulumi.Input<inputs.datastream.ConnectionProfilePrivateConnectivity>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    project?: pulumi.Input<string>;
}
