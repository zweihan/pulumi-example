"use strict";
// Copyright 2016-2023, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = __importStar(require("assert"));
const pulumi = __importStar(require(".."));
class TestMocks {
    constructor(outputs) {
        this.outputs = outputs;
    }
    call(args) {
        throw new Error(`unknown function ${args.token}`);
    }
    newResource(args) {
        switch (args.type) {
            case "pulumi:pulumi:StackReference":
                return {
                    id: `${args.name}_id`,
                    state: {
                        outputs: this.outputs,
                    },
                };
            default:
                throw new Error(`unknown type ${args.type}`);
        }
    }
}
describe("StackReference.getOutputDetails", () => {
    // The two tests don't share a mock because in the JS SDK,
    // if a map item is a secret, the entire map gets promoted to secret.
    it("supports plain text", () => __awaiter(void 0, void 0, void 0, function* () {
        pulumi.runtime.setMocks(new TestMocks({
            bucket: "mybucket-1234",
        }));
        const ref = new pulumi.StackReference("foo");
        assert.deepStrictEqual(yield ref.getOutputDetails("bucket"), {
            value: "mybucket-1234",
        });
    }));
    it("supports secrets", () => __awaiter(void 0, void 0, void 0, function* () {
        pulumi.runtime.setMocks(new TestMocks({
            password: pulumi.secret("supersecretpassword"),
        }));
        const ref = new pulumi.StackReference("foo");
        assert.deepStrictEqual(yield ref.getOutputDetails("password"), {
            secretValue: "supersecretpassword",
        });
    }));
});
//# sourceMappingURL=stackReference.spec.js.map