"use strict";
// Copyright 2016-2022, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const localWorkspace_1 = require("./localWorkspace");
const remoteStack_1 = require("./remoteStack");
const stack_1 = require("./stack");
/**
 * RemoteWorkspace is the execution context containing a single remote Pulumi project.
 */
class RemoteWorkspace {
    /**
     * PREVIEW: Creates a Stack backed by a RemoteWorkspace with source code from the specified Git repository.
     * Pulumi operations on the stack (Preview, Update, Refresh, and Destroy) are performed remotely.
     *
     * @param args A set of arguments to initialize a RemoteStack with a remote Pulumi program from a Git repository.
     * @param opts Additional customizations to be applied to the Workspace.
     */
    static createStack(args, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const ws = yield createLocalWorkspace(args, opts);
            const stack = yield stack_1.Stack.create(args.stackName, ws);
            return remoteStack_1.RemoteStack.create(stack);
        });
    }
    /**
     * PREVIEW: Selects an existing Stack backed by a RemoteWorkspace with source code from the specified Git
     * repository. Pulumi operations on the stack (Preview, Update, Refresh, and Destroy) are performed remotely.
     *
     * @param args A set of arguments to initialize a RemoteStack with a remote Pulumi program from a Git repository.
     * @param opts Additional customizations to be applied to the Workspace.
     */
    static selectStack(args, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const ws = yield createLocalWorkspace(args, opts);
            const stack = yield stack_1.Stack.select(args.stackName, ws);
            return remoteStack_1.RemoteStack.create(stack);
        });
    }
    /**
     * PREVIEW: Creates or selects an existing Stack backed by a RemoteWorkspace with source code from the specified
     * Git repository. Pulumi operations on the stack (Preview, Update, Refresh, and Destroy) are performed remotely.
     *
     * @param args A set of arguments to initialize a RemoteStack with a remote Pulumi program from a Git repository.
     * @param opts Additional customizations to be applied to the Workspace.
     */
    static createOrSelectStack(args, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const ws = yield createLocalWorkspace(args, opts);
            const stack = yield stack_1.Stack.createOrSelect(args.stackName, ws);
            return remoteStack_1.RemoteStack.create(stack);
        });
    }
    constructor() { } // eslint-disable-line @typescript-eslint/no-empty-function
}
exports.RemoteWorkspace = RemoteWorkspace;
function createLocalWorkspace(args, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!isFullyQualifiedStackName(args.stackName)) {
            throw new Error(`stack name "${args.stackName}" must be fully qualified.`);
        }
        if (!args.url) {
            throw new Error("url is required.");
        }
        if (args.branch && args.commitHash) {
            throw new Error("branch and commitHash cannot both be specified.");
        }
        if (!args.branch && !args.commitHash) {
            throw new Error("either branch or commitHash is required.");
        }
        if (args.auth) {
            if (args.auth.sshPrivateKey && args.auth.sshPrivateKeyPath) {
                throw new Error("sshPrivateKey and sshPrivateKeyPath cannot both be specified.");
            }
        }
        const localOpts = {
            remote: true,
            remoteGitProgramArgs: args,
            remoteEnvVars: opts === null || opts === void 0 ? void 0 : opts.envVars,
            remotePreRunCommands: opts === null || opts === void 0 ? void 0 : opts.preRunCommands,
            remoteSkipInstallDependencies: opts === null || opts === void 0 ? void 0 : opts.skipInstallDependencies,
        };
        return yield localWorkspace_1.LocalWorkspace.create(localOpts);
    });
}
/** @internal exported only so it can be tested */
function isFullyQualifiedStackName(stackName) {
    if (!stackName) {
        return false;
    }
    const split = stackName.split("/");
    return split.length === 3 && !!split[0] && !!split[1] && !!split[2];
}
exports.isFullyQualifiedStackName = isFullyQualifiedStackName;
//# sourceMappingURL=remoteWorkspace.js.map